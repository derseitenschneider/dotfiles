2024-10-22T09:17:55.206 D t0 pollable.cc:41 pollable attach 0x7f79160045a8 to 0x600000f60558
2024-10-22T09:17:55.229 I t0 lnav.cc:2550 lnav started
2024-10-22T09:17:55.234 I t0 lnav_config.cc:1801 loading builtin configuration into default
2024-10-22T09:17:55.245 I t0 lnav_config.cc:1803 loading builtin configuration into base
2024-10-22T09:17:55.256 I t0 lnav_config.cc:1806 loading installed configuration files
2024-10-22T09:17:55.257 I t0 lnav_config.cc:1836 loading user configuration
2024-10-22T09:17:55.257 I t0 lnav_config.cc:1691 loading configuration from /Users/brianboy/.config/lnav/config.json
2024-10-22T09:17:55.257 I t0 log.annotate.cc:84 preparing annotation condition expression: SELECT 1 WHERE :log_body LIKE '%[context]%[/context]%'
2024-10-22T09:17:55.270 D t0 log_format_loader.cc:1356 Loading default formats
2024-10-22T09:17:55.270 D t0 log_format_loader.cc:86 Loading format -- access_log
2024-10-22T09:17:55.271 D t0 log_format_loader.cc:86 Loading format -- alb_log
2024-10-22T09:17:55.271 D t0 log_format_loader.cc:86 Loading format -- block_log
2024-10-22T09:17:55.272 D t0 log_format_loader.cc:86 Loading format -- bunyan_log
2024-10-22T09:17:55.272 D t0 log_format_loader.cc:86 Loading format -- candlepin_log
2024-10-22T09:17:55.272 D t0 log_format_loader.cc:86 Loading format -- choose_repo_log
2024-10-22T09:17:55.272 D t0 log_format_loader.cc:86 Loading format -- cloudflare_json_log
2024-10-22T09:17:55.273 D t0 log_format_loader.cc:86 Loading format -- cloudvm_ram_log
2024-10-22T09:17:55.273 D t0 log_format_loader.cc:86 Loading format -- cups_log
2024-10-22T09:17:55.273 D t0 log_format_loader.cc:86 Loading format -- dpkg_log
2024-10-22T09:17:55.274 D t0 log_format_loader.cc:86 Loading format -- elb_log
2024-10-22T09:17:55.274 D t0 log_format_loader.cc:86 Loading format -- engine_log
2024-10-22T09:17:55.274 D t0 log_format_loader.cc:86 Loading format -- error_log
2024-10-22T09:17:55.274 D t0 log_format_loader.cc:86 Loading format -- esx_syslog_log
2024-10-22T09:17:55.275 D t0 log_format_loader.cc:86 Loading format -- fsck_hfs_log
2024-10-22T09:17:55.275 D t0 log_format_loader.cc:86 Loading format -- github_events_log
2024-10-22T09:17:55.276 D t0 log_format_loader.cc:86 Loading format -- glog_log
2024-10-22T09:17:55.276 D t0 log_format_loader.cc:86 Loading format -- haproxy_log
2024-10-22T09:17:55.277 D t0 log_format_loader.cc:86 Loading format -- java_log
2024-10-22T09:17:55.279 D t0 log_format_loader.cc:86 Loading format -- journald_json_log
2024-10-22T09:17:55.279 D t0 log_format_loader.cc:86 Loading format -- katello_log
2024-10-22T09:17:55.279 D t0 log_format_loader.cc:86 Loading format -- nextcloud
2024-10-22T09:17:55.280 D t0 log_format_loader.cc:86 Loading format -- nextflow_log
2024-10-22T09:17:55.280 D t0 log_format_loader.cc:86 Loading format -- openam_log
2024-10-22T09:17:55.280 D t0 log_format_loader.cc:86 Loading format -- openamdb_log
2024-10-22T09:17:55.280 D t0 log_format_loader.cc:86 Loading format -- openstack_log
2024-10-22T09:17:55.281 D t0 log_format_loader.cc:86 Loading format -- page_log
2024-10-22T09:17:55.281 D t0 log_format_loader.cc:86 Loading format -- papertrail_log
2024-10-22T09:17:55.281 D t0 log_format_loader.cc:86 Loading format -- pcap_log
2024-10-22T09:17:55.281 D t0 log_format_loader.cc:86 Loading format -- procstate_log
2024-10-22T09:17:55.281 D t0 log_format_loader.cc:86 Loading format -- redis_log
2024-10-22T09:17:55.282 D t0 log_format_loader.cc:86 Loading format -- snaplogic_log
2024-10-22T09:17:55.282 D t0 log_format_loader.cc:86 Loading format -- sssd_log
2024-10-22T09:17:55.282 D t0 log_format_loader.cc:86 Loading format -- strace_log
2024-10-22T09:17:55.282 D t0 log_format_loader.cc:86 Loading format -- sudo_log
2024-10-22T09:17:55.282 D t0 log_format_loader.cc:86 Loading format -- syslog_log
2024-10-22T09:17:55.283 D t0 log_format_loader.cc:86 Loading format -- s3_log
2024-10-22T09:17:55.284 D t0 log_format_loader.cc:86 Loading format -- tcf_log
2024-10-22T09:17:55.284 D t0 log_format_loader.cc:86 Loading format -- tcsh_history
2024-10-22T09:17:55.284 D t0 log_format_loader.cc:86 Loading format -- unifi_log
2024-10-22T09:17:55.285 D t0 log_format_loader.cc:86 Loading format -- uwsgi_log
2024-10-22T09:17:55.285 D t0 log_format_loader.cc:86 Loading format -- vdsm_log
2024-10-22T09:17:55.286 D t0 log_format_loader.cc:86 Loading format -- vmk_log
2024-10-22T09:17:55.286 D t0 log_format_loader.cc:86 Loading format -- vmw_log
2024-10-22T09:17:55.288 D t0 log_format_loader.cc:86 Loading format -- vmw_vc_svc_log
2024-10-22T09:17:55.289 D t0 log_format_loader.cc:86 Loading format -- vmw_py_log
2024-10-22T09:17:55.289 D t0 log_format_loader.cc:86 Loading format -- vpostgres_log
2024-10-22T09:17:55.290 D t0 log_format_loader.cc:86 Loading format -- xmlrpc_log
2024-10-22T09:17:55.290 I t0 log_format_loader.cc:1319 loading formats from path: /etc/lnav/formats/*/*.json
2024-10-22T09:17:55.290 I t0 log_format_loader.cc:1319 loading formats from path: /usr/local/Cellar/lnav/0.12.2/etc/lnav/formats/*/*.json
2024-10-22T09:17:55.290 I t0 log_format_loader.cc:1319 loading formats from path: /Users/brianboy/.config/lnav/formats/*/*.json
2024-10-22T09:17:55.290 W t0 log_format.cc:2883 /alb_log/regex/std:body field 'body' not found in pattern
2024-10-22T09:17:55.291 W t0 log_format.cc:2871 /block_log/regex/sq-brackets:level field 'level' not found in pattern
2024-10-22T09:17:55.291 W t0 log_format.cc:2871 /block_log/regex/std:level field 'level' not found in pattern
2024-10-22T09:17:55.291 W t0 log_format.cc:2871 /candlepin_log/regex/other:level field 'level' not found in pattern
2024-10-22T09:17:55.291 W t0 log_format.cc:2871 /candlepin_log/regex/reqorg:level field 'level' not found in pattern
2024-10-22T09:17:55.291 W t0 log_format.cc:2871 /cloudvm_ram_log/regex/std:level field 'level' not found in pattern
2024-10-22T09:17:55.291 W t0 log_format_loader.cc:1411 Format collision, format 'cups_log' matches sample from 'error_log'
2024-10-22T09:17:55.291 W t0 log_format.cc:2871 /dpkg_log/regex/std:level field 'level' not found in pattern
2024-10-22T09:17:55.291 W t0 log_format_loader.cc:1411 Format collision, format 'error_log' matches sample from 'cups_log'
2024-10-22T09:17:55.291 W t0 log_format_loader.cc:1411 Format collision, format 'esx_syslog_log' matches sample from 'vmk_log'
2024-10-22T09:17:55.291 W t0 log_format_loader.cc:1411 Format collision, format 'esx_syslog_log' matches sample from 'vmw_log'
2024-10-22T09:17:55.291 W t0 log_format.cc:2871 /fsck_hfs_log/regex/std:level field 'level' not found in pattern
2024-10-22T09:17:55.291 W t0 log_format.cc:2871 /haproxy_log/regex/event_started:level field 'level' not found in pattern
2024-10-22T09:17:55.291 W t0 log_format.cc:2883 /haproxy_log/regex/event_started:body field 'body' not found in pattern
2024-10-22T09:17:55.291 W t0 log_format.cc:2871 /haproxy_log/regex/event_stopped:level field 'level' not found in pattern
2024-10-22T09:17:55.291 W t0 log_format.cc:2883 /haproxy_log/regex/event_stopped:body field 'body' not found in pattern
2024-10-22T09:17:55.291 W t0 log_format.cc:2871 /haproxy_log/regex/event_stopping:level field 'level' not found in pattern
2024-10-22T09:17:55.291 W t0 log_format.cc:2883 /haproxy_log/regex/event_stopping:body field 'body' not found in pattern
2024-10-22T09:17:55.291 W t0 log_format.cc:2871 /haproxy_log/regex/http:level field 'level' not found in pattern
2024-10-22T09:17:55.291 W t0 log_format.cc:2883 /haproxy_log/regex/http:body field 'body' not found in pattern
2024-10-22T09:17:55.291 W t0 log_format.cc:2871 /haproxy_log/regex/ssl:level field 'level' not found in pattern
2024-10-22T09:17:55.291 W t0 log_format.cc:2883 /haproxy_log/regex/ssl:body field 'body' not found in pattern
2024-10-22T09:17:55.291 W t0 log_format.cc:2871 /haproxy_log/regex/tcp:level field 'level' not found in pattern
2024-10-22T09:17:55.291 W t0 log_format.cc:2883 /haproxy_log/regex/tcp:body field 'body' not found in pattern
2024-10-22T09:17:55.292 W t0 log_format_loader.cc:1411 Format collision, format 'java_log' matches sample from 'vmw_log'
2024-10-22T09:17:55.292 W t0 log_format.cc:2883 /katello_log/regex/log:body field 'body' not found in pattern
2024-10-22T09:17:55.292 W t0 log_format.cc:2871 /openamdb_log/regex/std:level field 'level' not found in pattern
2024-10-22T09:17:55.293 W t0 log_format_loader.cc:1411 Format collision, format 'openstack_log' matches sample from 's3_log'
2024-10-22T09:17:55.293 W t0 log_format.cc:2871 /page_log/regex/1.7:level field 'level' not found in pattern
2024-10-22T09:17:55.293 W t0 log_format.cc:2871 /page_log/regex/pre-1.7:level field 'level' not found in pattern
2024-10-22T09:17:55.293 W t0 log_format.cc:2883 /page_log/regex/pre-1.7:body field 'body' not found in pattern
2024-10-22T09:17:55.293 I t0 log_format.cc:2947 preparing file-format header expression: SELECT 1 WHERE :header REGEXP '^(?:a1b2c3d4|d4c3b2a1|a1b23c4d|4d3cb2a1).*'
2024-10-22T09:17:55.293 I t0 log_format.cc:2947 preparing file-format header expression: SELECT 1 WHERE :header REGEXP '^0a0d0d0a.{8}(?:1a2b3c4d|4d3c2b1a).*'
2024-10-22T09:17:55.293 W t0 log_format.cc:2871 /procstate_log/regex/std:level field 'level' not found in pattern
2024-10-22T09:17:55.293 W t0 log_format.cc:2871 /redis_log/regex/sig:level field 'level' not found in pattern
2024-10-22T09:17:55.293 W t0 log_format.cc:2883 /s3_log/regex/std:body field 'body' not found in pattern
2024-10-22T09:17:55.293 W t0 log_format.cc:2883 /s3_log/regex/std-v2:body field 'body' not found in pattern
2024-10-22T09:17:55.293 W t0 log_format.cc:2883 /sudo_log/regex/std:body field 'body' not found in pattern
2024-10-22T09:17:55.293 W t0 log_format_loader.cc:1411 Format collision, format 'syslog_log' matches sample from 'elb_log'
2024-10-22T09:17:55.293 W t0 log_format_loader.cc:1411 Format collision, format 'syslog_log' matches sample from 'haproxy_log'
2024-10-22T09:17:55.293 W t0 log_format_loader.cc:1411 Format collision, format 'syslog_log' matches sample from 'java_log'
2024-10-22T09:17:55.294 W t0 log_format_loader.cc:1411 Format collision, format 'syslog_log' matches sample from 'vmk_log'
2024-10-22T09:17:55.294 W t0 log_format_loader.cc:1411 Format collision, format 'syslog_log' matches sample from 'vmw_log'
2024-10-22T09:17:55.294 W t0 log_format.cc:2871 /tcf_log/regex/std:level field 'level' not found in pattern
2024-10-22T09:17:55.294 W t0 log_format.cc:2871 /tcsh_history/regex/std:level field 'level' not found in pattern
2024-10-22T09:17:55.294 W t0 log_format.cc:2883 /vmw_log/regex/esx-section:body field 'body' not found in pattern
2024-10-22T09:17:55.294 W t0 log_format.cc:2871 /vmw_log/regex/hdr-ftr:level field 'level' not found in pattern
2024-10-22T09:17:55.294 W t0 log_format.cc:2871 /vmw_log/regex/section:level field 'level' not found in pattern
2024-10-22T09:17:55.294 W t0 log_format.cc:2883 /vmw_log/regex/section:body field 'body' not found in pattern
2024-10-22T09:17:55.295 W t0 log_format_loader.cc:1411 Format collision, format 'vmw_log' matches sample from 'esx_syslog_log'
2024-10-22T09:17:55.295 W t0 log_format.cc:2871 /xmlrpc_log/regex/main:level field 'level' not found in pattern
2024-10-22T09:17:55.295 W t0 log_format_loader.cc:1440 Detected a cycle...
2024-10-22T09:17:55.295 W t0 log_format_loader.cc:1444   Skipping builtin format -- cups_log
2024-10-22T09:17:55.295 W t0 log_format_loader.cc:1444   Skipping builtin format -- error_log
2024-10-22T09:17:55.295 W t0 log_format_loader.cc:1444   Skipping builtin format -- esx_syslog_log
2024-10-22T09:17:55.295 W t0 log_format_loader.cc:1444   Skipping builtin format -- java_log
2024-10-22T09:17:55.295 W t0 log_format_loader.cc:1444   Skipping builtin format -- syslog_log
2024-10-22T09:17:55.295 W t0 log_format_loader.cc:1444   Skipping builtin format -- vmw_log
2024-10-22T09:17:55.295 W t0 log_format_loader.cc:1440 Detected a cycle...
2024-10-22T09:17:55.295 W t0 log_format_loader.cc:1444   Skipping builtin format -- esx_syslog_log
2024-10-22T09:17:55.295 W t0 log_format_loader.cc:1444   Skipping builtin format -- java_log
2024-10-22T09:17:55.295 W t0 log_format_loader.cc:1444   Skipping builtin format -- syslog_log
2024-10-22T09:17:55.295 W t0 log_format_loader.cc:1444   Skipping builtin format -- vmw_log
2024-10-22T09:17:55.295 I t0 log_format_loader.cc:1465 Format order:
2024-10-22T09:17:55.295 I t0 log_format_loader.cc:1468   access_log
2024-10-22T09:17:55.295 I t0 log_format_loader.cc:1468   alb_log
2024-10-22T09:17:55.295 I t0 log_format_loader.cc:1468   block_log
2024-10-22T09:17:55.295 I t0 log_format_loader.cc:1468   bunyan_log
2024-10-22T09:17:55.295 I t0 log_format_loader.cc:1468   candlepin_log
2024-10-22T09:17:55.295 I t0 log_format_loader.cc:1468   choose_repo_log
2024-10-22T09:17:55.295 I t0 log_format_loader.cc:1468   cloudflare_json_log
2024-10-22T09:17:55.295 I t0 log_format_loader.cc:1468   cloudvm_ram_log
2024-10-22T09:17:55.295 I t0 log_format_loader.cc:1468   dpkg_log
2024-10-22T09:17:55.295 I t0 log_format_loader.cc:1468   elb_log
2024-10-22T09:17:55.295 I t0 log_format_loader.cc:1468   engine_log
2024-10-22T09:17:55.295 I t0 log_format_loader.cc:1468   fsck_hfs_log
2024-10-22T09:17:55.295 I t0 log_format_loader.cc:1468   github_events_log
2024-10-22T09:17:55.295 I t0 log_format_loader.cc:1468   glog_log
2024-10-22T09:17:55.295 I t0 log_format_loader.cc:1468   haproxy_log
2024-10-22T09:17:55.295 I t0 log_format_loader.cc:1468   journald_json_log
2024-10-22T09:17:55.295 I t0 log_format_loader.cc:1468   katello_log
2024-10-22T09:17:55.295 I t0 log_format_loader.cc:1468   nextcloud
2024-10-22T09:17:55.295 I t0 log_format_loader.cc:1468   nextflow_log
2024-10-22T09:17:55.295 I t0 log_format_loader.cc:1468   openam_log
2024-10-22T09:17:55.295 I t0 log_format_loader.cc:1468   openamdb_log
2024-10-22T09:17:55.295 I t0 log_format_loader.cc:1468   page_log
2024-10-22T09:17:55.295 I t0 log_format_loader.cc:1468   papertrail_log
2024-10-22T09:17:55.295 I t0 log_format_loader.cc:1468   pcap_log
2024-10-22T09:17:55.295 I t0 log_format_loader.cc:1468   procstate_log
2024-10-22T09:17:55.295 I t0 log_format_loader.cc:1468   redis_log
2024-10-22T09:17:55.295 I t0 log_format_loader.cc:1468   s3_log
2024-10-22T09:17:55.295 I t0 log_format_loader.cc:1468   snaplogic_log
2024-10-22T09:17:55.295 I t0 log_format_loader.cc:1468   sssd_log
2024-10-22T09:17:55.295 I t0 log_format_loader.cc:1468   strace_log
2024-10-22T09:17:55.295 I t0 log_format_loader.cc:1468   sudo_log
2024-10-22T09:17:55.295 I t0 log_format_loader.cc:1468   tcf_log
2024-10-22T09:17:55.295 I t0 log_format_loader.cc:1468   tcsh_history
2024-10-22T09:17:55.295 I t0 log_format_loader.cc:1468   unifi_log
2024-10-22T09:17:55.295 I t0 log_format_loader.cc:1468   uwsgi_log
2024-10-22T09:17:55.295 I t0 log_format_loader.cc:1468   vdsm_log
2024-10-22T09:17:55.295 I t0 log_format_loader.cc:1468   vmk_log
2024-10-22T09:17:55.295 I t0 log_format_loader.cc:1468   vmw_py_log
2024-10-22T09:17:55.295 I t0 log_format_loader.cc:1468   vmw_vc_svc_log
2024-10-22T09:17:55.295 I t0 log_format_loader.cc:1468   vpostgres_log
2024-10-22T09:17:55.295 I t0 log_format_loader.cc:1468   xmlrpc_log
2024-10-22T09:17:55.295 I t0 log_format_loader.cc:1468   openstack_log
2024-10-22T09:17:55.295 I t0 log_format_loader.cc:1468   cups_log
2024-10-22T09:17:55.295 I t0 log_format_loader.cc:1468   error_log
2024-10-22T09:17:55.295 I t0 log_format_loader.cc:1468   esx_syslog_log
2024-10-22T09:17:55.295 I t0 log_format_loader.cc:1468   vmw_log
2024-10-22T09:17:55.295 I t0 log_format_loader.cc:1468   java_log
2024-10-22T09:17:55.295 I t0 log_format_loader.cc:1468   syslog_log
2024-10-22T09:17:55.296 T t0 log_vtab_impl.cc:166 log_vtab_impl.get_table_statement() -> CREATE TABLE all_logs  (
  log_line        INTEGER,                         -- The line number for the log message
  log_time        DATETIME,                        -- The adjusted timestamp for the log message
  log_level       TEXT     COLLATE loglevel,       -- The log message level
  -- BEGIN Format-specific fields:
  log_msg_format  TEXT     COLLATE 'BINARY'       , -- The message format with variables replaced by hash marks
  log_msg_schema  TEXT    hidden COLLATE 'BINARY'       , -- The ID for the message schema
  log_msg_values  TEXT     COLLATE 'BINARY'       , -- The values extracted from the message

  -- END Format-specific fields
  log_part         TEXT     COLLATE naturalnocase,    -- The partition the message is in
  log_actual_time  DATETIME HIDDEN,                   -- The timestamp from the original log file for this message
  log_idle_msecs   INTEGER,                           -- The difference in time between this messages and the previous
  log_mark         BOOLEAN,                           -- True if the log message was marked
  log_comment      TEXT,                              -- The comment for this message
  log_tags         TEXT,                              -- A JSON list of tags for this message
  log_annotations  TEXT,                              -- A JSON object of annotations for this messages
  log_filters      TEXT,                              -- A JSON list of filter IDs that matched this message
  log_opid         TEXT HIDDEN,                       -- The message's OPID
  log_format       TEXT HIDDEN,                       -- The name of the log file format
  log_format_regex TEXT HIDDEN,                       -- The name of the regex used to parse this log message
  log_time_msecs   INTEGER HIDDEN,                    -- The adjusted timestamp for the log message as the number of milliseconds from the epoch
  log_path         TEXT HIDDEN COLLATE naturalnocase, -- The path to the log f
2024-10-22T09:17:55.296 D t0 log_vtab_impl.cc:360 creating log format table: all_logs = 0x0
2024-10-22T09:17:55.296 T t0 log_vtab_impl.cc:166 log_vtab_impl.get_table_statement() -> CREATE TABLE generic_log  (
  log_line        INTEGER,                         -- The line number for the log message
  log_time        DATETIME,                        -- The adjusted timestamp for the log message
  log_level       TEXT     COLLATE loglevel,       -- The log message level
  -- BEGIN Format-specific fields:

  -- END Format-specific fields
  log_part         TEXT     COLLATE naturalnocase,    -- The partition the message is in
  log_actual_time  DATETIME HIDDEN,                   -- The timestamp from the original log file for this message
  log_idle_msecs   INTEGER,                           -- The difference in time between this messages and the previous
  log_mark         BOOLEAN,                           -- True if the log message was marked
  log_comment      TEXT,                              -- The comment for this message
  log_tags         TEXT,                              -- A JSON list of tags for this message
  log_annotations  TEXT,                              -- A JSON object of annotations for this messages
  log_filters      TEXT,                              -- A JSON list of filter IDs that matched this message
  log_opid         TEXT HIDDEN,                       -- The message's OPID
  log_format       TEXT HIDDEN,                       -- The name of the log file format
  log_format_regex TEXT HIDDEN,                       -- The name of the regex used to parse this log message
  log_time_msecs   INTEGER HIDDEN,                    -- The adjusted timestamp for the log message as the number of milliseconds from the epoch
  log_path         TEXT HIDDEN COLLATE naturalnocase, -- The path to the log file this message is from
  log_unique_path  TEXT HIDDEN COLLATE naturalnocase, -- The unique portion of the path this message is from
  log_text         TEXT HIDDEN,                       -- The full text of the log message
  log_body         TEXT HIDDEN,                       -- The body of 
2024-10-22T09:17:55.296 D t0 log_vtab_impl.cc:360 creating log format table: generic_log = 0x0
2024-10-22T09:17:55.296 T t0 log_vtab_impl.cc:166 log_vtab_impl.get_table_statement() -> CREATE TABLE lnav_piper_log  (
  log_line        INTEGER,                         -- The line number for the log message
  log_time        DATETIME,                        -- The adjusted timestamp for the log message
  log_level       TEXT     COLLATE loglevel,       -- The log message level
  -- BEGIN Format-specific fields:

  -- END Format-specific fields
  log_part         TEXT     COLLATE naturalnocase,    -- The partition the message is in
  log_actual_time  DATETIME HIDDEN,                   -- The timestamp from the original log file for this message
  log_idle_msecs   INTEGER,                           -- The difference in time between this messages and the previous
  log_mark         BOOLEAN,                           -- True if the log message was marked
  log_comment      TEXT,                              -- The comment for this message
  log_tags         TEXT,                              -- A JSON list of tags for this message
  log_annotations  TEXT,                              -- A JSON object of annotations for this messages
  log_filters      TEXT,                              -- A JSON list of filter IDs that matched this message
  log_opid         TEXT HIDDEN,                       -- The message's OPID
  log_format       TEXT HIDDEN,                       -- The name of the log file format
  log_format_regex TEXT HIDDEN,                       -- The name of the regex used to parse this log message
  log_time_msecs   INTEGER HIDDEN,                    -- The adjusted timestamp for the log message as the number of milliseconds from the epoch
  log_path         TEXT HIDDEN COLLATE naturalnocase, -- The path to the log file this message is from
  log_unique_path  TEXT HIDDEN COLLATE naturalnocase, -- The unique portion of the path this message is from
  log_text         TEXT HIDDEN,                       -- The full text of the log message
  log_body         TEXT HIDDEN,                       -- The body 
2024-10-22T09:17:55.296 D t0 log_vtab_impl.cc:360 creating log format table: lnav_piper_log = 0x0
2024-10-22T09:17:55.296 T t0 log_vtab_impl.cc:166 log_vtab_impl.get_table_statement() -> CREATE TABLE logfmt_log  (
  log_line        INTEGER,                         -- The line number for the log message
  log_time        DATETIME,                        -- The adjusted timestamp for the log message
  log_level       TEXT     COLLATE loglevel,       -- The log message level
  -- BEGIN Format-specific fields:
  fields          TEXT     COLLATE 'BINARY'       ,

  -- END Format-specific fields
  log_part         TEXT     COLLATE naturalnocase,    -- The partition the message is in
  log_actual_time  DATETIME HIDDEN,                   -- The timestamp from the original log file for this message
  log_idle_msecs   INTEGER,                           -- The difference in time between this messages and the previous
  log_mark         BOOLEAN,                           -- True if the log message was marked
  log_comment      TEXT,                              -- The comment for this message
  log_tags         TEXT,                              -- A JSON list of tags for this message
  log_annotations  TEXT,                              -- A JSON object of annotations for this messages
  log_filters      TEXT,                              -- A JSON list of filter IDs that matched this message
  log_opid         TEXT HIDDEN,                       -- The message's OPID
  log_format       TEXT HIDDEN,                       -- The name of the log file format
  log_format_regex TEXT HIDDEN,                       -- The name of the regex used to parse this log message
  log_time_msecs   INTEGER HIDDEN,                    -- The adjusted timestamp for the log message as the number of milliseconds from the epoch
  log_path         TEXT HIDDEN COLLATE naturalnocase, -- The path to the log file this message is from
  log_unique_path  TEXT HIDDEN COLLATE naturalnocase, -- The unique portion of the path this message is from
  log_text         TEXT HIDDEN,                       -- The full text of the log message
  log_body        
2024-10-22T09:17:55.296 D t0 log_vtab_impl.cc:360 creating log format table: logfmt_log = 0x0
2024-10-22T09:17:55.296 T t0 log_vtab_impl.cc:166 log_vtab_impl.get_table_statement() -> CREATE TABLE access_log  (
  log_line        INTEGER,                         -- The line number for the log message
  log_time        DATETIME,                        -- The adjusted timestamp for the log message
  log_level       TEXT     COLLATE loglevel,       -- The log message level
  -- BEGIN Format-specific fields:
  c_ip            TEXT     COLLATE 'ipaddress'    , -- The client IP address
  cs_method       TEXT     COLLATE 'BINARY'       , -- The request method
  cs_referer      TEXT     COLLATE 'BINARY'       , -- The client's referrer
  cs_uri_query    TEXT     COLLATE 'BINARY'       , -- The query parameters in the request URI
  cs_uri_stem     TEXT     COLLATE 'BINARY'       , -- The path part of the request URI
  cs_user_agent   TEXT     COLLATE 'BINARY'       , -- The client's HTTP agent
  cs_username     TEXT     COLLATE 'BINARY'       , -- The username passed from the client to the server
  cs_version      TEXT     COLLATE 'BINARY'       , -- The client's HTTP version
  sc_bytes        INTEGER  COLLATE 'BINARY'       , -- The number of bytes returned by the server
  sc_status       INTEGER  COLLATE 'BINARY'       , -- The status code returned by the server
  cs_host         TEXT     COLLATE 'BINARY'       , -- The value of the Host header

  -- END Format-specific fields
  log_part         TEXT     COLLATE naturalnocase,    -- The partition the message is in
  log_actual_time  DATETIME HIDDEN,                   -- The timestamp from the original log file for this message
  log_idle_msecs   INTEGER,                           -- The difference in time between this messages and the previous
  log_mark         BOOLEAN,                           -- True if the log message was marked
  log_comment      TEXT,                              -- The comment for this message
  log_tags         TEXT,                              -- A JSON list of tags for this message
  log_annotations  TEXT,                             
2024-10-22T09:17:55.297 D t0 log_vtab_impl.cc:360 creating log format table: access_log = 0x0
2024-10-22T09:17:55.297 T t0 log_vtab_impl.cc:166 log_vtab_impl.get_table_statement() -> CREATE TABLE alb_log  (
  log_line        INTEGER,                         -- The line number for the log message
  log_time        DATETIME,                        -- The adjusted timestamp for the log message
  log_level       TEXT     COLLATE loglevel,       -- The log message level
  -- BEGIN Format-specific fields:
  chosen_cert_arn          TEXT     COLLATE 'BINARY'       ,
  client_ip                TEXT     COLLATE 'ipaddress'    ,
  client_port              INTEGER  COLLATE 'BINARY'       ,
  cs_method                TEXT     COLLATE 'BINARY'       ,
  cs_uri_query             TEXT     COLLATE 'BINARY'       ,
  cs_uri_stem              TEXT     COLLATE 'BINARY'       ,
  cs_version               TEXT     COLLATE 'BINARY'       ,
  domain_name              TEXT     COLLATE 'BINARY'       ,
  elb                      TEXT     COLLATE 'BINARY'       ,
  elb_status_code          INTEGER  COLLATE 'BINARY'       ,
  matched_rule_priority    INTEGER  COLLATE 'BINARY'       ,
  received_bytes           INTEGER  COLLATE 'BINARY'       ,
  request_processing_time  FLOAT    COLLATE 'BINARY'       ,
  response_processing_time FLOAT    COLLATE 'BINARY'       ,
  sent_bytes               INTEGER  COLLATE 'BINARY'       ,
  ssl_cipher               TEXT     COLLATE 'BINARY'       ,
  ssl_protocol             TEXT     COLLATE 'BINARY'       ,
  target_group_arn         TEXT     COLLATE 'BINARY'       ,
  target_ip                TEXT     COLLATE 'ipaddress'    ,
  target_port              INTEGER  COLLATE 'BINARY'       ,
  target_processing_time   FLOAT    COLLATE 'BINARY'       ,
  target_status_code       INTEGER  COLLATE 'BINARY'       ,
  trace_id                 TEXT     COLLATE 'BINARY'       ,
  type                     TEXT     COLLATE 'BINARY'       ,
  user_agent               TEXT     COLLATE 'BINARY'       ,

  -- END Format-specific fields
  log_part         TEXT     COLLATE naturalnocase,    -- The partition the mes
2024-10-22T09:17:55.297 D t0 log_vtab_impl.cc:360 creating log format table: alb_log = 0x0
2024-10-22T09:17:55.297 T t0 log_vtab_impl.cc:166 log_vtab_impl.get_table_statement() -> CREATE TABLE block_log  (
  log_line        INTEGER,                         -- The line number for the log message
  log_time        DATETIME,                        -- The adjusted timestamp for the log message
  log_level       TEXT     COLLATE loglevel,       -- The log message level
  -- BEGIN Format-specific fields:

  -- END Format-specific fields
  log_part         TEXT     COLLATE naturalnocase,    -- The partition the message is in
  log_actual_time  DATETIME HIDDEN,                   -- The timestamp from the original log file for this message
  log_idle_msecs   INTEGER,                           -- The difference in time between this messages and the previous
  log_mark         BOOLEAN,                           -- True if the log message was marked
  log_comment      TEXT,                              -- The comment for this message
  log_tags         TEXT,                              -- A JSON list of tags for this message
  log_annotations  TEXT,                              -- A JSON object of annotations for this messages
  log_filters      TEXT,                              -- A JSON list of filter IDs that matched this message
  log_opid         TEXT HIDDEN,                       -- The message's OPID
  log_format       TEXT HIDDEN,                       -- The name of the log file format
  log_format_regex TEXT HIDDEN,                       -- The name of the regex used to parse this log message
  log_time_msecs   INTEGER HIDDEN,                    -- The adjusted timestamp for the log message as the number of milliseconds from the epoch
  log_path         TEXT HIDDEN COLLATE naturalnocase, -- The path to the log file this message is from
  log_unique_path  TEXT HIDDEN COLLATE naturalnocase, -- The unique portion of the path this message is from
  log_text         TEXT HIDDEN,                       -- The full text of the log message
  log_body         TEXT HIDDEN,                       -- The body of th
2024-10-22T09:17:55.297 D t0 log_vtab_impl.cc:360 creating log format table: block_log = 0x0
2024-10-22T09:17:55.297 T t0 log_vtab_impl.cc:166 log_vtab_impl.get_table_statement() -> CREATE TABLE bunyan_log  (
  log_line        INTEGER,                         -- The line number for the log message
  log_time        DATETIME,                        -- The adjusted timestamp for the log message
  log_level       TEXT     COLLATE loglevel,       -- The log message level
  -- BEGIN Format-specific fields:
  pid             INTEGER  COLLATE 'BINARY'       ,
  name            TEXT     COLLATE 'BINARY'       ,
  hostname        TEXT     COLLATE 'BINARY'       ,
  level           INTEGER  COLLATE 'BINARY'       ,
  v               INTEGER  COLLATE 'BINARY'       ,
  src             TEXT     COLLATE 'BINARY'       ,
  "src/file"      TEXT     COLLATE 'BINARY'       ,
  "src/line"      INTEGER  COLLATE 'BINARY'       ,
  "src/func"      TEXT     COLLATE 'BINARY'       ,

  -- END Format-specific fields
  log_part         TEXT     COLLATE naturalnocase,    -- The partition the message is in
  log_actual_time  DATETIME HIDDEN,                   -- The timestamp from the original log file for this message
  log_idle_msecs   INTEGER,                           -- The difference in time between this messages and the previous
  log_mark         BOOLEAN,                           -- True if the log message was marked
  log_comment      TEXT,                              -- The comment for this message
  log_tags         TEXT,                              -- A JSON list of tags for this message
  log_annotations  TEXT,                              -- A JSON object of annotations for this messages
  log_filters      TEXT,                              -- A JSON list of filter IDs that matched this message
  log_opid         TEXT HIDDEN,                       -- The message's OPID
  log_format       TEXT HIDDEN,                       -- The name of the log file format
  log_format_regex TEXT HIDDEN,                       -- The name of the regex used to parse this log message
  log_time_msecs   INTEGER HIDDEN,               
2024-10-22T09:17:55.297 D t0 log_vtab_impl.cc:360 creating log format table: bunyan_log = 0x0
2024-10-22T09:17:55.297 T t0 log_vtab_impl.cc:166 log_vtab_impl.get_table_statement() -> CREATE TABLE candlepin_log  (
  log_line        INTEGER,                         -- The line number for the log message
  log_time        DATETIME,                        -- The adjusted timestamp for the log message
  log_level       TEXT     COLLATE loglevel,       -- The log message level
  -- BEGIN Format-specific fields:
  alert_level     TEXT     COLLATE 'BINARY'       ,
  module          TEXT     COLLATE 'BINARY'       ,
  org             TEXT     COLLATE 'BINARY'       ,
  req             TEXT     COLLATE 'BINARY'       ,

  -- END Format-specific fields
  log_part         TEXT     COLLATE naturalnocase,    -- The partition the message is in
  log_actual_time  DATETIME HIDDEN,                   -- The timestamp from the original log file for this message
  log_idle_msecs   INTEGER,                           -- The difference in time between this messages and the previous
  log_mark         BOOLEAN,                           -- True if the log message was marked
  log_comment      TEXT,                              -- The comment for this message
  log_tags         TEXT,                              -- A JSON list of tags for this message
  log_annotations  TEXT,                              -- A JSON object of annotations for this messages
  log_filters      TEXT,                              -- A JSON list of filter IDs that matched this message
  log_opid         TEXT HIDDEN,                       -- The message's OPID
  log_format       TEXT HIDDEN,                       -- The name of the log file format
  log_format_regex TEXT HIDDEN,                       -- The name of the regex used to parse this log message
  log_time_msecs   INTEGER HIDDEN,                    -- The adjusted timestamp for the log message as the number of milliseconds from the epoch
  log_path         TEXT HIDDEN COLLATE naturalnocase, -- The path to the log file this message is from
  log_unique_path  TEXT HIDDEN COLLATE naturalnocase, -- T
2024-10-22T09:17:55.297 D t0 log_vtab_impl.cc:360 creating log format table: candlepin_log = 0x0
2024-10-22T09:17:55.297 T t0 log_vtab_impl.cc:166 log_vtab_impl.get_table_statement() -> CREATE TABLE choose_repo_log  (
  log_line        INTEGER,                         -- The line number for the log message
  log_time        DATETIME,                        -- The adjusted timestamp for the log message
  log_level       TEXT     COLLATE loglevel,       -- The log message level
  -- BEGIN Format-specific fields:

  -- END Format-specific fields
  log_part         TEXT     COLLATE naturalnocase,    -- The partition the message is in
  log_actual_time  DATETIME HIDDEN,                   -- The timestamp from the original log file for this message
  log_idle_msecs   INTEGER,                           -- The difference in time between this messages and the previous
  log_mark         BOOLEAN,                           -- True if the log message was marked
  log_comment      TEXT,                              -- The comment for this message
  log_tags         TEXT,                              -- A JSON list of tags for this message
  log_annotations  TEXT,                              -- A JSON object of annotations for this messages
  log_filters      TEXT,                              -- A JSON list of filter IDs that matched this message
  log_opid         TEXT HIDDEN,                       -- The message's OPID
  log_format       TEXT HIDDEN,                       -- The name of the log file format
  log_format_regex TEXT HIDDEN,                       -- The name of the regex used to parse this log message
  log_time_msecs   INTEGER HIDDEN,                    -- The adjusted timestamp for the log message as the number of milliseconds from the epoch
  log_path         TEXT HIDDEN COLLATE naturalnocase, -- The path to the log file this message is from
  log_unique_path  TEXT HIDDEN COLLATE naturalnocase, -- The unique portion of the path this message is from
  log_text         TEXT HIDDEN,                       -- The full text of the log message
  log_body         TEXT HIDDEN,                       -- The body
2024-10-22T09:17:55.297 D t0 log_vtab_impl.cc:360 creating log format table: choose_repo_log = 0x0
2024-10-22T09:17:55.297 T t0 log_vtab_impl.cc:166 log_vtab_impl.get_table_statement() -> CREATE TABLE cloudflare_json_log  (
  log_line        INTEGER,                         -- The line number for the log message
  log_time        DATETIME,                        -- The adjusted timestamp for the log message
  log_level       TEXT     COLLATE loglevel,       -- The log message level
  -- BEGIN Format-specific fields:
  ClientIP                              TEXT     COLLATE 'BINARY'       ,
  ClientRequestMethod                   TEXT     COLLATE 'BINARY'       ,
  ClientRequestURI                      TEXT     COLLATE 'BINARY'       ,
  EdgeEndTimestamp                      TEXT     COLLATE 'BINARY'       ,
  EdgeResponseBytes                     INTEGER  COLLATE 'BINARY'       ,
  EdgeResponseStatus                    INTEGER  COLLATE 'BINARY'       ,
  RayID                                 TEXT     COLLATE 'BINARY'       ,
  CacheCacheStatus                      TEXT     COLLATE 'BINARY'       ,
  CacheTieredFill                       TEXT     COLLATE 'BINARY'       ,
  CacheResponseBytes                    INTEGER  COLLATE 'BINARY'       ,
  CacheResponseStatus                   INTEGER  COLLATE 'BINARY'       ,
  FirewallMatchesActions                TEXT     COLLATE 'BINARY'       ,
  FirewallMatchesRuleIDs                TEXT     COLLATE 'BINARY'       ,
  FirewallMatchesSources                TEXT     COLLATE 'BINARY'       ,
  OriginResponseBytes                   INTEGER  COLLATE 'BINARY'       ,
  OriginResponseDurationMs              INTEGER  COLLATE 'BINARY'       ,
  OriginResponseHTTPExpires             TEXT     COLLATE 'BINARY'       ,
  OriginResponseHTTPLastModified        TEXT     COLLATE 'BINARY'       ,
  OriginResponseHeaderReceiveDurationMs INTEGER  COLLATE 'BINARY'       ,
  OriginResponseStatus                  INTEGER  COLLATE 'BINARY'       ,
  OriginResponseTime                    INTEGER  COLLATE 'BINARY'       ,
  OriginDNSResponseTimeMs               INTEGER  COLLATE 'BINARY'     
2024-10-22T09:17:55.297 D t0 log_vtab_impl.cc:360 creating log format table: cloudflare_json_log = 0x0
2024-10-22T09:17:55.297 T t0 log_vtab_impl.cc:166 log_vtab_impl.get_table_statement() -> CREATE TABLE cloudvm_ram_log  (
  log_line        INTEGER,                         -- The line number for the log message
  log_time        DATETIME,                        -- The adjusted timestamp for the log message
  log_level       TEXT     COLLATE loglevel,       -- The log message level
  -- BEGIN Format-specific fields:

  -- END Format-specific fields
  log_part         TEXT     COLLATE naturalnocase,    -- The partition the message is in
  log_actual_time  DATETIME HIDDEN,                   -- The timestamp from the original log file for this message
  log_idle_msecs   INTEGER,                           -- The difference in time between this messages and the previous
  log_mark         BOOLEAN,                           -- True if the log message was marked
  log_comment      TEXT,                              -- The comment for this message
  log_tags         TEXT,                              -- A JSON list of tags for this message
  log_annotations  TEXT,                              -- A JSON object of annotations for this messages
  log_filters      TEXT,                              -- A JSON list of filter IDs that matched this message
  log_opid         TEXT HIDDEN,                       -- The message's OPID
  log_format       TEXT HIDDEN,                       -- The name of the log file format
  log_format_regex TEXT HIDDEN,                       -- The name of the regex used to parse this log message
  log_time_msecs   INTEGER HIDDEN,                    -- The adjusted timestamp for the log message as the number of milliseconds from the epoch
  log_path         TEXT HIDDEN COLLATE naturalnocase, -- The path to the log file this message is from
  log_unique_path  TEXT HIDDEN COLLATE naturalnocase, -- The unique portion of the path this message is from
  log_text         TEXT HIDDEN,                       -- The full text of the log message
  log_body         TEXT HIDDEN,                       -- The body
2024-10-22T09:17:55.297 D t0 log_vtab_impl.cc:360 creating log format table: cloudvm_ram_log = 0x0
2024-10-22T09:17:55.297 T t0 log_vtab_impl.cc:166 log_vtab_impl.get_table_statement() -> CREATE TABLE dpkg_log  (
  log_line        INTEGER,                         -- The line number for the log message
  log_time        DATETIME,                        -- The adjusted timestamp for the log message
  log_level       TEXT     COLLATE loglevel,       -- The log message level
  -- BEGIN Format-specific fields:
  action            TEXT     COLLATE 'BINARY'       ,
  available_version TEXT     COLLATE 'BINARY'       ,
  installed_version TEXT     COLLATE 'BINARY'       ,
  package           TEXT     COLLATE 'BINARY'       ,
  status            TEXT     COLLATE 'BINARY'       ,

  -- END Format-specific fields
  log_part         TEXT     COLLATE naturalnocase,    -- The partition the message is in
  log_actual_time  DATETIME HIDDEN,                   -- The timestamp from the original log file for this message
  log_idle_msecs   INTEGER,                           -- The difference in time between this messages and the previous
  log_mark         BOOLEAN,                           -- True if the log message was marked
  log_comment      TEXT,                              -- The comment for this message
  log_tags         TEXT,                              -- A JSON list of tags for this message
  log_annotations  TEXT,                              -- A JSON object of annotations for this messages
  log_filters      TEXT,                              -- A JSON list of filter IDs that matched this message
  log_opid         TEXT HIDDEN,                       -- The message's OPID
  log_format       TEXT HIDDEN,                       -- The name of the log file format
  log_format_regex TEXT HIDDEN,                       -- The name of the regex used to parse this log message
  log_time_msecs   INTEGER HIDDEN,                    -- The adjusted timestamp for the log message as the number of milliseconds from the epoch
  log_path         TEXT HIDDEN COLLATE naturalnocase, -- The path to the log file this message is from
 
2024-10-22T09:17:55.297 D t0 log_vtab_impl.cc:360 creating log format table: dpkg_log = 0x0
2024-10-22T09:17:55.297 T t0 log_vtab_impl.cc:166 log_vtab_impl.get_table_statement() -> CREATE TABLE elb_log  (
  log_line        INTEGER,                         -- The line number for the log message
  log_time        DATETIME,                        -- The adjusted timestamp for the log message
  log_level       TEXT     COLLATE loglevel,       -- The log message level
  -- BEGIN Format-specific fields:
  backend_ip               TEXT     COLLATE 'ipaddress'    ,
  backend_port             INTEGER  COLLATE 'BINARY'       ,
  backend_processing_time  FLOAT    COLLATE 'BINARY'       ,
  backend_status_code      INTEGER  COLLATE 'BINARY'       ,
  client_ip                TEXT     COLLATE 'ipaddress'    ,
  client_port              INTEGER  COLLATE 'BINARY'       ,
  cs_method                TEXT     COLLATE 'BINARY'       ,
  cs_uri_query             TEXT     COLLATE 'BINARY'       ,
  cs_uri_stem              TEXT     COLLATE 'BINARY'       ,
  cs_version               TEXT     COLLATE 'BINARY'       ,
  elb                      TEXT     COLLATE 'BINARY'       ,
  elb_status_code          INTEGER  COLLATE 'BINARY'       ,
  received_bytes           INTEGER  COLLATE 'BINARY'       ,
  request_processing_time  FLOAT    COLLATE 'BINARY'       ,
  response_processing_time FLOAT    COLLATE 'BINARY'       ,
  sent_bytes               INTEGER  COLLATE 'BINARY'       ,
  ssl_cipher               TEXT     COLLATE 'BINARY'       ,
  ssl_protocol             TEXT     COLLATE 'BINARY'       ,
  user_agent               TEXT     COLLATE 'BINARY'       ,

  -- END Format-specific fields
  log_part         TEXT     COLLATE naturalnocase,    -- The partition the message is in
  log_actual_time  DATETIME HIDDEN,                   -- The timestamp from the original log file for this message
  log_idle_msecs   INTEGER,                           -- The difference in time between this messages and the previous
  log_mark         BOOLEAN,                           -- True if the log message was marked
  log_comment      TEXT,     
2024-10-22T09:17:55.297 D t0 log_vtab_impl.cc:360 creating log format table: elb_log = 0x0
2024-10-22T09:17:55.297 T t0 log_vtab_impl.cc:166 log_vtab_impl.get_table_statement() -> CREATE TABLE engine_log  (
  log_line        INTEGER,                         -- The line number for the log message
  log_time        DATETIME,                        -- The adjusted timestamp for the log message
  log_level       TEXT     COLLATE loglevel,       -- The log message level
  -- BEGIN Format-specific fields:
  logger          TEXT     COLLATE 'BINARY'       ,
  tid             TEXT     COLLATE 'BINARY'       ,

  -- END Format-specific fields
  log_part         TEXT     COLLATE naturalnocase,    -- The partition the message is in
  log_actual_time  DATETIME HIDDEN,                   -- The timestamp from the original log file for this message
  log_idle_msecs   INTEGER,                           -- The difference in time between this messages and the previous
  log_mark         BOOLEAN,                           -- True if the log message was marked
  log_comment      TEXT,                              -- The comment for this message
  log_tags         TEXT,                              -- A JSON list of tags for this message
  log_annotations  TEXT,                              -- A JSON object of annotations for this messages
  log_filters      TEXT,                              -- A JSON list of filter IDs that matched this message
  log_opid         TEXT HIDDEN,                       -- The message's OPID
  log_format       TEXT HIDDEN,                       -- The name of the log file format
  log_format_regex TEXT HIDDEN,                       -- The name of the regex used to parse this log message
  log_time_msecs   INTEGER HIDDEN,                    -- The adjusted timestamp for the log message as the number of milliseconds from the epoch
  log_path         TEXT HIDDEN COLLATE naturalnocase, -- The path to the log file this message is from
  log_unique_path  TEXT HIDDEN COLLATE naturalnocase, -- The unique portion of the path this message is from
  log_text         TEXT HIDDEN,                       --
2024-10-22T09:17:55.297 D t0 log_vtab_impl.cc:360 creating log format table: engine_log = 0x0
2024-10-22T09:17:55.297 T t0 log_vtab_impl.cc:166 log_vtab_impl.get_table_statement() -> CREATE TABLE fsck_hfs_log  (
  log_line        INTEGER,                         -- The line number for the log message
  log_time        DATETIME,                        -- The adjusted timestamp for the log message
  log_level       TEXT     COLLATE loglevel,       -- The log message level
  -- BEGIN Format-specific fields:
  device          TEXT     COLLATE 'BINARY'       ,

  -- END Format-specific fields
  log_part         TEXT     COLLATE naturalnocase,    -- The partition the message is in
  log_actual_time  DATETIME HIDDEN,                   -- The timestamp from the original log file for this message
  log_idle_msecs   INTEGER,                           -- The difference in time between this messages and the previous
  log_mark         BOOLEAN,                           -- True if the log message was marked
  log_comment      TEXT,                              -- The comment for this message
  log_tags         TEXT,                              -- A JSON list of tags for this message
  log_annotations  TEXT,                              -- A JSON object of annotations for this messages
  log_filters      TEXT,                              -- A JSON list of filter IDs that matched this message
  log_opid         TEXT HIDDEN,                       -- The message's OPID
  log_format       TEXT HIDDEN,                       -- The name of the log file format
  log_format_regex TEXT HIDDEN,                       -- The name of the regex used to parse this log message
  log_time_msecs   INTEGER HIDDEN,                    -- The adjusted timestamp for the log message as the number of milliseconds from the epoch
  log_path         TEXT HIDDEN COLLATE naturalnocase, -- The path to the log file this message is from
  log_unique_path  TEXT HIDDEN COLLATE naturalnocase, -- The unique portion of the path this message is from
  log_text         TEXT HIDDEN,                       -- The full text of the log message
  log_body      
2024-10-22T09:17:55.297 D t0 log_vtab_impl.cc:360 creating log format table: fsck_hfs_log = 0x0
2024-10-22T09:17:55.298 T t0 log_vtab_impl.cc:166 log_vtab_impl.get_table_statement() -> CREATE TABLE github_events_log  (
  log_line        INTEGER,                         -- The line number for the log message
  log_time        DATETIME,                        -- The adjusted timestamp for the log message
  log_level       TEXT     COLLATE loglevel,       -- The log message level
  -- BEGIN Format-specific fields:
  id                          TEXT     COLLATE 'BINARY'       ,
  type                        TEXT     COLLATE 'BINARY'       ,
  actor                       TEXT     COLLATE 'BINARY'       ,
  "actor/display_login"       TEXT     COLLATE 'BINARY'       ,
  org                         TEXT     COLLATE 'BINARY'       ,
  payload                     TEXT     COLLATE 'BINARY'       ,
  "payload/action"            TEXT     COLLATE 'BINARY'       ,
  "payload/commits#/message"  TEXT     COLLATE 'BINARY'       ,
  "payload/forkee/full_name"  TEXT     COLLATE 'BINARY'       ,
  "payload/master_branch"     TEXT     COLLATE 'BINARY'       ,
  "payload/member/login"      TEXT     COLLATE 'BINARY'       ,
  "payload/pull_request/number" INTEGER  COLLATE 'BINARY'       ,
  "payload/pull_request/title" TEXT     COLLATE 'BINARY'       ,
  "payload/issue/number"      INTEGER  COLLATE 'BINARY'       ,
  "payload/issue/title"       TEXT     COLLATE 'BINARY'       ,
  "payload/pages#/action"     TEXT     COLLATE 'BINARY'       ,
  "payload/pages#/title"      TEXT     COLLATE 'BINARY'       ,
  "payload/ref_type"          TEXT     COLLATE 'BINARY'       ,
  "payload/release/name"      TEXT     COLLATE 'BINARY'       ,
  "payload/review/id"         INTEGER  COLLATE 'BINARY'       ,
  public                      INTEGER  COLLATE 'BINARY'       ,
  repo                        TEXT     COLLATE 'BINARY'       ,
  "repo/name"                 TEXT     COLLATE 'BINARY'       ,

  -- END Format-specific fields
  log_part         TEXT     COLLATE naturalnocase,    -- The partition the message is in
  log_actual_time  DATETIME H
2024-10-22T09:17:55.298 D t0 log_vtab_impl.cc:360 creating log format table: github_events_log = 0x0
2024-10-22T09:17:55.298 T t0 log_vtab_impl.cc:166 log_vtab_impl.get_table_statement() -> CREATE TABLE glog_log  (
  log_line        INTEGER,                         -- The line number for the log message
  log_time        DATETIME,                        -- The adjusted timestamp for the log message
  log_level       TEXT     COLLATE loglevel,       -- The log message level
  -- BEGIN Format-specific fields:
  src_file        TEXT     COLLATE 'BINARY'       ,
  src_line        INTEGER  COLLATE 'BINARY'       ,
  thread          INTEGER  COLLATE 'BINARY'       ,

  -- END Format-specific fields
  log_part         TEXT     COLLATE naturalnocase,    -- The partition the message is in
  log_actual_time  DATETIME HIDDEN,                   -- The timestamp from the original log file for this message
  log_idle_msecs   INTEGER,                           -- The difference in time between this messages and the previous
  log_mark         BOOLEAN,                           -- True if the log message was marked
  log_comment      TEXT,                              -- The comment for this message
  log_tags         TEXT,                              -- A JSON list of tags for this message
  log_annotations  TEXT,                              -- A JSON object of annotations for this messages
  log_filters      TEXT,                              -- A JSON list of filter IDs that matched this message
  log_opid         TEXT HIDDEN,                       -- The message's OPID
  log_format       TEXT HIDDEN,                       -- The name of the log file format
  log_format_regex TEXT HIDDEN,                       -- The name of the regex used to parse this log message
  log_time_msecs   INTEGER HIDDEN,                    -- The adjusted timestamp for the log message as the number of milliseconds from the epoch
  log_path         TEXT HIDDEN COLLATE naturalnocase, -- The path to the log file this message is from
  log_unique_path  TEXT HIDDEN COLLATE naturalnocase, -- The unique portion of the path this message is from
  log_
2024-10-22T09:17:55.298 D t0 log_vtab_impl.cc:360 creating log format table: glog_log = 0x0
2024-10-22T09:17:55.298 T t0 log_vtab_impl.cc:166 log_vtab_impl.get_table_statement() -> CREATE TABLE haproxy_log  (
  log_line        INTEGER,                         -- The line number for the log message
  log_time        DATETIME,                        -- The adjusted timestamp for the log message
  log_level       TEXT     COLLATE loglevel,       -- The log message level
  -- BEGIN Format-specific fields:
  frontend_name             TEXT     COLLATE 'BINARY'       ,
  logging_host              TEXT     COLLATE 'BINARY'       ,
  pid                       INTEGER  COLLATE 'BINARY'       ,
  process_name              TEXT     COLLATE 'BINARY'       ,
  backend_connections       INTEGER  COLLATE 'BINARY'       ,
  frontend_connections      INTEGER  COLLATE 'BINARY'       ,
  stopping_timeout          INTEGER  COLLATE 'BINARY'       ,
  accept_date               TEXT     COLLATE 'BINARY'       ,
  actconn                   INTEGER  COLLATE 'BINARY'       ,
  backend_name              TEXT     COLLATE 'BINARY'       ,
  backend_queue             INTEGER  COLLATE 'BINARY'       ,
  beconn                    INTEGER  COLLATE 'BINARY'       ,
  bytes_read                INTEGER  COLLATE 'BINARY'       ,
  captured_request_cookie   TEXT     COLLATE 'BINARY'       ,
  captured_request_headers  TEXT     COLLATE 'BINARY'       ,
  captured_response_cookie  TEXT     COLLATE 'BINARY'       ,
  captured_response_headers TEXT     COLLATE 'BINARY'       ,
  client_ip                 TEXT     COLLATE 'ipaddress'    ,
  client_port               INTEGER  COLLATE 'BINARY'       ,
  feconn                    INTEGER  COLLATE 'BINARY'       ,
  http_method               TEXT     COLLATE 'BINARY'       ,
  http_url                  TEXT     COLLATE 'BINARY'       ,
  http_version              TEXT     COLLATE 'BINARY'       ,
  retries                   INTEGER  COLLATE 'BINARY'       ,
  server_name               TEXT     COLLATE 'BINARY'       ,
  srv_conn                  INTEGER  COLLATE 'BINARY'       ,
  srv_queue         
2024-10-22T09:17:55.298 D t0 log_vtab_impl.cc:360 creating log format table: haproxy_log = 0x0
2024-10-22T09:17:55.298 T t0 log_vtab_impl.cc:166 log_vtab_impl.get_table_statement() -> CREATE TABLE journald_json_log  (
  log_line        INTEGER,                         -- The line number for the log message
  log_time        DATETIME,                        -- The adjusted timestamp for the log message
  log_level       TEXT     COLLATE loglevel,       -- The log message level
  -- BEGIN Format-specific fields:
  __MONOTONIC_TIMESTAMP INTEGER  COLLATE 'BINARY'       ,
  _SYSTEMD_UNIT         TEXT     COLLATE 'BINARY'       ,
  SYSLOG_IDENTIFIER     TEXT     COLLATE 'BINARY'       ,
  _PID                  INTEGER  COLLATE 'BINARY'       ,
  PRIORITY              TEXT     COLLATE 'BINARY'       ,

  -- END Format-specific fields
  log_part         TEXT     COLLATE naturalnocase,    -- The partition the message is in
  log_actual_time  DATETIME HIDDEN,                   -- The timestamp from the original log file for this message
  log_idle_msecs   INTEGER,                           -- The difference in time between this messages and the previous
  log_mark         BOOLEAN,                           -- True if the log message was marked
  log_comment      TEXT,                              -- The comment for this message
  log_tags         TEXT,                              -- A JSON list of tags for this message
  log_annotations  TEXT,                              -- A JSON object of annotations for this messages
  log_filters      TEXT,                              -- A JSON list of filter IDs that matched this message
  log_opid         TEXT HIDDEN,                       -- The message's OPID
  log_format       TEXT HIDDEN,                       -- The name of the log file format
  log_format_regex TEXT HIDDEN,                       -- The name of the regex used to parse this log message
  log_time_msecs   INTEGER HIDDEN,                    -- The adjusted timestamp for the log message as the number of milliseconds from the epoch
  log_path         TEXT HIDDEN COLLATE naturalnocase, -- The path to the lo
2024-10-22T09:17:55.298 D t0 log_vtab_impl.cc:360 creating log format table: journald_json_log = 0x0
2024-10-22T09:17:55.298 T t0 log_vtab_impl.cc:166 log_vtab_impl.get_table_statement() -> CREATE TABLE katello_log  (
  log_line        INTEGER,                         -- The line number for the log message
  log_time        DATETIME,                        -- The adjusted timestamp for the log message
  log_level       TEXT     COLLATE loglevel,       -- The log message level
  -- BEGIN Format-specific fields:
  alert_level     TEXT     COLLATE 'BINARY'       ,
  message         TEXT     COLLATE 'BINARY'       ,
  module          TEXT     COLLATE 'BINARY'       ,

  -- END Format-specific fields
  log_part         TEXT     COLLATE naturalnocase,    -- The partition the message is in
  log_actual_time  DATETIME HIDDEN,                   -- The timestamp from the original log file for this message
  log_idle_msecs   INTEGER,                           -- The difference in time between this messages and the previous
  log_mark         BOOLEAN,                           -- True if the log message was marked
  log_comment      TEXT,                              -- The comment for this message
  log_tags         TEXT,                              -- A JSON list of tags for this message
  log_annotations  TEXT,                              -- A JSON object of annotations for this messages
  log_filters      TEXT,                              -- A JSON list of filter IDs that matched this message
  log_opid         TEXT HIDDEN,                       -- The message's OPID
  log_format       TEXT HIDDEN,                       -- The name of the log file format
  log_format_regex TEXT HIDDEN,                       -- The name of the regex used to parse this log message
  log_time_msecs   INTEGER HIDDEN,                    -- The adjusted timestamp for the log message as the number of milliseconds from the epoch
  log_path         TEXT HIDDEN COLLATE naturalnocase, -- The path to the log file this message is from
  log_unique_path  TEXT HIDDEN COLLATE naturalnocase, -- The unique portion of the path this message is from
  l
2024-10-22T09:17:55.298 D t0 log_vtab_impl.cc:360 creating log format table: katello_log = 0x0
2024-10-22T09:17:55.298 T t0 log_vtab_impl.cc:166 log_vtab_impl.get_table_statement() -> CREATE TABLE nextcloud  (
  log_line        INTEGER,                         -- The line number for the log message
  log_time        DATETIME,                        -- The adjusted timestamp for the log message
  log_level       TEXT     COLLATE loglevel,       -- The log message level
  -- BEGIN Format-specific fields:
  exception       TEXT     COLLATE 'BINARY'       ,
  app             TEXT     COLLATE 'BINARY'       ,
  reqId           TEXT     COLLATE 'BINARY'       ,
  remoteAddr      TEXT     COLLATE 'BINARY'       ,
  url             TEXT     COLLATE 'BINARY'       ,
  method          TEXT     COLLATE 'BINARY'       ,
  user            TEXT     COLLATE 'BINARY'       ,

  -- END Format-specific fields
  log_part         TEXT     COLLATE naturalnocase,    -- The partition the message is in
  log_actual_time  DATETIME HIDDEN,                   -- The timestamp from the original log file for this message
  log_idle_msecs   INTEGER,                           -- The difference in time between this messages and the previous
  log_mark         BOOLEAN,                           -- True if the log message was marked
  log_comment      TEXT,                              -- The comment for this message
  log_tags         TEXT,                              -- A JSON list of tags for this message
  log_annotations  TEXT,                              -- A JSON object of annotations for this messages
  log_filters      TEXT,                              -- A JSON list of filter IDs that matched this message
  log_opid         TEXT HIDDEN,                       -- The message's OPID
  log_format       TEXT HIDDEN,                       -- The name of the log file format
  log_format_regex TEXT HIDDEN,                       -- The name of the regex used to parse this log message
  log_time_msecs   INTEGER HIDDEN,                    -- The adjusted timestamp for the log message as the number of milliseconds from the epoch
  log_pat
2024-10-22T09:17:55.298 D t0 log_vtab_impl.cc:360 creating log format table: nextcloud = 0x0
2024-10-22T09:17:55.298 T t0 log_vtab_impl.cc:166 log_vtab_impl.get_table_statement() -> CREATE TABLE nextflow_log  (
  log_line        INTEGER,                         -- The line number for the log message
  log_time        DATETIME,                        -- The adjusted timestamp for the log message
  log_level       TEXT     COLLATE loglevel,       -- The log message level
  -- BEGIN Format-specific fields:
  module          TEXT     COLLATE 'BINARY'       ,
  thread          TEXT     COLLATE 'BINARY'       ,

  -- END Format-specific fields
  log_part         TEXT     COLLATE naturalnocase,    -- The partition the message is in
  log_actual_time  DATETIME HIDDEN,                   -- The timestamp from the original log file for this message
  log_idle_msecs   INTEGER,                           -- The difference in time between this messages and the previous
  log_mark         BOOLEAN,                           -- True if the log message was marked
  log_comment      TEXT,                              -- The comment for this message
  log_tags         TEXT,                              -- A JSON list of tags for this message
  log_annotations  TEXT,                              -- A JSON object of annotations for this messages
  log_filters      TEXT,                              -- A JSON list of filter IDs that matched this message
  log_opid         TEXT HIDDEN,                       -- The message's OPID
  log_format       TEXT HIDDEN,                       -- The name of the log file format
  log_format_regex TEXT HIDDEN,                       -- The name of the regex used to parse this log message
  log_time_msecs   INTEGER HIDDEN,                    -- The adjusted timestamp for the log message as the number of milliseconds from the epoch
  log_path         TEXT HIDDEN COLLATE naturalnocase, -- The path to the log file this message is from
  log_unique_path  TEXT HIDDEN COLLATE naturalnocase, -- The unique portion of the path this message is from
  log_text         TEXT HIDDEN,                       
2024-10-22T09:17:55.298 D t0 log_vtab_impl.cc:360 creating log format table: nextflow_log = 0x0
2024-10-22T09:17:55.298 T t0 log_vtab_impl.cc:166 log_vtab_impl.get_table_statement() -> CREATE TABLE openam_log  (
  log_line        INTEGER,                         -- The line number for the log message
  log_time        DATETIME,                        -- The adjusted timestamp for the log message
  log_level       TEXT     COLLATE loglevel,       -- The log message level
  -- BEGIN Format-specific fields:
  contextid       TEXT     COLLATE 'BINARY'       ,
  data            TEXT     COLLATE 'BINARY'       ,
  domain          TEXT     COLLATE 'BINARY'       ,
  hostname        TEXT     COLLATE 'ipaddress'    ,
  ipaddr          TEXT     COLLATE 'ipaddress'    ,
  loggedby        TEXT     COLLATE 'BINARY'       ,
  loginid         TEXT     COLLATE 'BINARY'       ,
  messageid       TEXT     COLLATE 'BINARY'       ,
  modulename      TEXT     COLLATE 'BINARY'       ,
  nameid          TEXT     COLLATE 'BINARY'       ,

  -- END Format-specific fields
  log_part         TEXT     COLLATE naturalnocase,    -- The partition the message is in
  log_actual_time  DATETIME HIDDEN,                   -- The timestamp from the original log file for this message
  log_idle_msecs   INTEGER,                           -- The difference in time between this messages and the previous
  log_mark         BOOLEAN,                           -- True if the log message was marked
  log_comment      TEXT,                              -- The comment for this message
  log_tags         TEXT,                              -- A JSON list of tags for this message
  log_annotations  TEXT,                              -- A JSON object of annotations for this messages
  log_filters      TEXT,                              -- A JSON list of filter IDs that matched this message
  log_opid         TEXT HIDDEN,                       -- The message's OPID
  log_format       TEXT HIDDEN,                       -- The name of the log file format
  log_format_regex TEXT HIDDEN,                       -- The name of the regex used to parse this log messa
2024-10-22T09:17:55.298 D t0 log_vtab_impl.cc:360 creating log format table: openam_log = 0x0
2024-10-22T09:17:55.298 T t0 log_vtab_impl.cc:166 log_vtab_impl.get_table_statement() -> CREATE TABLE openamdb_log  (
  log_line        INTEGER,                         -- The line number for the log message
  log_time        DATETIME,                        -- The adjusted timestamp for the log message
  log_level       TEXT     COLLATE loglevel,       -- The log message level
  -- BEGIN Format-specific fields:

  -- END Format-specific fields
  log_part         TEXT     COLLATE naturalnocase,    -- The partition the message is in
  log_actual_time  DATETIME HIDDEN,                   -- The timestamp from the original log file for this message
  log_idle_msecs   INTEGER,                           -- The difference in time between this messages and the previous
  log_mark         BOOLEAN,                           -- True if the log message was marked
  log_comment      TEXT,                              -- The comment for this message
  log_tags         TEXT,                              -- A JSON list of tags for this message
  log_annotations  TEXT,                              -- A JSON object of annotations for this messages
  log_filters      TEXT,                              -- A JSON list of filter IDs that matched this message
  log_opid         TEXT HIDDEN,                       -- The message's OPID
  log_format       TEXT HIDDEN,                       -- The name of the log file format
  log_format_regex TEXT HIDDEN,                       -- The name of the regex used to parse this log message
  log_time_msecs   INTEGER HIDDEN,                    -- The adjusted timestamp for the log message as the number of milliseconds from the epoch
  log_path         TEXT HIDDEN COLLATE naturalnocase, -- The path to the log file this message is from
  log_unique_path  TEXT HIDDEN COLLATE naturalnocase, -- The unique portion of the path this message is from
  log_text         TEXT HIDDEN,                       -- The full text of the log message
  log_body         TEXT HIDDEN,                       -- The body of
2024-10-22T09:17:55.298 D t0 log_vtab_impl.cc:360 creating log format table: openamdb_log = 0x0
2024-10-22T09:17:55.298 T t0 log_vtab_impl.cc:166 log_vtab_impl.get_table_statement() -> CREATE TABLE page_log  (
  log_line        INTEGER,                         -- The line number for the log message
  log_time        DATETIME,                        -- The adjusted timestamp for the log message
  log_level       TEXT     COLLATE loglevel,       -- The log message level
  -- BEGIN Format-specific fields:
  job_billing              TEXT     COLLATE 'BINARY'       ,
  job_id                   INTEGER  COLLATE 'BINARY'       ,
  job_name                 TEXT     COLLATE 'BINARY'       ,
  job_originating_hostname TEXT     COLLATE 'ipaddress'    ,
  media                    TEXT     COLLATE 'BINARY'       ,
  num_copies               INTEGER  COLLATE 'BINARY'       ,
  page_number              TEXT     COLLATE 'BINARY'       ,
  printer                  TEXT     COLLATE 'BINARY'       ,
  sides                    TEXT     COLLATE 'BINARY'       ,
  username                 TEXT     COLLATE 'BINARY'       ,

  -- END Format-specific fields
  log_part         TEXT     COLLATE naturalnocase,    -- The partition the message is in
  log_actual_time  DATETIME HIDDEN,                   -- The timestamp from the original log file for this message
  log_idle_msecs   INTEGER,                           -- The difference in time between this messages and the previous
  log_mark         BOOLEAN,                           -- True if the log message was marked
  log_comment      TEXT,                              -- The comment for this message
  log_tags         TEXT,                              -- A JSON list of tags for this message
  log_annotations  TEXT,                              -- A JSON object of annotations for this messages
  log_filters      TEXT,                              -- A JSON list of filter IDs that matched this message
  log_opid         TEXT HIDDEN,                       -- The message's OPID
  log_format       TEXT HIDDEN,                       -- The name of the log file format
  log_format_regex 
2024-10-22T09:17:55.298 D t0 log_vtab_impl.cc:360 creating log format table: page_log = 0x0
2024-10-22T09:17:55.299 T t0 log_vtab_impl.cc:166 log_vtab_impl.get_table_statement() -> CREATE TABLE papertrail_log  (
  log_line        INTEGER,                         -- The line number for the log message
  log_time        DATETIME,                        -- The adjusted timestamp for the log message
  log_level       TEXT     COLLATE loglevel,       -- The log message level
  -- BEGIN Format-specific fields:
  display_received_at TEXT     COLLATE 'BINARY'       ,
  program             TEXT     COLLATE 'BINARY'       ,
  hostname            TEXT     COLLATE 'BINARY'       ,

  -- END Format-specific fields
  log_part         TEXT     COLLATE naturalnocase,    -- The partition the message is in
  log_actual_time  DATETIME HIDDEN,                   -- The timestamp from the original log file for this message
  log_idle_msecs   INTEGER,                           -- The difference in time between this messages and the previous
  log_mark         BOOLEAN,                           -- True if the log message was marked
  log_comment      TEXT,                              -- The comment for this message
  log_tags         TEXT,                              -- A JSON list of tags for this message
  log_annotations  TEXT,                              -- A JSON object of annotations for this messages
  log_filters      TEXT,                              -- A JSON list of filter IDs that matched this message
  log_opid         TEXT HIDDEN,                       -- The message's OPID
  log_format       TEXT HIDDEN,                       -- The name of the log file format
  log_format_regex TEXT HIDDEN,                       -- The name of the regex used to parse this log message
  log_time_msecs   INTEGER HIDDEN,                    -- The adjusted timestamp for the log message as the number of milliseconds from the epoch
  log_path         TEXT HIDDEN COLLATE naturalnocase, -- The path to the log file this message is from
  log_unique_path  TEXT HIDDEN COLLATE naturalnocase, -- The unique portion of the path this mess
2024-10-22T09:17:55.299 D t0 log_vtab_impl.cc:360 creating log format table: papertrail_log = 0x0
2024-10-22T09:17:55.299 T t0 log_vtab_impl.cc:166 log_vtab_impl.get_table_statement() -> CREATE TABLE pcap_log  (
  log_line        INTEGER,                         -- The line number for the log message
  log_time        DATETIME,                        -- The adjusted timestamp for the log message
  log_level       TEXT     COLLATE loglevel,       -- The log message level
  -- BEGIN Format-specific fields:
  source          TEXT     COLLATE 'ipaddress'    ,
  destination     TEXT     COLLATE 'ipaddress'    ,
  protocol        TEXT     COLLATE 'BINARY'       ,
  length          INTEGER  COLLATE 'BINARY'       ,
  layers          TEXT     COLLATE 'BINARY'       ,

  -- END Format-specific fields
  log_part         TEXT     COLLATE naturalnocase,    -- The partition the message is in
  log_actual_time  DATETIME HIDDEN,                   -- The timestamp from the original log file for this message
  log_idle_msecs   INTEGER,                           -- The difference in time between this messages and the previous
  log_mark         BOOLEAN,                           -- True if the log message was marked
  log_comment      TEXT,                              -- The comment for this message
  log_tags         TEXT,                              -- A JSON list of tags for this message
  log_annotations  TEXT,                              -- A JSON object of annotations for this messages
  log_filters      TEXT,                              -- A JSON list of filter IDs that matched this message
  log_opid         TEXT HIDDEN,                       -- The message's OPID
  log_format       TEXT HIDDEN,                       -- The name of the log file format
  log_format_regex TEXT HIDDEN,                       -- The name of the regex used to parse this log message
  log_time_msecs   INTEGER HIDDEN,                    -- The adjusted timestamp for the log message as the number of milliseconds from the epoch
  log_path         TEXT HIDDEN COLLATE naturalnocase, -- The path to the log file this message is from
  log_uniqu
2024-10-22T09:17:55.299 D t0 log_vtab_impl.cc:360 creating log format table: pcap_log = 0x0
2024-10-22T09:17:55.299 T t0 log_vtab_impl.cc:166 log_vtab_impl.get_table_statement() -> CREATE TABLE procstate_log  (
  log_line        INTEGER,                         -- The line number for the log message
  log_time        DATETIME,                        -- The adjusted timestamp for the log message
  log_level       TEXT     COLLATE loglevel,       -- The log message level
  -- BEGIN Format-specific fields:

  -- END Format-specific fields
  log_part         TEXT     COLLATE naturalnocase,    -- The partition the message is in
  log_actual_time  DATETIME HIDDEN,                   -- The timestamp from the original log file for this message
  log_idle_msecs   INTEGER,                           -- The difference in time between this messages and the previous
  log_mark         BOOLEAN,                           -- True if the log message was marked
  log_comment      TEXT,                              -- The comment for this message
  log_tags         TEXT,                              -- A JSON list of tags for this message
  log_annotations  TEXT,                              -- A JSON object of annotations for this messages
  log_filters      TEXT,                              -- A JSON list of filter IDs that matched this message
  log_opid         TEXT HIDDEN,                       -- The message's OPID
  log_format       TEXT HIDDEN,                       -- The name of the log file format
  log_format_regex TEXT HIDDEN,                       -- The name of the regex used to parse this log message
  log_time_msecs   INTEGER HIDDEN,                    -- The adjusted timestamp for the log message as the number of milliseconds from the epoch
  log_path         TEXT HIDDEN COLLATE naturalnocase, -- The path to the log file this message is from
  log_unique_path  TEXT HIDDEN COLLATE naturalnocase, -- The unique portion of the path this message is from
  log_text         TEXT HIDDEN,                       -- The full text of the log message
  log_body         TEXT HIDDEN,                       -- The body o
2024-10-22T09:17:55.299 D t0 log_vtab_impl.cc:360 creating log format table: procstate_log = 0x0
2024-10-22T09:17:55.299 T t0 log_vtab_impl.cc:166 log_vtab_impl.get_table_statement() -> CREATE TABLE redis_log  (
  log_line        INTEGER,                         -- The line number for the log message
  log_time        DATETIME,                        -- The adjusted timestamp for the log message
  log_level       TEXT     COLLATE loglevel,       -- The log message level
  -- BEGIN Format-specific fields:
  pid             TEXT     COLLATE 'BINARY'       ,
  role            TEXT     COLLATE 'BINARY'       ,
  level           TEXT     COLLATE 'BINARY'       ,

  -- END Format-specific fields
  log_part         TEXT     COLLATE naturalnocase,    -- The partition the message is in
  log_actual_time  DATETIME HIDDEN,                   -- The timestamp from the original log file for this message
  log_idle_msecs   INTEGER,                           -- The difference in time between this messages and the previous
  log_mark         BOOLEAN,                           -- True if the log message was marked
  log_comment      TEXT,                              -- The comment for this message
  log_tags         TEXT,                              -- A JSON list of tags for this message
  log_annotations  TEXT,                              -- A JSON object of annotations for this messages
  log_filters      TEXT,                              -- A JSON list of filter IDs that matched this message
  log_opid         TEXT HIDDEN,                       -- The message's OPID
  log_format       TEXT HIDDEN,                       -- The name of the log file format
  log_format_regex TEXT HIDDEN,                       -- The name of the regex used to parse this log message
  log_time_msecs   INTEGER HIDDEN,                    -- The adjusted timestamp for the log message as the number of milliseconds from the epoch
  log_path         TEXT HIDDEN COLLATE naturalnocase, -- The path to the log file this message is from
  log_unique_path  TEXT HIDDEN COLLATE naturalnocase, -- The unique portion of the path this message is from
  log
2024-10-22T09:17:55.299 D t0 log_vtab_impl.cc:360 creating log format table: redis_log = 0x0
2024-10-22T09:17:55.299 T t0 log_vtab_impl.cc:166 log_vtab_impl.get_table_statement() -> CREATE TABLE s3_log  (
  log_line        INTEGER,                         -- The line number for the log message
  log_time        DATETIME,                        -- The adjusted timestamp for the log message
  log_level       TEXT     COLLATE loglevel,       -- The log message level
  -- BEGIN Format-specific fields:
  bucket           TEXT     COLLATE 'BINARY'       , -- The bucket
  c_ip             TEXT     COLLATE 'ipaddress'    , -- The client IP address
  cs_key           TEXT     COLLATE 'BINARY'       , -- The key for the bucket
  cs_method        TEXT     COLLATE 'BINARY'       , -- The request method
  cs_referer       TEXT     COLLATE 'BINARY'       , -- The client's referrer
  cs_uri_query     TEXT     COLLATE 'BINARY'       , -- The query parameters in the request URI
  cs_uri_stem      TEXT     COLLATE 'BINARY'       , -- The path part of the request URI
  cs_user_agent    TEXT     COLLATE 'BINARY'       , -- The client's HTTP agent
  cs_userid        TEXT     COLLATE 'BINARY'       , -- The user ID passed from the client to the server
  cs_version       TEXT     COLLATE 'BINARY'       , -- The client's HTTP version
  obj_size         INTEGER  COLLATE 'BINARY'       , -- The size of the object
  op               TEXT     COLLATE 'BINARY'       , -- The operation
  owner            TEXT     COLLATE 'BINARY'       , -- The bucket owner
  req_id           TEXT     COLLATE 'BINARY'       , -- The request ID
  sc_bytes         INTEGER  COLLATE 'BINARY'       , -- The number of bytes returned by the server
  sc_error_code    TEXT     COLLATE 'BINARY'       , -- The Amazon S3 error code
  sc_status        INTEGER  COLLATE 'BINARY'       , -- The status code returned by the server
  total_time       INTEGER  COLLATE 'BINARY'       , -- The total time taken to satisfy the request
  turn_around_time INTEGER  COLLATE 'BINARY'       , -- The turn around time
  auth_type        TEXT     COLLATE 'BINARY'       , -- The typ
2024-10-22T09:17:55.299 D t0 log_vtab_impl.cc:360 creating log format table: s3_log = 0x0
2024-10-22T09:17:55.299 T t0 log_vtab_impl.cc:166 log_vtab_impl.get_table_statement() -> CREATE TABLE snaplogic_log  (
  log_line        INTEGER,                         -- The line number for the log message
  log_time        DATETIME,                        -- The adjusted timestamp for the log message
  log_level       TEXT     COLLATE loglevel,       -- The log message level
  -- BEGIN Format-specific fields:
  comp_rid        TEXT     COLLATE 'BINARY'       ,
  facility        TEXT     COLLATE 'BINARY'       ,
  invoker         TEXT     COLLATE 'BINARY'       ,
  logger          TEXT     COLLATE 'BINARY'       ,
  msgid           TEXT     COLLATE 'BINARY'       ,
  pipe_rid        TEXT     COLLATE 'BINARY'       ,
  resource_name   TEXT     COLLATE 'BINARY'       ,

  -- END Format-specific fields
  log_part         TEXT     COLLATE naturalnocase,    -- The partition the message is in
  log_actual_time  DATETIME HIDDEN,                   -- The timestamp from the original log file for this message
  log_idle_msecs   INTEGER,                           -- The difference in time between this messages and the previous
  log_mark         BOOLEAN,                           -- True if the log message was marked
  log_comment      TEXT,                              -- The comment for this message
  log_tags         TEXT,                              -- A JSON list of tags for this message
  log_annotations  TEXT,                              -- A JSON object of annotations for this messages
  log_filters      TEXT,                              -- A JSON list of filter IDs that matched this message
  log_opid         TEXT HIDDEN,                       -- The message's OPID
  log_format       TEXT HIDDEN,                       -- The name of the log file format
  log_format_regex TEXT HIDDEN,                       -- The name of the regex used to parse this log message
  log_time_msecs   INTEGER HIDDEN,                    -- The adjusted timestamp for the log message as the number of milliseconds from the epoch
  log
2024-10-22T09:17:55.299 D t0 log_vtab_impl.cc:360 creating log format table: snaplogic_log = 0x0
2024-10-22T09:17:55.299 T t0 log_vtab_impl.cc:166 log_vtab_impl.get_table_statement() -> CREATE TABLE sssd_log  (
  log_line        INTEGER,                         -- The line number for the log message
  log_time        DATETIME,                        -- The adjusted timestamp for the log message
  log_level       TEXT     COLLATE loglevel,       -- The log message level
  -- BEGIN Format-specific fields:
  debug_level     TEXT     COLLATE 'BINARY'       ,
  function        TEXT     COLLATE 'BINARY'       ,
  service         TEXT     COLLATE 'BINARY'       ,
  module          TEXT     COLLATE 'BINARY'       ,

  -- END Format-specific fields
  log_part         TEXT     COLLATE naturalnocase,    -- The partition the message is in
  log_actual_time  DATETIME HIDDEN,                   -- The timestamp from the original log file for this message
  log_idle_msecs   INTEGER,                           -- The difference in time between this messages and the previous
  log_mark         BOOLEAN,                           -- True if the log message was marked
  log_comment      TEXT,                              -- The comment for this message
  log_tags         TEXT,                              -- A JSON list of tags for this message
  log_annotations  TEXT,                              -- A JSON object of annotations for this messages
  log_filters      TEXT,                              -- A JSON list of filter IDs that matched this message
  log_opid         TEXT HIDDEN,                       -- The message's OPID
  log_format       TEXT HIDDEN,                       -- The name of the log file format
  log_format_regex TEXT HIDDEN,                       -- The name of the regex used to parse this log message
  log_time_msecs   INTEGER HIDDEN,                    -- The adjusted timestamp for the log message as the number of milliseconds from the epoch
  log_path         TEXT HIDDEN COLLATE naturalnocase, -- The path to the log file this message is from
  log_unique_path  TEXT HIDDEN COLLATE naturalnocase, -- The un
2024-10-22T09:17:55.299 D t0 log_vtab_impl.cc:360 creating log format table: sssd_log = 0x0
2024-10-22T09:17:55.299 T t0 log_vtab_impl.cc:166 log_vtab_impl.get_table_statement() -> CREATE TABLE strace_log  (
  log_line        INTEGER,                         -- The line number for the log message
  log_time        DATETIME,                        -- The adjusted timestamp for the log message
  log_level       TEXT     COLLATE loglevel,       -- The log message level
  -- BEGIN Format-specific fields:
  duration        FLOAT    COLLATE 'BINARY'       ,
  errno           TEXT     COLLATE 'BINARY'       ,
  rc              INTEGER  COLLATE 'BINARY'       ,
  syscall         TEXT     COLLATE 'BINARY'       ,

  -- END Format-specific fields
  log_part         TEXT     COLLATE naturalnocase,    -- The partition the message is in
  log_actual_time  DATETIME HIDDEN,                   -- The timestamp from the original log file for this message
  log_idle_msecs   INTEGER,                           -- The difference in time between this messages and the previous
  log_mark         BOOLEAN,                           -- True if the log message was marked
  log_comment      TEXT,                              -- The comment for this message
  log_tags         TEXT,                              -- A JSON list of tags for this message
  log_annotations  TEXT,                              -- A JSON object of annotations for this messages
  log_filters      TEXT,                              -- A JSON list of filter IDs that matched this message
  log_opid         TEXT HIDDEN,                       -- The message's OPID
  log_format       TEXT HIDDEN,                       -- The name of the log file format
  log_format_regex TEXT HIDDEN,                       -- The name of the regex used to parse this log message
  log_time_msecs   INTEGER HIDDEN,                    -- The adjusted timestamp for the log message as the number of milliseconds from the epoch
  log_path         TEXT HIDDEN COLLATE naturalnocase, -- The path to the log file this message is from
  log_unique_path  TEXT HIDDEN COLLATE naturalnocase, -- The 
2024-10-22T09:17:55.299 D t0 log_vtab_impl.cc:360 creating log format table: strace_log = 0x0
2024-10-22T09:17:55.299 T t0 log_vtab_impl.cc:166 log_vtab_impl.get_table_statement() -> CREATE TABLE sudo_log  (
  log_line        INTEGER,                         -- The line number for the log message
  log_time        DATETIME,                        -- The adjusted timestamp for the log message
  log_level       TEXT     COLLATE loglevel,       -- The log message level
  -- BEGIN Format-specific fields:
  command         TEXT     COLLATE 'BINARY'       ,
  error_msg       TEXT     COLLATE 'BINARY'       ,
  login           TEXT     COLLATE 'BINARY'       ,
  pwd             TEXT     COLLATE 'BINARY'       ,
  tty             TEXT     COLLATE 'BINARY'       ,
  user            TEXT     COLLATE 'BINARY'       ,

  -- END Format-specific fields
  log_part         TEXT     COLLATE naturalnocase,    -- The partition the message is in
  log_actual_time  DATETIME HIDDEN,                   -- The timestamp from the original log file for this message
  log_idle_msecs   INTEGER,                           -- The difference in time between this messages and the previous
  log_mark         BOOLEAN,                           -- True if the log message was marked
  log_comment      TEXT,                              -- The comment for this message
  log_tags         TEXT,                              -- A JSON list of tags for this message
  log_annotations  TEXT,                              -- A JSON object of annotations for this messages
  log_filters      TEXT,                              -- A JSON list of filter IDs that matched this message
  log_opid         TEXT HIDDEN,                       -- The message's OPID
  log_format       TEXT HIDDEN,                       -- The name of the log file format
  log_format_regex TEXT HIDDEN,                       -- The name of the regex used to parse this log message
  log_time_msecs   INTEGER HIDDEN,                    -- The adjusted timestamp for the log message as the number of milliseconds from the epoch
  log_path         TEXT HIDDEN COLLATE naturalnocase, -- The p
2024-10-22T09:17:55.299 D t0 log_vtab_impl.cc:360 creating log format table: sudo_log = 0x0
2024-10-22T09:17:55.299 T t0 log_vtab_impl.cc:166 log_vtab_impl.get_table_statement() -> CREATE TABLE tcf_log  (
  log_line        INTEGER,                         -- The line number for the log message
  log_time        DATETIME,                        -- The adjusted timestamp for the log message
  log_level       TEXT     COLLATE loglevel,       -- The log message level
  -- BEGIN Format-specific fields:
  dir             TEXT     COLLATE 'BINARY'       ,
  msg             TEXT     COLLATE 'BINARY'       ,
  name            TEXT     COLLATE 'BINARY'       ,
  service         TEXT     COLLATE 'BINARY'       ,
  token           TEXT     COLLATE 'BINARY'       ,
  type            TEXT     COLLATE 'BINARY'       ,

  -- END Format-specific fields
  log_part         TEXT     COLLATE naturalnocase,    -- The partition the message is in
  log_actual_time  DATETIME HIDDEN,                   -- The timestamp from the original log file for this message
  log_idle_msecs   INTEGER,                           -- The difference in time between this messages and the previous
  log_mark         BOOLEAN,                           -- True if the log message was marked
  log_comment      TEXT,                              -- The comment for this message
  log_tags         TEXT,                              -- A JSON list of tags for this message
  log_annotations  TEXT,                              -- A JSON object of annotations for this messages
  log_filters      TEXT,                              -- A JSON list of filter IDs that matched this message
  log_opid         TEXT HIDDEN,                       -- The message's OPID
  log_format       TEXT HIDDEN,                       -- The name of the log file format
  log_format_regex TEXT HIDDEN,                       -- The name of the regex used to parse this log message
  log_time_msecs   INTEGER HIDDEN,                    -- The adjusted timestamp for the log message as the number of milliseconds from the epoch
  log_path         TEXT HIDDEN COLLATE naturalnocase, -- The pa
2024-10-22T09:17:55.299 D t0 log_vtab_impl.cc:360 creating log format table: tcf_log = 0x0
2024-10-22T09:17:55.299 T t0 log_vtab_impl.cc:166 log_vtab_impl.get_table_statement() -> CREATE TABLE tcsh_history  (
  log_line        INTEGER,                         -- The line number for the log message
  log_time        DATETIME,                        -- The adjusted timestamp for the log message
  log_level       TEXT     COLLATE loglevel,       -- The log message level
  -- BEGIN Format-specific fields:

  -- END Format-specific fields
  log_part         TEXT     COLLATE naturalnocase,    -- The partition the message is in
  log_actual_time  DATETIME HIDDEN,                   -- The timestamp from the original log file for this message
  log_idle_msecs   INTEGER,                           -- The difference in time between this messages and the previous
  log_mark         BOOLEAN,                           -- True if the log message was marked
  log_comment      TEXT,                              -- The comment for this message
  log_tags         TEXT,                              -- A JSON list of tags for this message
  log_annotations  TEXT,                              -- A JSON object of annotations for this messages
  log_filters      TEXT,                              -- A JSON list of filter IDs that matched this message
  log_opid         TEXT HIDDEN,                       -- The message's OPID
  log_format       TEXT HIDDEN,                       -- The name of the log file format
  log_format_regex TEXT HIDDEN,                       -- The name of the regex used to parse this log message
  log_time_msecs   INTEGER HIDDEN,                    -- The adjusted timestamp for the log message as the number of milliseconds from the epoch
  log_path         TEXT HIDDEN COLLATE naturalnocase, -- The path to the log file this message is from
  log_unique_path  TEXT HIDDEN COLLATE naturalnocase, -- The unique portion of the path this message is from
  log_text         TEXT HIDDEN,                       -- The full text of the log message
  log_body         TEXT HIDDEN,                       -- The body of
2024-10-22T09:17:55.299 D t0 log_vtab_impl.cc:360 creating log format table: tcsh_history = 0x0
2024-10-22T09:17:55.299 T t0 log_vtab_impl.cc:166 log_vtab_impl.get_table_statement() -> CREATE TABLE unifi_log  (
  log_line        INTEGER,                         -- The line number for the log message
  log_time        DATETIME,                        -- The adjusted timestamp for the log message
  log_level       TEXT     COLLATE loglevel,       -- The log message level
  -- BEGIN Format-specific fields:
  ID              INTEGER  COLLATE 'BINARY'       ,
  dhcp_iface      TEXT     COLLATE 'BINARY'       ,
  dhcp_ip         TEXT     COLLATE 'ipaddress'    ,
  dhcp_mac        TEXT     COLLATE 'BINARY'       ,
  dhcp_op         TEXT     COLLATE 'BINARY'       ,
  facility        TEXT     COLLATE 'BINARY'       ,
  host            TEXT     COLLATE 'BINARY'       ,
  level           TEXT     COLLATE 'BINARY'       ,
  module          TEXT     COLLATE 'BINARY'       ,
  ellapsed        FLOAT    COLLATE 'BINARY'       ,
  DST             TEXT     COLLATE 'ipaddress'    ,
  IP_IN           TEXT     COLLATE 'BINARY'       ,
  IP_OUT          TEXT     COLLATE 'BINARY'       ,
  LEN             INTEGER  COLLATE 'BINARY'       ,
  MAC             TEXT     COLLATE 'BINARY'       ,
  MAC_SRC         TEXT     COLLATE 'BINARY'       ,
  PREC            TEXT     COLLATE 'BINARY'       ,
  PROTO           TEXT     COLLATE 'BINARY'       ,
  SRC             TEXT     COLLATE 'ipaddress'    ,
  TOS             TEXT     COLLATE 'BINARY'       ,
  TTL             INTEGER  COLLATE 'BINARY'       ,
  rule_name       TEXT     COLLATE 'BINARY'       ,
  DPT             INTEGER  COLLATE 'BINARY'       ,
  RES             TEXT     COLLATE 'BINARY'       ,
  SPT             INTEGER  COLLATE 'BINARY'       ,
  SYN             TEXT     COLLATE 'BINARY'       ,
  URGP            INTEGER  COLLATE 'BINARY'       ,
  WINDOW          INTEGER  COLLATE 'BINARY'       ,
  LEN_UDP         INTEGER  COLLATE 'BINARY'       ,

  -- END Format-specific fields
  log_part         TEXT     COLLATE naturalnocase,    -- The partition the message is in
  lo
2024-10-22T09:17:55.300 D t0 log_vtab_impl.cc:360 creating log format table: unifi_log = 0x0
2024-10-22T09:17:55.300 T t0 log_vtab_impl.cc:166 log_vtab_impl.get_table_statement() -> CREATE TABLE uwsgi_log  (
  log_line        INTEGER,                         -- The line number for the log message
  log_time        DATETIME,                        -- The adjusted timestamp for the log message
  log_level       TEXT     COLLATE loglevel,       -- The log message level
  -- BEGIN Format-specific fields:
  c_ip            TEXT     COLLATE 'ipaddress'    ,
  cs_bytes        INTEGER  COLLATE 'BINARY'       ,
  cs_method       TEXT     COLLATE 'BINARY'       ,
  cs_uri_query    TEXT     COLLATE 'BINARY'       ,
  cs_uri_stem     TEXT     COLLATE 'BINARY'       ,
  cs_username     TEXT     COLLATE 'BINARY'       ,
  cs_vars         INTEGER  COLLATE 'BINARY'       ,
  cs_version      TEXT     COLLATE 'BINARY'       ,
  s_app           TEXT     COLLATE 'BINARY'       ,
  s_core          TEXT     COLLATE 'BINARY'       ,
  s_pid           TEXT     COLLATE 'BINARY'       ,
  s_req           INTEGER  COLLATE 'BINARY'       ,
  s_runtime       FLOAT    COLLATE 'BINARY'       , -- hello, world
  s_switches      INTEGER  COLLATE 'BINARY'       ,
  s_worker_reqs   INTEGER  COLLATE 'BINARY'       ,
  sc_bytes        INTEGER  COLLATE 'BINARY'       ,
  sc_header_bytes INTEGER  COLLATE 'BINARY'       ,
  sc_headers      INTEGER  COLLATE 'BINARY'       ,
  sc_status       INTEGER  COLLATE 'BINARY'       ,

  -- END Format-specific fields
  log_part         TEXT     COLLATE naturalnocase,    -- The partition the message is in
  log_actual_time  DATETIME HIDDEN,                   -- The timestamp from the original log file for this message
  log_idle_msecs   INTEGER,                           -- The difference in time between this messages and the previous
  log_mark         BOOLEAN,                           -- True if the log message was marked
  log_comment      TEXT,                              -- The comment for this message
  log_tags         TEXT,                              -- A JSON list of tags for this message
  
2024-10-22T09:17:55.300 D t0 log_vtab_impl.cc:360 creating log format table: uwsgi_log = 0x0
2024-10-22T09:17:55.300 T t0 log_vtab_impl.cc:166 log_vtab_impl.get_table_statement() -> CREATE TABLE vdsm_log  (
  log_line        INTEGER,                         -- The line number for the log message
  log_time        DATETIME,                        -- The adjusted timestamp for the log message
  log_level       TEXT     COLLATE loglevel,       -- The log message level
  -- BEGIN Format-specific fields:
  func            TEXT     COLLATE 'BINARY'       ,
  logger          TEXT     COLLATE 'BINARY'       ,
  module          TEXT     COLLATE 'BINARY'       ,
  src_line        INTEGER  COLLATE 'BINARY'       ,
  tid             TEXT     COLLATE 'BINARY'       ,
  src_file        TEXT     COLLATE 'BINARY'       ,
  thread          TEXT     COLLATE 'BINARY'       ,
  traceback       TEXT     COLLATE 'BINARY'       ,

  -- END Format-specific fields
  log_part         TEXT     COLLATE naturalnocase,    -- The partition the message is in
  log_actual_time  DATETIME HIDDEN,                   -- The timestamp from the original log file for this message
  log_idle_msecs   INTEGER,                           -- The difference in time between this messages and the previous
  log_mark         BOOLEAN,                           -- True if the log message was marked
  log_comment      TEXT,                              -- The comment for this message
  log_tags         TEXT,                              -- A JSON list of tags for this message
  log_annotations  TEXT,                              -- A JSON object of annotations for this messages
  log_filters      TEXT,                              -- A JSON list of filter IDs that matched this message
  log_opid         TEXT HIDDEN,                       -- The message's OPID
  log_format       TEXT HIDDEN,                       -- The name of the log file format
  log_format_regex TEXT HIDDEN,                       -- The name of the regex used to parse this log message
  log_time_msecs   INTEGER HIDDEN,                    -- The adjusted timestamp for the log message as 
2024-10-22T09:17:55.300 D t0 log_vtab_impl.cc:360 creating log format table: vdsm_log = 0x0
2024-10-22T09:17:55.300 T t0 log_vtab_impl.cc:166 log_vtab_impl.get_table_statement() -> CREATE TABLE vmk_log  (
  log_line        INTEGER,                         -- The line number for the log message
  log_time        DATETIME,                        -- The adjusted timestamp for the log message
  log_level       TEXT     COLLATE loglevel,       -- The log message level
  -- BEGIN Format-specific fields:
  cpu             INTEGER  COLLATE 'BINARY'       ,
  opid            TEXT     COLLATE 'BINARY'       ,
  subsystem       TEXT     COLLATE 'BINARY'       ,
  world_id        INTEGER  COLLATE 'BINARY'       ,

  -- END Format-specific fields
  log_part         TEXT     COLLATE naturalnocase,    -- The partition the message is in
  log_actual_time  DATETIME HIDDEN,                   -- The timestamp from the original log file for this message
  log_idle_msecs   INTEGER,                           -- The difference in time between this messages and the previous
  log_mark         BOOLEAN,                           -- True if the log message was marked
  log_comment      TEXT,                              -- The comment for this message
  log_tags         TEXT,                              -- A JSON list of tags for this message
  log_annotations  TEXT,                              -- A JSON object of annotations for this messages
  log_filters      TEXT,                              -- A JSON list of filter IDs that matched this message
  log_opid         TEXT HIDDEN,                       -- The message's OPID
  log_format       TEXT HIDDEN,                       -- The name of the log file format
  log_format_regex TEXT HIDDEN,                       -- The name of the regex used to parse this log message
  log_time_msecs   INTEGER HIDDEN,                    -- The adjusted timestamp for the log message as the number of milliseconds from the epoch
  log_path         TEXT HIDDEN COLLATE naturalnocase, -- The path to the log file this message is from
  log_unique_path  TEXT HIDDEN COLLATE naturalnocase, -- The uni
2024-10-22T09:17:55.300 D t0 log_vtab_impl.cc:360 creating log format table: vmk_log = 0x0
2024-10-22T09:17:55.300 T t0 log_vtab_impl.cc:166 log_vtab_impl.get_table_statement() -> CREATE TABLE vmw_py_log  (
  log_line        INTEGER,                         -- The line number for the log message
  log_time        DATETIME,                        -- The adjusted timestamp for the log message
  log_level       TEXT     COLLATE loglevel,       -- The log message level
  -- BEGIN Format-specific fields:
  module          TEXT     COLLATE 'BINARY'       , -- The name of the module that generated the message
  pid             INTEGER  COLLATE 'BINARY'       , -- The ID of the process that generated the message

  -- END Format-specific fields
  log_part         TEXT     COLLATE naturalnocase,    -- The partition the message is in
  log_actual_time  DATETIME HIDDEN,                   -- The timestamp from the original log file for this message
  log_idle_msecs   INTEGER,                           -- The difference in time between this messages and the previous
  log_mark         BOOLEAN,                           -- True if the log message was marked
  log_comment      TEXT,                              -- The comment for this message
  log_tags         TEXT,                              -- A JSON list of tags for this message
  log_annotations  TEXT,                              -- A JSON object of annotations for this messages
  log_filters      TEXT,                              -- A JSON list of filter IDs that matched this message
  log_opid         TEXT HIDDEN,                       -- The message's OPID
  log_format       TEXT HIDDEN,                       -- The name of the log file format
  log_format_regex TEXT HIDDEN,                       -- The name of the regex used to parse this log message
  log_time_msecs   INTEGER HIDDEN,                    -- The adjusted timestamp for the log message as the number of milliseconds from the epoch
  log_path         TEXT HIDDEN COLLATE naturalnocase, -- The path to the log file this message is from
  log_unique_path  TEXT HIDDEN COLLATE naturalnocase, -- The
2024-10-22T09:17:55.300 D t0 log_vtab_impl.cc:360 creating log format table: vmw_py_log = 0x0
2024-10-22T09:17:55.300 T t0 log_vtab_impl.cc:166 log_vtab_impl.get_table_statement() -> CREATE TABLE vmw_vc_svc_log  (
  log_line        INTEGER,                         -- The line number for the log message
  log_time        DATETIME,                        -- The adjusted timestamp for the log message
  log_level       TEXT     COLLATE loglevel,       -- The log message level
  -- BEGIN Format-specific fields:
  module          TEXT     COLLATE 'BINARY'       ,
  opid            TEXT     COLLATE 'BINARY'       ,
  srcfile         TEXT     COLLATE 'BINARY'       ,
  srcline         TEXT     COLLATE 'BINARY'       ,

  -- END Format-specific fields
  log_part         TEXT     COLLATE naturalnocase,    -- The partition the message is in
  log_actual_time  DATETIME HIDDEN,                   -- The timestamp from the original log file for this message
  log_idle_msecs   INTEGER,                           -- The difference in time between this messages and the previous
  log_mark         BOOLEAN,                           -- True if the log message was marked
  log_comment      TEXT,                              -- The comment for this message
  log_tags         TEXT,                              -- A JSON list of tags for this message
  log_annotations  TEXT,                              -- A JSON object of annotations for this messages
  log_filters      TEXT,                              -- A JSON list of filter IDs that matched this message
  log_opid         TEXT HIDDEN,                       -- The message's OPID
  log_format       TEXT HIDDEN,                       -- The name of the log file format
  log_format_regex TEXT HIDDEN,                       -- The name of the regex used to parse this log message
  log_time_msecs   INTEGER HIDDEN,                    -- The adjusted timestamp for the log message as the number of milliseconds from the epoch
  log_path         TEXT HIDDEN COLLATE naturalnocase, -- The path to the log file this message is from
  log_unique_path  TEXT HIDDEN COLLATE naturalnocase, -- 
2024-10-22T09:17:55.300 D t0 log_vtab_impl.cc:360 creating log format table: vmw_vc_svc_log = 0x0
2024-10-22T09:17:55.300 T t0 log_vtab_impl.cc:166 log_vtab_impl.get_table_statement() -> CREATE TABLE vpostgres_log  (
  log_line        INTEGER,                         -- The line number for the log message
  log_time        DATETIME,                        -- The adjusted timestamp for the log message
  log_level       TEXT     COLLATE loglevel,       -- The log message level
  -- BEGIN Format-specific fields:
  db_name         TEXT     COLLATE 'BINARY'       ,
  num_line        INTEGER  COLLATE 'BINARY'       ,
  pid             TEXT     COLLATE 'BINARY'       ,
  remote_pair     TEXT     COLLATE 'BINARY'       ,
  session_id      TEXT     COLLATE 'BINARY'       ,
  transaction_id  TEXT     COLLATE 'BINARY'       ,
  user            TEXT     COLLATE 'BINARY'       ,

  -- END Format-specific fields
  log_part         TEXT     COLLATE naturalnocase,    -- The partition the message is in
  log_actual_time  DATETIME HIDDEN,                   -- The timestamp from the original log file for this message
  log_idle_msecs   INTEGER,                           -- The difference in time between this messages and the previous
  log_mark         BOOLEAN,                           -- True if the log message was marked
  log_comment      TEXT,                              -- The comment for this message
  log_tags         TEXT,                              -- A JSON list of tags for this message
  log_annotations  TEXT,                              -- A JSON object of annotations for this messages
  log_filters      TEXT,                              -- A JSON list of filter IDs that matched this message
  log_opid         TEXT HIDDEN,                       -- The message's OPID
  log_format       TEXT HIDDEN,                       -- The name of the log file format
  log_format_regex TEXT HIDDEN,                       -- The name of the regex used to parse this log message
  log_time_msecs   INTEGER HIDDEN,                    -- The adjusted timestamp for the log message as the number of milliseconds from the epoch
  log
2024-10-22T09:17:55.300 D t0 log_vtab_impl.cc:360 creating log format table: vpostgres_log = 0x0
2024-10-22T09:17:55.300 T t0 log_vtab_impl.cc:166 log_vtab_impl.get_table_statement() -> CREATE TABLE xmlrpc_log  (
  log_line        INTEGER,                         -- The line number for the log message
  log_time        DATETIME,                        -- The adjusted timestamp for the log message
  log_level       TEXT     COLLATE loglevel,       -- The log message level
  -- BEGIN Format-specific fields:
  client_ip       TEXT     COLLATE 'BINARY'       ,
  function        TEXT     COLLATE 'BINARY'       ,
  module          TEXT     COLLATE 'BINARY'       ,
  pid             INTEGER  COLLATE 'BINARY'       ,

  -- END Format-specific fields
  log_part         TEXT     COLLATE naturalnocase,    -- The partition the message is in
  log_actual_time  DATETIME HIDDEN,                   -- The timestamp from the original log file for this message
  log_idle_msecs   INTEGER,                           -- The difference in time between this messages and the previous
  log_mark         BOOLEAN,                           -- True if the log message was marked
  log_comment      TEXT,                              -- The comment for this message
  log_tags         TEXT,                              -- A JSON list of tags for this message
  log_annotations  TEXT,                              -- A JSON object of annotations for this messages
  log_filters      TEXT,                              -- A JSON list of filter IDs that matched this message
  log_opid         TEXT HIDDEN,                       -- The message's OPID
  log_format       TEXT HIDDEN,                       -- The name of the log file format
  log_format_regex TEXT HIDDEN,                       -- The name of the regex used to parse this log message
  log_time_msecs   INTEGER HIDDEN,                    -- The adjusted timestamp for the log message as the number of milliseconds from the epoch
  log_path         TEXT HIDDEN COLLATE naturalnocase, -- The path to the log file this message is from
  log_unique_path  TEXT HIDDEN COLLATE naturalnocase, -- The 
2024-10-22T09:17:55.300 D t0 log_vtab_impl.cc:360 creating log format table: xmlrpc_log = 0x0
2024-10-22T09:17:55.300 T t0 log_vtab_impl.cc:166 log_vtab_impl.get_table_statement() -> CREATE TABLE openstack_log  (
  log_line        INTEGER,                         -- The line number for the log message
  log_time        DATETIME,                        -- The adjusted timestamp for the log message
  log_level       TEXT     COLLATE loglevel,       -- The log message level
  -- BEGIN Format-specific fields:
  logger          TEXT     COLLATE 'BINARY'       ,
  user            TEXT     COLLATE 'BINARY'       ,
  tid             TEXT     COLLATE 'BINARY'       ,
  pid             TEXT     COLLATE 'BINARY'       ,

  -- END Format-specific fields
  log_part         TEXT     COLLATE naturalnocase,    -- The partition the message is in
  log_actual_time  DATETIME HIDDEN,                   -- The timestamp from the original log file for this message
  log_idle_msecs   INTEGER,                           -- The difference in time between this messages and the previous
  log_mark         BOOLEAN,                           -- True if the log message was marked
  log_comment      TEXT,                              -- The comment for this message
  log_tags         TEXT,                              -- A JSON list of tags for this message
  log_annotations  TEXT,                              -- A JSON object of annotations for this messages
  log_filters      TEXT,                              -- A JSON list of filter IDs that matched this message
  log_opid         TEXT HIDDEN,                       -- The message's OPID
  log_format       TEXT HIDDEN,                       -- The name of the log file format
  log_format_regex TEXT HIDDEN,                       -- The name of the regex used to parse this log message
  log_time_msecs   INTEGER HIDDEN,                    -- The adjusted timestamp for the log message as the number of milliseconds from the epoch
  log_path         TEXT HIDDEN COLLATE naturalnocase, -- The path to the log file this message is from
  log_unique_path  TEXT HIDDEN COLLATE naturalnocase, -- T
2024-10-22T09:17:55.300 D t0 log_vtab_impl.cc:360 creating log format table: openstack_log = 0x0
2024-10-22T09:17:55.300 T t0 log_vtab_impl.cc:166 log_vtab_impl.get_table_statement() -> CREATE TABLE cups_log  (
  log_line        INTEGER,                         -- The line number for the log message
  log_time        DATETIME,                        -- The adjusted timestamp for the log message
  log_level       TEXT     COLLATE loglevel,       -- The log message level
  -- BEGIN Format-specific fields:
  level           TEXT     COLLATE 'BINARY'       ,
  section         TEXT     COLLATE 'BINARY'       ,

  -- END Format-specific fields
  log_part         TEXT     COLLATE naturalnocase,    -- The partition the message is in
  log_actual_time  DATETIME HIDDEN,                   -- The timestamp from the original log file for this message
  log_idle_msecs   INTEGER,                           -- The difference in time between this messages and the previous
  log_mark         BOOLEAN,                           -- True if the log message was marked
  log_comment      TEXT,                              -- The comment for this message
  log_tags         TEXT,                              -- A JSON list of tags for this message
  log_annotations  TEXT,                              -- A JSON object of annotations for this messages
  log_filters      TEXT,                              -- A JSON list of filter IDs that matched this message
  log_opid         TEXT HIDDEN,                       -- The message's OPID
  log_format       TEXT HIDDEN,                       -- The name of the log file format
  log_format_regex TEXT HIDDEN,                       -- The name of the regex used to parse this log message
  log_time_msecs   INTEGER HIDDEN,                    -- The adjusted timestamp for the log message as the number of milliseconds from the epoch
  log_path         TEXT HIDDEN COLLATE naturalnocase, -- The path to the log file this message is from
  log_unique_path  TEXT HIDDEN COLLATE naturalnocase, -- The unique portion of the path this message is from
  log_text         TEXT HIDDEN,                       -- T
2024-10-22T09:17:55.300 D t0 log_vtab_impl.cc:360 creating log format table: cups_log = 0x0
2024-10-22T09:17:55.300 T t0 log_vtab_impl.cc:166 log_vtab_impl.get_table_statement() -> CREATE TABLE error_log  (
  log_line        INTEGER,                         -- The line number for the log message
  log_time        DATETIME,                        -- The adjusted timestamp for the log message
  log_level       TEXT     COLLATE loglevel,       -- The log message level
  -- BEGIN Format-specific fields:
  c_ip            TEXT     COLLATE 'ipaddress'    , -- The client IP address
  c_port          INTEGER  COLLATE 'BINARY'       ,
  module          TEXT     COLLATE 'BINARY'       ,
  pid             INTEGER  COLLATE 'BINARY'       ,
  tid             INTEGER  COLLATE 'BINARY'       , -- The thread id

  -- END Format-specific fields
  log_part         TEXT     COLLATE naturalnocase,    -- The partition the message is in
  log_actual_time  DATETIME HIDDEN,                   -- The timestamp from the original log file for this message
  log_idle_msecs   INTEGER,                           -- The difference in time between this messages and the previous
  log_mark         BOOLEAN,                           -- True if the log message was marked
  log_comment      TEXT,                              -- The comment for this message
  log_tags         TEXT,                              -- A JSON list of tags for this message
  log_annotations  TEXT,                              -- A JSON object of annotations for this messages
  log_filters      TEXT,                              -- A JSON list of filter IDs that matched this message
  log_opid         TEXT HIDDEN,                       -- The message's OPID
  log_format       TEXT HIDDEN,                       -- The name of the log file format
  log_format_regex TEXT HIDDEN,                       -- The name of the regex used to parse this log message
  log_time_msecs   INTEGER HIDDEN,                    -- The adjusted timestamp for the log message as the number of milliseconds from the epoch
  log_path         TEXT HIDDEN COLLATE naturalnocase, -- The path to th
2024-10-22T09:17:55.300 D t0 log_vtab_impl.cc:360 creating log format table: error_log = 0x0
2024-10-22T09:17:55.300 T t0 log_vtab_impl.cc:166 log_vtab_impl.get_table_statement() -> CREATE TABLE esx_syslog_log  (
  log_line        INTEGER,                         -- The line number for the log message
  log_time        DATETIME,                        -- The adjusted timestamp for the log message
  log_level       TEXT     COLLATE loglevel,       -- The log message level
  -- BEGIN Format-specific fields:
  log_pid         TEXT     COLLATE 'BINARY'       ,
  log_syslog_tag  TEXT     COLLATE 'BINARY'       ,
  syslog_pri      TEXT     COLLATE 'BINARY'       ,
  log_procname    TEXT     COLLATE 'BINARY'       ,
  opid            TEXT     COLLATE 'BINARY'       ,

  -- END Format-specific fields
  log_part         TEXT     COLLATE naturalnocase,    -- The partition the message is in
  log_actual_time  DATETIME HIDDEN,                   -- The timestamp from the original log file for this message
  log_idle_msecs   INTEGER,                           -- The difference in time between this messages and the previous
  log_mark         BOOLEAN,                           -- True if the log message was marked
  log_comment      TEXT,                              -- The comment for this message
  log_tags         TEXT,                              -- A JSON list of tags for this message
  log_annotations  TEXT,                              -- A JSON object of annotations for this messages
  log_filters      TEXT,                              -- A JSON list of filter IDs that matched this message
  log_opid         TEXT HIDDEN,                       -- The message's OPID
  log_format       TEXT HIDDEN,                       -- The name of the log file format
  log_format_regex TEXT HIDDEN,                       -- The name of the regex used to parse this log message
  log_time_msecs   INTEGER HIDDEN,                    -- The adjusted timestamp for the log message as the number of milliseconds from the epoch
  log_path         TEXT HIDDEN COLLATE naturalnocase, -- The path to the log file this message is from
  log
2024-10-22T09:17:55.301 D t0 log_vtab_impl.cc:360 creating log format table: esx_syslog_log = 0x0
2024-10-22T09:17:55.301 T t0 log_vtab_impl.cc:166 log_vtab_impl.get_table_statement() -> CREATE TABLE vmw_log  (
  log_line        INTEGER,                         -- The line number for the log message
  log_time        DATETIME,                        -- The adjusted timestamp for the log message
  log_level       TEXT     COLLATE loglevel,       -- The log message level
  -- BEGIN Format-specific fields:
  comp            TEXT     COLLATE 'BINARY'       ,
  opid            TEXT     COLLATE 'BINARY'       ,
  tid             TEXT     COLLATE 'BINARY'       ,
  user            TEXT     COLLATE 'BINARY'       ,
  file            TEXT     COLLATE 'BINARY'       ,
  item            TEXT     COLLATE 'BINARY'       ,
  line            INTEGER  COLLATE 'BINARY'       ,
  prc             TEXT     COLLATE 'BINARY'       ,
  reason          TEXT     COLLATE 'BINARY'       ,
  req             TEXT     COLLATE 'BINARY'       ,
  sid             TEXT     COLLATE 'BINARY'       ,
  src             TEXT     COLLATE 'BINARY'       ,
  sub             TEXT     COLLATE 'BINARY'       ,
  vpxa_update     INTEGER  COLLATE 'BINARY'       ,

  -- END Format-specific fields
  log_part         TEXT     COLLATE naturalnocase,    -- The partition the message is in
  log_actual_time  DATETIME HIDDEN,                   -- The timestamp from the original log file for this message
  log_idle_msecs   INTEGER,                           -- The difference in time between this messages and the previous
  log_mark         BOOLEAN,                           -- True if the log message was marked
  log_comment      TEXT,                              -- The comment for this message
  log_tags         TEXT,                              -- A JSON list of tags for this message
  log_annotations  TEXT,                              -- A JSON object of annotations for this messages
  log_filters      TEXT,                              -- A JSON list of filter IDs that matched this message
  log_opid         TEXT HIDDEN,                       -- The messag
2024-10-22T09:17:55.301 D t0 log_vtab_impl.cc:360 creating log format table: vmw_log = 0x0
2024-10-22T09:17:55.301 T t0 log_vtab_impl.cc:166 log_vtab_impl.get_table_statement() -> CREATE TABLE java_log  (
  log_line        INTEGER,                         -- The line number for the log message
  log_time        DATETIME,                        -- The adjusted timestamp for the log message
  log_level       TEXT     COLLATE loglevel,       -- The log message level
  -- BEGIN Format-specific fields:
  jvm_no          INTEGER  COLLATE 'BINARY'       ,
  level           TEXT     COLLATE 'BINARY'       ,
  class           TEXT     COLLATE 'BINARY'       ,
  opid            TEXT     COLLATE 'BINARY'       ,
  thread          TEXT     COLLATE 'BINARY'       ,
  debug_level     TEXT     COLLATE 'BINARY'       ,
  function        TEXT     COLLATE 'BINARY'       ,
  corid           TEXT     COLLATE 'BINARY'       ,
  srcfile         TEXT     COLLATE 'BINARY'       ,
  srcline         TEXT     COLLATE 'BINARY'       ,
  method          TEXT     COLLATE 'BINARY'       ,

  -- END Format-specific fields
  log_part         TEXT     COLLATE naturalnocase,    -- The partition the message is in
  log_actual_time  DATETIME HIDDEN,                   -- The timestamp from the original log file for this message
  log_idle_msecs   INTEGER,                           -- The difference in time between this messages and the previous
  log_mark         BOOLEAN,                           -- True if the log message was marked
  log_comment      TEXT,                              -- The comment for this message
  log_tags         TEXT,                              -- A JSON list of tags for this message
  log_annotations  TEXT,                              -- A JSON object of annotations for this messages
  log_filters      TEXT,                              -- A JSON list of filter IDs that matched this message
  log_opid         TEXT HIDDEN,                       -- The message's OPID
  log_format       TEXT HIDDEN,                       -- The name of the log file format
  log_format_regex TEXT HIDDEN,                       -- 
2024-10-22T09:17:55.302 D t0 log_vtab_impl.cc:360 creating log format table: java_log = 0x0
2024-10-22T09:17:55.302 T t0 log_vtab_impl.cc:166 log_vtab_impl.get_table_statement() -> CREATE TABLE syslog_log  (
  log_line        INTEGER,                         -- The line number for the log message
  log_time        DATETIME,                        -- The adjusted timestamp for the log message
  log_level       TEXT     COLLATE loglevel,       -- The log message level
  -- BEGIN Format-specific fields:
  log_hostname    TEXT     COLLATE 'ipaddress'    , -- The name of the host that generated the message
  log_msgid       TEXT     COLLATE 'BINARY'       ,
  log_pid         TEXT     COLLATE 'BINARY'       , -- The ID of the process that generated the message
  log_pri         INTEGER  COLLATE 'BINARY'       , -- The priority level of the message
  log_procname    TEXT     COLLATE 'BINARY'       , -- The name of the process that generated the message
  log_struct      TEXT     COLLATE 'BINARY'       ,
  log_syslog_tag  TEXT     COLLATE 'BINARY'       , -- The combination of the procname and pid
  syslog_version  INTEGER  COLLATE 'BINARY'       , -- The version of the syslog format used for this message

  -- END Format-specific fields
  log_part         TEXT     COLLATE naturalnocase,    -- The partition the message is in
  log_actual_time  DATETIME HIDDEN,                   -- The timestamp from the original log file for this message
  log_idle_msecs   INTEGER,                           -- The difference in time between this messages and the previous
  log_mark         BOOLEAN,                           -- True if the log message was marked
  log_comment      TEXT,                              -- The comment for this message
  log_tags         TEXT,                              -- A JSON list of tags for this message
  log_annotations  TEXT,                              -- A JSON object of annotations for this messages
  log_filters      TEXT,                              -- A JSON list of filter IDs that matched this message
  log_opid         TEXT HIDDEN,                       -- The message's OPID
  log
2024-10-22T09:17:55.302 D t0 log_vtab_impl.cc:360 creating log format table: syslog_log = 0x0
2024-10-22T09:17:55.302 I t0 log_format_loader.cc:1488 executing SQL files in path: /etc/lnav/formats/*/*.sql
2024-10-22T09:17:55.302 I t0 log_format_loader.cc:1488 executing SQL files in path: /usr/local/Cellar/lnav/0.12.2/etc/lnav/formats/*/*.sql
2024-10-22T09:17:55.302 I t0 log_format_loader.cc:1488 executing SQL files in path: /Users/brianboy/.config/lnav/formats/*/*.sql
2024-10-22T09:17:55.302 T t0 log_vtab_impl.cc:166 log_vtab_impl.get_table_statement() -> CREATE TABLE cloudvm_ram_sizes  (
  log_line        INTEGER,                         -- The line number for the log message
  log_time        DATETIME,                        -- The adjusted timestamp for the log message
  log_level       TEXT     COLLATE loglevel,       -- The log message level
  -- BEGIN Format-specific fields:
  match_index     INTEGER  COLLATE 'BINARY'       ,
  ServiceName     TEXT     COLLATE 'BINARY'       ,
  AllocatedMB     INTEGER  COLLATE 'BINARY'       ,
  MaxMB           INTEGER  COLLATE 'BINARY'       ,
  CurrentMB       INTEGER  COLLATE 'BINARY'       ,
  CurrRSS         INTEGER  COLLATE 'BINARY'       ,
  Cache           INTEGER  COLLATE 'BINARY'       ,
  MapFiles        INTEGER  COLLATE 'BINARY'       ,
  MemoryLimit     INTEGER  COLLATE 'BINARY'       ,

  -- END Format-specific fields
  log_part         TEXT     COLLATE naturalnocase,    -- The partition the message is in
  log_actual_time  DATETIME HIDDEN,                   -- The timestamp from the original log file for this message
  log_idle_msecs   INTEGER,                           -- The difference in time between this messages and the previous
  log_mark         BOOLEAN,                           -- True if the log message was marked
  log_comment      TEXT,                              -- The comment for this message
  log_tags         TEXT,                              -- A JSON list of tags for this message
  log_annotations  TEXT,                              -- A JSON object of annotations for this messages
  log_filters      TEXT,                              -- A JSON list of filter IDs that matched this message
  log_opid         TEXT HIDDEN,                       -- The message's OPID
  log_format       TEXT HIDDEN,                       -- The name of the log file format
  log_format_regex TEXT HIDDEN,                       -- The name of the regex used to parse this log message
  log_time_msecs   INTEGER HIDDEN,        
2024-10-22T09:17:55.302 D t0 log_vtab_impl.cc:360 creating log format table: cloudvm_ram_sizes = 0x0
2024-10-22T09:17:55.302 T t0 log_vtab_impl.cc:166 log_vtab_impl.get_table_statement() -> CREATE TABLE procstate_procs  (
  log_line        INTEGER,                         -- The line number for the log message
  log_time        DATETIME,                        -- The adjusted timestamp for the log message
  log_level       TEXT     COLLATE loglevel,       -- The log message level
  -- BEGIN Format-specific fields:
  match_index     INTEGER  COLLATE 'BINARY'       ,
  user            TEXT     COLLATE 'BINARY'       ,
  ppid            INTEGER  COLLATE 'BINARY'       ,
  pid             INTEGER  COLLATE 'BINARY'       ,
  cpu_pct         FLOAT    COLLATE 'BINARY'       ,
  mem_pct         FLOAT    COLLATE 'BINARY'       ,
  vsz             INTEGER  COLLATE 'BINARY'       ,
  rss             INTEGER  COLLATE 'BINARY'       ,
  tty             TEXT     COLLATE 'BINARY'       ,
  stat            TEXT     COLLATE 'BINARY'       ,
  start_time      TEXT     COLLATE 'BINARY'       ,
  cpu_time        TEXT     COLLATE 'BINARY'       ,
  maj_flt         INTEGER  COLLATE 'BINARY'       ,
  min_flt         INTEGER  COLLATE 'BINARY'       ,
  cmd             TEXT     COLLATE 'BINARY'       ,
  cmd_name        TEXT     COLLATE 'BINARY'       ,
  cmd_args        TEXT     COLLATE 'BINARY'       ,

  -- END Format-specific fields
  log_part         TEXT     COLLATE naturalnocase,    -- The partition the message is in
  log_actual_time  DATETIME HIDDEN,                   -- The timestamp from the original log file for this message
  log_idle_msecs   INTEGER,                           -- The difference in time between this messages and the previous
  log_mark         BOOLEAN,                           -- True if the log message was marked
  log_comment      TEXT,                              -- The comment for this message
  log_tags         TEXT,                              -- A JSON list of tags for this message
  log_annotations  TEXT,                              -- A JSON object of annotations for this messages
  log_filter
2024-10-22T09:17:55.302 D t0 log_vtab_impl.cc:360 creating log format table: procstate_procs = 0x0
2024-10-22T09:17:55.302 T t0 log_vtab_impl.cc:166 log_vtab_impl.get_table_statement() -> CREATE TABLE vpx_lro_begin  (
  log_line        INTEGER,                         -- The line number for the log message
  log_time        DATETIME,                        -- The adjusted timestamp for the log message
  log_level       TEXT     COLLATE loglevel,       -- The log message level
  -- BEGIN Format-specific fields:
  comp            TEXT     COLLATE 'BINARY'       ,
  opid            TEXT     COLLATE 'BINARY'       ,
  tid             TEXT     COLLATE 'BINARY'       ,
  user            TEXT     COLLATE 'BINARY'       ,
  file            TEXT     COLLATE 'BINARY'       ,
  item            TEXT     COLLATE 'BINARY'       ,
  line            INTEGER  COLLATE 'BINARY'       ,
  prc             TEXT     COLLATE 'BINARY'       ,
  reason          TEXT     COLLATE 'BINARY'       ,
  req             TEXT     COLLATE 'BINARY'       ,
  sid             TEXT     COLLATE 'BINARY'       ,
  src             TEXT     COLLATE 'BINARY'       ,
  sub             TEXT     COLLATE 'BINARY'       ,
  vpxa_update     INTEGER  COLLATE 'BINARY'       ,
  match_index     INTEGER  COLLATE 'BINARY'       ,
  lro_id          TEXT     COLLATE 'BINARY'       ,
  entity          TEXT     COLLATE 'BINARY'       ,
  operation       TEXT     COLLATE 'BINARY'       ,
  SessionId       TEXT     COLLATE 'BINARY'       ,
  SessionSubId    TEXT     COLLATE 'BINARY'       ,

  -- END Format-specific fields
  log_part         TEXT     COLLATE naturalnocase,    -- The partition the message is in
  log_actual_time  DATETIME HIDDEN,                   -- The timestamp from the original log file for this message
  log_idle_msecs   INTEGER,                           -- The difference in time between this messages and the previous
  log_mark         BOOLEAN,                           -- True if the log message was marked
  log_comment      TEXT,                              -- The comment for this message
  log_tags         TEXT,                              --
2024-10-22T09:17:55.303 D t0 log_vtab_impl.cc:360 creating log format table: vpx_lro_begin = 0x0
2024-10-22T09:17:55.303 T t0 log_vtab_impl.cc:166 log_vtab_impl.get_table_statement() -> CREATE TABLE vpx_lro_error  (
  log_line        INTEGER,                         -- The line number for the log message
  log_time        DATETIME,                        -- The adjusted timestamp for the log message
  log_level       TEXT     COLLATE loglevel,       -- The log message level
  -- BEGIN Format-specific fields:
  comp            TEXT     COLLATE 'BINARY'       ,
  opid            TEXT     COLLATE 'BINARY'       ,
  tid             TEXT     COLLATE 'BINARY'       ,
  user            TEXT     COLLATE 'BINARY'       ,
  file            TEXT     COLLATE 'BINARY'       ,
  item            TEXT     COLLATE 'BINARY'       ,
  line            INTEGER  COLLATE 'BINARY'       ,
  prc             TEXT     COLLATE 'BINARY'       ,
  reason          TEXT     COLLATE 'BINARY'       ,
  req             TEXT     COLLATE 'BINARY'       ,
  sid             TEXT     COLLATE 'BINARY'       ,
  src             TEXT     COLLATE 'BINARY'       ,
  sub             TEXT     COLLATE 'BINARY'       ,
  vpxa_update     INTEGER  COLLATE 'BINARY'       ,
  match_index     INTEGER  COLLATE 'BINARY'       ,
  lro_id          TEXT     COLLATE 'BINARY'       ,
  SessionId       TEXT     COLLATE 'BINARY'       ,
  SessionSubId    TEXT     COLLATE 'BINARY'       ,
  entity          TEXT     COLLATE 'BINARY'       ,
  operation       TEXT     COLLATE 'BINARY'       ,
  error           TEXT     COLLATE 'BINARY'       ,

  -- END Format-specific fields
  log_part         TEXT     COLLATE naturalnocase,    -- The partition the message is in
  log_actual_time  DATETIME HIDDEN,                   -- The timestamp from the original log file for this message
  log_idle_msecs   INTEGER,                           -- The difference in time between this messages and the previous
  log_mark         BOOLEAN,                           -- True if the log message was marked
  log_comment      TEXT,                              -- The comment for this message
  lo
2024-10-22T09:17:55.303 D t0 log_vtab_impl.cc:360 creating log format table: vpx_lro_error = 0x0
2024-10-22T09:17:55.303 T t0 log_vtab_impl.cc:166 log_vtab_impl.get_table_statement() -> CREATE TABLE vpx_lro_finish  (
  log_line        INTEGER,                         -- The line number for the log message
  log_time        DATETIME,                        -- The adjusted timestamp for the log message
  log_level       TEXT     COLLATE loglevel,       -- The log message level
  -- BEGIN Format-specific fields:
  comp            TEXT     COLLATE 'BINARY'       ,
  opid            TEXT     COLLATE 'BINARY'       ,
  tid             TEXT     COLLATE 'BINARY'       ,
  user            TEXT     COLLATE 'BINARY'       ,
  file            TEXT     COLLATE 'BINARY'       ,
  item            TEXT     COLLATE 'BINARY'       ,
  line            INTEGER  COLLATE 'BINARY'       ,
  prc             TEXT     COLLATE 'BINARY'       ,
  reason          TEXT     COLLATE 'BINARY'       ,
  req             TEXT     COLLATE 'BINARY'       ,
  sid             TEXT     COLLATE 'BINARY'       ,
  src             TEXT     COLLATE 'BINARY'       ,
  sub             TEXT     COLLATE 'BINARY'       ,
  vpxa_update     INTEGER  COLLATE 'BINARY'       ,
  match_index     INTEGER  COLLATE 'BINARY'       ,
  lro_id          TEXT     COLLATE 'BINARY'       ,

  -- END Format-specific fields
  log_part         TEXT     COLLATE naturalnocase,    -- The partition the message is in
  log_actual_time  DATETIME HIDDEN,                   -- The timestamp from the original log file for this message
  log_idle_msecs   INTEGER,                           -- The difference in time between this messages and the previous
  log_mark         BOOLEAN,                           -- True if the log message was marked
  log_comment      TEXT,                              -- The comment for this message
  log_tags         TEXT,                              -- A JSON list of tags for this message
  log_annotations  TEXT,                              -- A JSON object of annotations for this messages
  log_filters      TEXT,                              -- A JSON l
2024-10-22T09:17:55.303 D t0 log_vtab_impl.cc:360 creating log format table: vpx_lro_finish = 0x0
2024-10-22T09:17:55.303 T t0 log_vtab_impl.cc:166 log_vtab_impl.get_table_statement() -> CREATE TABLE vpxd_session_pool_stats  (
  log_line        INTEGER,                         -- The line number for the log message
  log_time        DATETIME,                        -- The adjusted timestamp for the log message
  log_level       TEXT     COLLATE loglevel,       -- The log message level
  -- BEGIN Format-specific fields:
  comp            TEXT     COLLATE 'BINARY'       ,
  opid            TEXT     COLLATE 'BINARY'       ,
  tid             TEXT     COLLATE 'BINARY'       ,
  user            TEXT     COLLATE 'BINARY'       ,
  file            TEXT     COLLATE 'BINARY'       ,
  item            TEXT     COLLATE 'BINARY'       ,
  line            INTEGER  COLLATE 'BINARY'       ,
  prc             TEXT     COLLATE 'BINARY'       ,
  reason          TEXT     COLLATE 'BINARY'       ,
  req             TEXT     COLLATE 'BINARY'       ,
  sid             TEXT     COLLATE 'BINARY'       ,
  src             TEXT     COLLATE 'BINARY'       ,
  sub             TEXT     COLLATE 'BINARY'       ,
  vpxa_update     INTEGER  COLLATE 'BINARY'       ,
  match_index     INTEGER  COLLATE 'BINARY'       ,
  SessionId       TEXT     COLLATE 'BINARY'       ,
  Username        TEXT     COLLATE 'BINARY'       ,
  ProfileKey      TEXT     COLLATE 'BINARY'       ,
  ProfileValue    TEXT     COLLATE 'BINARY'       ,

  -- END Format-specific fields
  log_part         TEXT     COLLATE naturalnocase,    -- The partition the message is in
  log_actual_time  DATETIME HIDDEN,                   -- The timestamp from the original log file for this message
  log_idle_msecs   INTEGER,                           -- The difference in time between this messages and the previous
  log_mark         BOOLEAN,                           -- True if the log message was marked
  log_comment      TEXT,                              -- The comment for this message
  log_tags         TEXT,                              -- A JSON list of tags for this message
  lo
2024-10-22T09:17:55.303 D t0 log_vtab_impl.cc:360 creating log format table: vpxd_session_pool_stats = 0x0
2024-10-22T09:17:55.303 T t0 log_vtab_impl.cc:166 log_vtab_impl.get_table_statement() -> CREATE TABLE vpxd_session_stats  (
  log_line        INTEGER,                         -- The line number for the log message
  log_time        DATETIME,                        -- The adjusted timestamp for the log message
  log_level       TEXT     COLLATE loglevel,       -- The log message level
  -- BEGIN Format-specific fields:
  comp            TEXT     COLLATE 'BINARY'       ,
  opid            TEXT     COLLATE 'BINARY'       ,
  tid             TEXT     COLLATE 'BINARY'       ,
  user            TEXT     COLLATE 'BINARY'       ,
  file            TEXT     COLLATE 'BINARY'       ,
  item            TEXT     COLLATE 'BINARY'       ,
  line            INTEGER  COLLATE 'BINARY'       ,
  prc             TEXT     COLLATE 'BINARY'       ,
  reason          TEXT     COLLATE 'BINARY'       ,
  req             TEXT     COLLATE 'BINARY'       ,
  sid             TEXT     COLLATE 'BINARY'       ,
  src             TEXT     COLLATE 'BINARY'       ,
  sub             TEXT     COLLATE 'BINARY'       ,
  vpxa_update     INTEGER  COLLATE 'BINARY'       ,
  match_index     INTEGER  COLLATE 'BINARY'       ,
  SessionId       TEXT     COLLATE 'BINARY'       ,
  Username        TEXT     COLLATE 'BINARY'       ,
  ClientIP        TEXT     COLLATE 'BINARY'       ,
  ProfileKey      TEXT     COLLATE 'BINARY'       ,
  ProfileValue    TEXT     COLLATE 'BINARY'       ,

  -- END Format-specific fields
  log_part         TEXT     COLLATE naturalnocase,    -- The partition the message is in
  log_actual_time  DATETIME HIDDEN,                   -- The timestamp from the original log file for this message
  log_idle_msecs   INTEGER,                           -- The difference in time between this messages and the previous
  log_mark         BOOLEAN,                           -- True if the log message was marked
  log_comment      TEXT,                              -- The comment for this message
  log_tags         TEXT,                           
2024-10-22T09:17:55.303 D t0 log_vtab_impl.cc:360 creating log format table: vpxd_session_stats = 0x0
2024-10-22T09:17:55.304 D t0 isc.cc:43 starting service thread for: isc::service<curl_looper>::service(std::string) [T = curl_looper] 
2024-10-22T09:17:55.304 D t0 isc.cc:43 starting service thread for: isc::service<io_looper>::service(std::string) [T = io_looper] 
2024-10-22T09:17:55.304 D t0 isc.cc:43 starting service thread for: isc::service<tailer::looper>::service(std::string) [T = tailer::looper] 
2024-10-22T09:17:55.304 I t0 lnav.cc:3290 startup: lnav 0.12.2
2024-10-22T09:17:55.304 I t0 lnav_log.cc:221 uname:
2024-10-22T09:17:55.304 I t0 lnav_log.cc:222   sysname=Darwin
2024-10-22T09:17:55.304 I t0 lnav_log.cc:223   nodename=Brians-MacBook-Pro.local
2024-10-22T09:17:55.304 I t0 lnav_log.cc:224   machine=x86_64
2024-10-22T09:17:55.304 I t1 isc.cc:51 BEGIN isc thread: isc::service<io_looper>::service(std::string) [T = io_looper] 
2024-10-22T09:17:55.304 I t2 isc.cc:51 BEGIN isc thread: isc::service<curl_looper>::service(std::string) [T = curl_looper] 
2024-10-22T09:17:55.304 I t0 lnav_log.cc:225   release=22.1.0
2024-10-22T09:17:55.304 I t0 lnav_log.cc:226   version=Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64
2024-10-22T09:17:55.304 I t0 lnav_log.cc:227 PCRE:
2024-10-22T09:17:55.304 I t0 lnav_log.cc:228   jit=1
2024-10-22T09:17:55.304 I t0 lnav_log.cc:229   jittarget=x86 64bit (little endian + unaligned)
2024-10-22T09:17:55.304 I t0 lnav_log.cc:230 Environment:
2024-10-22T09:17:55.304 I t0 lnav_log.cc:231   HOME=/Users/brianboy
2024-10-22T09:17:55.304 I t0 lnav_log.cc:232   XDG_CONFIG_HOME=(null)
2024-10-22T09:17:55.304 I t0 lnav_log.cc:233   LANG=en_US.UTF-8
2024-10-22T09:17:55.304 I t0 lnav_log.cc:234   PATH=/usr/local/bin:/usr/local/sbin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:/Library/Apple/usr/bin:/usr/local/sbin:/Users/brianboy/.local/bin:/usr/local/mysql/bin:/Users/brianboy/.local/bin:/usr/local/mysql/bin:/Users/brianboy/.local/bin
2024-10-22T09:17:55.304 I t0 lnav_log.cc:235   TERM=tmux-256color
2024-10-22T09:17:55.304 I t0 lnav_log.cc:236   TZ=(null)
2024-10-22T09:17:55.304 I t0 lnav_log.cc:237 Process:
2024-10-22T09:17:55.304 I t0 lnav_log.cc:238   pid=26547
2024-10-22T09:17:55.304 I t0 lnav_log.cc:239   ppid=25379
2024-10-22T09:17:55.304 I t0 lnav_log.cc:240   pgrp=26547
2024-10-22T09:17:55.305 I t0 lnav_log.cc:241   uid=501
2024-10-22T09:17:55.305 I t0 lnav_log.cc:242   gid=20
2024-10-22T09:17:55.305 I t0 lnav_log.cc:243   euid=501
2024-10-22T09:17:55.305 I t0 lnav_log.cc:244   egid=20
2024-10-22T09:17:55.305 I t3 isc.cc:51 BEGIN isc thread: isc::service<tailer::looper>::service(std::string) [T = tailer::looper] 
2024-10-22T09:17:55.306 I t0 lnav_log.cc:248   cwd=/Users/brianboy/Repositories/02-local/baspo-prototypes/app/public/wp-content
2024-10-22T09:17:55.306 I t0 lnav_log.cc:250 Executable:
2024-10-22T09:17:55.306 I t0 lnav_log.cc:251   version=lnav 0.12.2
2024-10-22T09:17:55.306 I t0 lnav_log.cc:254 rusage:
2024-10-22T09:17:55.306 I t0 lnav_log.cc:254   utime=0.086832
2024-10-22T09:17:55.306 I t0 lnav_log.cc:254   stime=0.034354
2024-10-22T09:17:55.306 I t0 lnav_log.cc:254   maxrss=14114816
2024-10-22T09:17:55.306 I t0 lnav_log.cc:254   ixrss=0
2024-10-22T09:17:55.306 I t0 lnav_log.cc:254   idrss=0
2024-10-22T09:17:55.306 I t0 lnav_log.cc:254   isrss=0
2024-10-22T09:17:55.306 I t0 lnav_log.cc:254   minflt=3817
2024-10-22T09:17:55.306 I t0 lnav_log.cc:254   majflt=15
2024-10-22T09:17:55.306 I t0 lnav_log.cc:254   nswap=0
2024-10-22T09:17:55.306 I t0 lnav_log.cc:254   inblock=0
2024-10-22T09:17:55.306 I t0 lnav_log.cc:254   oublock=0
2024-10-22T09:17:55.306 I t0 lnav_log.cc:254   msgsnd=0
2024-10-22T09:17:55.306 I t0 lnav_log.cc:254   msgrcv=0
2024-10-22T09:17:55.306 I t0 lnav_log.cc:254   nsignals=0
2024-10-22T09:17:55.306 I t0 lnav_log.cc:254   nvcsw=0
2024-10-22T09:17:55.306 I t0 lnav_log.cc:254   nivcsw=172
2024-10-22T09:17:55.306 I t0 lnav.cc:3292 Libraries:
2024-10-22T09:17:55.306 I t0 lnav.cc:3294   bzip=1.0.8, 13-Jul-2019
2024-10-22T09:17:55.306 I t0 lnav.cc:3297   curl=7.87.0 (2022-12-21)
2024-10-22T09:17:55.306 I t0 lnav.cc:3300   libarchive=3007003
2024-10-22T09:17:55.306 I t0 lnav.cc:3301     details=libarchive 3.5.3 zlib/1.2.11 liblzma/5.0.5 bz2lib/1.0.8
2024-10-22T09:17:55.306 I t0 lnav.cc:3303   ncurses=6.4
2024-10-22T09:17:55.306 I t0 lnav.cc:3304   pcre2=10.44 2024-06-07
2024-10-22T09:17:55.306 I t0 lnav.cc:3305   readline=8.2
2024-10-22T09:17:55.306 I t0 lnav.cc:3306   sqlite=3.46.1
2024-10-22T09:17:55.306 I t0 lnav.cc:3307   zlib=1.2.11
2024-10-22T09:17:55.306 I t0 lnav.cc:3308 lnav_data:
2024-10-22T09:17:55.306 I t0 lnav.cc:3309   flags=0
2024-10-22T09:17:55.306 I t0 lnav.cc:3310   commands:
2024-10-22T09:17:55.306 I t0 lnav.cc:3317   files:
2024-10-22T09:17:55.306 I t0 lnav.cc:3323     /private/var/log/system.log
2024-10-22T09:17:55.306 D t0 pollable.cc:41 pollable attach 0x7f791602e5c8 to 0x600000f60558
2024-10-22T09:17:55.309 D t0 view_curses.cc:724 COLOR_PAIRS = 0
2024-10-22T09:17:55.319 I t0 command_executor.cc:312 Executing SQL: SELECT 3 BETWEEN 5 AND 10
2024-10-22T09:17:55.319 I t0 command_executor.cc:406 sqlite3_changes() -> 1
2024-10-22T09:17:55.319 T t0 view_helpers.cc:1012 example: SELECT 3 BETWEEN 5 AND 10
2024-10-22T09:17:55.319 T t0 view_helpers.cc:1013 example result: 0
2024-10-22T09:17:55.319 I t0 command_executor.cc:312 Executing SQL: SELECT 10 BETWEEN 5 AND 10
2024-10-22T09:17:55.319 I t0 command_executor.cc:406 sqlite3_changes() -> 1
2024-10-22T09:17:55.319 T t0 view_helpers.cc:1012 example: SELECT 10 BETWEEN 5 AND 10
2024-10-22T09:17:55.319 T t0 view_helpers.cc:1013 example result: 1
2024-10-22T09:17:55.319 I t0 command_executor.cc:312 Executing SQL: SELECT CAST(1.23 AS INTEGER)
2024-10-22T09:17:55.319 I t0 command_executor.cc:406 sqlite3_changes() -> 1
2024-10-22T09:17:55.319 T t0 view_helpers.cc:1012 example: SELECT CAST(1.23 AS INTEGER)
2024-10-22T09:17:55.319 T t0 view_helpers.cc:1013 example result: 1
2024-10-22T09:17:55.319 I t0 command_executor.cc:312 Executing SQL: SELECT CASE 1 WHEN 0 THEN 'zero' WHEN 1 THEN 'one' END
2024-10-22T09:17:55.319 I t0 command_executor.cc:406 sqlite3_changes() -> 1
2024-10-22T09:17:55.319 T t0 view_helpers.cc:1012 example: SELECT CASE 1 WHEN 0 THEN 'zero' WHEN 1 THEN 'one' END
2024-10-22T09:17:55.319 T t0 view_helpers.cc:1013 example result: one
2024-10-22T09:17:55.319 I t0 command_executor.cc:312 Executing SQL: SELECT ('a2' < 'a10'), ('a2' < 'a10' COLLATE naturalnocase)
2024-10-22T09:17:55.319 I t0 command_executor.cc:406 sqlite3_changes() -> 1
2024-10-22T09:17:55.319 T t0 view_helpers.cc:1012 example: SELECT ('a2' < 'a10'), ('a2' < 'a10' COLLATE naturalnocase)
2024-10-22T09:17:55.319 T t0 view_helpers.cc:1013 example result: ('a2' < 'a10') ('a2' <⋯nocase) 
             0               1 
2024-10-22T09:17:55.319 I t0 command_executor.cc:312 Executing SQL: DETACH DATABASE customers
2024-10-22T09:17:55.320 E t0 sql_util.cc:552 (1) statement aborts at 4: [DETACH DATABASE customers] no such database: customers
2024-10-22T09:17:55.320 E t0 command_executor.cc:443 sqlite3_step error code: 1
2024-10-22T09:17:55.320 T t0 view_helpers.cc:1012 example: DETACH DATABASE customers
2024-10-22T09:17:55.320 T t0 view_helpers.cc:1013 example result: ✘ error: SQL statement failed
 reason: no such database: customers
 --> command:1

2024-10-22T09:17:55.320 I t0 command_executor.cc:312 Executing SQL: SELECT 'foobar.log' GLOB '*.log'
2024-10-22T09:17:55.320 I t0 command_executor.cc:406 sqlite3_changes() -> 1
2024-10-22T09:17:55.320 T t0 view_helpers.cc:1012 example: SELECT 'foobar.log' GLOB '*.log'
2024-10-22T09:17:55.320 T t0 view_helpers.cc:1013 example result: 1
2024-10-22T09:17:55.320 I t0 command_executor.cc:312 Executing SQL: SELECT 'Hello, World!' LIKE 'Hello, %!'
2024-10-22T09:17:55.320 I t0 command_executor.cc:406 sqlite3_changes() -> 1
2024-10-22T09:17:55.320 T t0 view_helpers.cc:1012 example: SELECT 'Hello, World!' LIKE 'Hello, %!'
2024-10-22T09:17:55.320 T t0 view_helpers.cc:1013 example result: 1
2024-10-22T09:17:55.320 I t0 command_executor.cc:312 Executing SQL: SELECT 'file-23' REGEXP 'file-\d+'
2024-10-22T09:17:55.320 I t0 command_executor.cc:406 sqlite3_changes() -> 1
2024-10-22T09:17:55.320 T t0 view_helpers.cc:1012 example: SELECT 'file-23' REGEXP 'file-\d+'
2024-10-22T09:17:55.320 T t0 view_helpers.cc:1013 example result: 1
2024-10-22T09:17:55.320 I t0 command_executor.cc:312 Executing SQL: SELECT * FROM syslog_log
2024-10-22T09:17:55.320 I t0 log_vtab_impl.cc:1773 vt_best_index(syslog_log, nConstraint=0)
2024-10-22T09:17:55.320 I t0 command_executor.cc:406 sqlite3_changes() -> 1
2024-10-22T09:17:55.320 T t0 view_helpers.cc:1012 example: SELECT * FROM syslog_log
2024-10-22T09:17:55.320 T t0 view_helpers.cc:1013 example result: 
2024-10-22T09:17:55.320 I t0 command_executor.cc:312 Executing SQL: INSERT INTO environ VALUES ('MSG', 'HELLO, WORLD!')
2024-10-22T09:17:55.320 I t0 command_executor.cc:406 sqlite3_changes() -> 1
2024-10-22T09:17:55.320 T t0 view_helpers.cc:1012 example: INSERT INTO environ VALUES ('MSG', 'HELLO, WORLD!')
2024-10-22T09:17:55.320 T t0 view_helpers.cc:1013 example result: 
2024-10-22T09:17:55.320 I t0 command_executor.cc:312 Executing SQL: UPDATE syslog_log SET log_mark = 1 WHERE log_line = 40
2024-10-22T09:17:55.320 I t0 log_vtab_impl.cc:1773 vt_best_index(syslog_log, nConstraint=1)
2024-10-22T09:17:55.320 D t0 log_vtab_impl.cc:1795   column 0: op: =
2024-10-22T09:17:55.320 I t0 log_vtab_impl.cc:1919 found index: SEARCH syslog_log USING log_line = ?
2024-10-22T09:17:55.320 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.320 T t0 view_helpers.cc:1012 example: UPDATE syslog_log SET log_mark = 1 WHERE log_line = 40
2024-10-22T09:17:55.320 T t0 view_helpers.cc:1013 example result: 
2024-10-22T09:17:55.320 I t0 command_executor.cc:312 Executing SQL: SELECT abs(-1)
2024-10-22T09:17:55.320 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.320 T t0 view_helpers.cc:1012 example: SELECT abs(-1)
2024-10-22T09:17:55.320 T t0 view_helpers.cc:1013 example result: 1
2024-10-22T09:17:55.320 I t0 command_executor.cc:312 Executing SQL: SELECT acos(0.2)
2024-10-22T09:17:55.320 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.320 T t0 view_helpers.cc:1012 example: SELECT acos(0.2)
2024-10-22T09:17:55.320 T t0 view_helpers.cc:1013 example result: 1.3694384060045657
2024-10-22T09:17:55.320 I t0 command_executor.cc:312 Executing SQL: SELECT acosh(1.2)
2024-10-22T09:17:55.320 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.320 T t0 view_helpers.cc:1012 example: SELECT acosh(1.2)
2024-10-22T09:17:55.320 T t0 view_helpers.cc:1013 example result: 0.6223625037147786
2024-10-22T09:17:55.320 I t0 command_executor.cc:312 Executing SQL: SELECT anonymize('Hello, 192.168.1.2')
2024-10-22T09:17:55.320 D t0 text_anonymizer.cc:514 tok_re 19 5:6
2024-10-22T09:17:55.320 D t0 text_anonymizer.cc:514 tok_re 46 6:7
2024-10-22T09:17:55.320 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.320 T t0 view_helpers.cc:1012 example: SELECT anonymize('Hello, 192.168.1.2')
2024-10-22T09:17:55.320 T t0 view_helpers.cc:1013 example result: Aback, 10.0.0.1
2024-10-22T09:17:55.320 I t0 command_executor.cc:312 Executing SQL: SELECT asin(0.2)
2024-10-22T09:17:55.320 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.320 T t0 view_helpers.cc:1012 example: SELECT asin(0.2)
2024-10-22T09:17:55.320 T t0 view_helpers.cc:1013 example result: 0.2013579207903308
2024-10-22T09:17:55.320 I t0 command_executor.cc:312 Executing SQL: SELECT asinh(0.2)
2024-10-22T09:17:55.320 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.320 T t0 view_helpers.cc:1012 example: SELECT asinh(0.2)
2024-10-22T09:17:55.320 T t0 view_helpers.cc:1013 example result: 0.19869011034924142
2024-10-22T09:17:55.320 I t0 command_executor.cc:312 Executing SQL: SELECT atan(0.2)
2024-10-22T09:17:55.320 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.320 T t0 view_helpers.cc:1012 example: SELECT atan(0.2)
2024-10-22T09:17:55.320 T t0 view_helpers.cc:1013 example result: 0.19739555984988078
2024-10-22T09:17:55.320 I t0 command_executor.cc:312 Executing SQL: SELECT degrees(atan2(5, 5))
2024-10-22T09:17:55.320 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.320 T t0 view_helpers.cc:1012 example: SELECT degrees(atan2(5, 5))
2024-10-22T09:17:55.320 T t0 view_helpers.cc:1013 example result: 45
2024-10-22T09:17:55.320 I t0 command_executor.cc:312 Executing SQL: SELECT atanh(0.2)
2024-10-22T09:17:55.320 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.321 T t0 view_helpers.cc:1012 example: SELECT atanh(0.2)
2024-10-22T09:17:55.321 T t0 view_helpers.cc:1013 example result: 0.2027325540540822
2024-10-22T09:17:55.321 I t0 command_executor.cc:312 Executing SQL: SELECT degrees(atn2(5, 5))
2024-10-22T09:17:55.321 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.321 T t0 view_helpers.cc:1012 example: SELECT degrees(atn2(5, 5))
2024-10-22T09:17:55.321 T t0 view_helpers.cc:1013 example result: 45
2024-10-22T09:17:55.321 I t0 command_executor.cc:312 Executing SQL: SELECT avg(ex_duration) FROM lnav_example_log
2024-10-22T09:17:55.321 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.321 T t0 view_helpers.cc:1012 example: SELECT avg(ex_duration) FROM lnav_example_log
2024-10-22T09:17:55.321 T t0 view_helpers.cc:1013 example result: 4.25
2024-10-22T09:17:55.321 I t0 command_executor.cc:312 Executing SQL: SELECT ex_procname, avg(ex_duration) FROM lnav_example_log GROUP BY ex_procname
2024-10-22T09:17:55.321 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.321 T t0 view_helpers.cc:1012 example: SELECT ex_procname, avg(ex_duration) FROM lnav_example_log GROUP BY ex_procname
2024-10-22T09:17:55.321 T t0 view_helpers.cc:1013 example result: ex_procname avg(ex_⋯ration) 
gw                        5 
hw                        2 
2024-10-22T09:17:55.321 I t0 command_executor.cc:312 Executing SQL: SELECT basename('foobar')
2024-10-22T09:17:55.321 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.321 T t0 view_helpers.cc:1012 example: SELECT basename('foobar')
2024-10-22T09:17:55.321 T t0 view_helpers.cc:1013 example result: foobar
2024-10-22T09:17:55.321 I t0 command_executor.cc:312 Executing SQL: SELECT basename('foo/bar')
2024-10-22T09:17:55.321 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.321 T t0 view_helpers.cc:1012 example: SELECT basename('foo/bar')
2024-10-22T09:17:55.321 T t0 view_helpers.cc:1013 example result: bar
2024-10-22T09:17:55.321 I t0 command_executor.cc:312 Executing SQL: SELECT basename('foo/bar/')
2024-10-22T09:17:55.321 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.321 T t0 view_helpers.cc:1012 example: SELECT basename('foo/bar/')
2024-10-22T09:17:55.321 T t0 view_helpers.cc:1013 example result: bar
2024-10-22T09:17:55.321 I t0 command_executor.cc:312 Executing SQL: SELECT basename('')
2024-10-22T09:17:55.321 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.321 T t0 view_helpers.cc:1012 example: SELECT basename('')
2024-10-22T09:17:55.321 T t0 view_helpers.cc:1013 example result: .
2024-10-22T09:17:55.321 I t0 command_executor.cc:312 Executing SQL: SELECT basename('foo\bar')
2024-10-22T09:17:55.321 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.321 T t0 view_helpers.cc:1012 example: SELECT basename('foo\bar')
2024-10-22T09:17:55.321 T t0 view_helpers.cc:1013 example result: bar
2024-10-22T09:17:55.321 I t0 command_executor.cc:312 Executing SQL: SELECT basename('/')
2024-10-22T09:17:55.321 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.321 T t0 view_helpers.cc:1012 example: SELECT basename('/')
2024-10-22T09:17:55.321 T t0 view_helpers.cc:1013 example result: /
2024-10-22T09:17:55.321 I t0 command_executor.cc:267 compiling PRQL: from [{p='foo/bar'}] | select { fs.basename p }
2024-10-22T09:17:55.321 T t0 view_helpers.cc:1012 example: from [{p='foo/bar'}] | select { fs.basename p }
2024-10-22T09:17:55.321 T t0 view_helpers.cc:1013 example result: ✘ error: PRQL is not supported in this build

2024-10-22T09:17:55.321 I t0 command_executor.cc:312 Executing SQL: SELECT ceil(1.23)
2024-10-22T09:17:55.321 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.321 T t0 view_helpers.cc:1012 example: SELECT ceil(1.23)
2024-10-22T09:17:55.321 T t0 view_helpers.cc:1013 example result: 2
2024-10-22T09:17:55.321 I t0 command_executor.cc:312 Executing SQL: SELECT char(0x48, 0x49)
2024-10-22T09:17:55.321 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.321 T t0 view_helpers.cc:1012 example: SELECT char(0x48, 0x49)
2024-10-22T09:17:55.321 T t0 view_helpers.cc:1013 example result: HI
2024-10-22T09:17:55.321 I t0 command_executor.cc:312 Executing SQL: SELECT charindex('abc', 'abcabc', 2)
2024-10-22T09:17:55.321 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.321 T t0 view_helpers.cc:1012 example: SELECT charindex('abc', 'abcabc', 2)
2024-10-22T09:17:55.321 T t0 view_helpers.cc:1013 example result: 4
2024-10-22T09:17:55.321 I t0 command_executor.cc:312 Executing SQL: SELECT charindex('abc', 'abcdef', 2)
2024-10-22T09:17:55.321 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.321 T t0 view_helpers.cc:1012 example: SELECT charindex('abc', 'abcdef', 2)
2024-10-22T09:17:55.321 T t0 view_helpers.cc:1013 example result: 0
2024-10-22T09:17:55.321 I t0 command_executor.cc:312 Executing SQL: SELECT coalesce(null, 0, null)
2024-10-22T09:17:55.321 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.321 T t0 view_helpers.cc:1012 example: SELECT coalesce(null, 0, null)
2024-10-22T09:17:55.321 T t0 view_helpers.cc:1013 example result: 0
2024-10-22T09:17:55.321 I t0 command_executor.cc:312 Executing SQL: SELECT count(*) FROM lnav_example_log
2024-10-22T09:17:55.321 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.321 T t0 view_helpers.cc:1012 example: SELECT count(*) FROM lnav_example_log
2024-10-22T09:17:55.321 T t0 view_helpers.cc:1013 example result: 4
2024-10-22T09:17:55.321 I t0 command_executor.cc:312 Executing SQL: SELECT count(log_part) FROM lnav_example_log
2024-10-22T09:17:55.321 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.321 T t0 view_helpers.cc:1012 example: SELECT count(log_part) FROM lnav_example_log
2024-10-22T09:17:55.321 T t0 view_helpers.cc:1013 example result: 2
2024-10-22T09:17:55.321 I t0 command_executor.cc:312 Executing SQL: SELECT date('2017-01-02T03:04:05')
2024-10-22T09:17:55.321 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.321 T t0 view_helpers.cc:1012 example: SELECT date('2017-01-02T03:04:05')
2024-10-22T09:17:55.321 T t0 view_helpers.cc:1013 example result: 2017-01-02
2024-10-22T09:17:55.321 I t0 command_executor.cc:312 Executing SQL: SELECT date('2017-01-02T03:04:05', '+1 day')
2024-10-22T09:17:55.321 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.321 T t0 view_helpers.cc:1012 example: SELECT date('2017-01-02T03:04:05', '+1 day')
2024-10-22T09:17:55.321 T t0 view_helpers.cc:1013 example result: 2017-01-03
2024-10-22T09:17:55.321 I t0 command_executor.cc:312 Executing SQL: SELECT date(1491341842, 'unixepoch')
2024-10-22T09:17:55.321 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.321 T t0 view_helpers.cc:1012 example: SELECT date(1491341842, 'unixepoch')
2024-10-22T09:17:55.321 T t0 view_helpers.cc:1013 example result: 2017-04-04
2024-10-22T09:17:55.321 I t0 command_executor.cc:312 Executing SQL: SELECT datetime('2017-01-02T03:04:05')
2024-10-22T09:17:55.321 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.321 T t0 view_helpers.cc:1012 example: SELECT datetime('2017-01-02T03:04:05')
2024-10-22T09:17:55.321 T t0 view_helpers.cc:1013 example result: 2017-01-02 03:04:05
2024-10-22T09:17:55.321 I t0 command_executor.cc:312 Executing SQL: SELECT datetime('2017-01-02T03:04:05', '+1 minute')
2024-10-22T09:17:55.321 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.321 T t0 view_helpers.cc:1012 example: SELECT datetime('2017-01-02T03:04:05', '+1 minute')
2024-10-22T09:17:55.321 T t0 view_helpers.cc:1013 example result: 2017-01-02 03:05:05
2024-10-22T09:17:55.321 I t0 command_executor.cc:312 Executing SQL: SELECT datetime(1491341842, 'unixepoch')
2024-10-22T09:17:55.321 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.321 T t0 view_helpers.cc:1012 example: SELECT datetime(1491341842, 'unixepoch')
2024-10-22T09:17:55.321 T t0 view_helpers.cc:1013 example result: 2017-04-04 21:37:22
2024-10-22T09:17:55.321 I t0 command_executor.cc:312 Executing SQL: SELECT decode('%63%75%72%6c', 'uri')
2024-10-22T09:17:55.321 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.321 T t0 view_helpers.cc:1012 example: SELECT decode('%63%75%72%6c', 'uri')
2024-10-22T09:17:55.321 T t0 view_helpers.cc:1013 example result: curl
2024-10-22T09:17:55.321 I t0 command_executor.cc:312 Executing SQL: SELECT degrees(pi())
2024-10-22T09:17:55.321 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.321 T t0 view_helpers.cc:1012 example: SELECT degrees(pi())
2024-10-22T09:17:55.321 T t0 view_helpers.cc:1013 example result: 180
2024-10-22T09:17:55.321 I t0 command_executor.cc:312 Executing SQL: SELECT dirname('foo/bar')
2024-10-22T09:17:55.321 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.321 T t0 view_helpers.cc:1012 example: SELECT dirname('foo/bar')
2024-10-22T09:17:55.321 T t0 view_helpers.cc:1013 example result: foo
2024-10-22T09:17:55.321 I t0 command_executor.cc:312 Executing SQL: SELECT dirname('/foo/bar')
2024-10-22T09:17:55.321 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.321 T t0 view_helpers.cc:1012 example: SELECT dirname('/foo/bar')
2024-10-22T09:17:55.321 T t0 view_helpers.cc:1013 example result: /foo
2024-10-22T09:17:55.321 I t0 command_executor.cc:312 Executing SQL: SELECT dirname('/bar')
2024-10-22T09:17:55.321 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.321 T t0 view_helpers.cc:1012 example: SELECT dirname('/bar')
2024-10-22T09:17:55.321 T t0 view_helpers.cc:1013 example result: /
2024-10-22T09:17:55.322 I t0 command_executor.cc:312 Executing SQL: SELECT dirname('foo\bar')
2024-10-22T09:17:55.322 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.322 T t0 view_helpers.cc:1012 example: SELECT dirname('foo\bar')
2024-10-22T09:17:55.322 T t0 view_helpers.cc:1013 example result: foo
2024-10-22T09:17:55.322 I t0 command_executor.cc:312 Executing SQL: SELECT dirname('')
2024-10-22T09:17:55.322 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.322 T t0 view_helpers.cc:1012 example: SELECT dirname('')
2024-10-22T09:17:55.322 T t0 view_helpers.cc:1013 example result: .
2024-10-22T09:17:55.322 I t0 command_executor.cc:312 Executing SQL: SELECT encode('Hello, World!', 'base64')
2024-10-22T09:17:55.322 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.322 T t0 view_helpers.cc:1012 example: SELECT encode('Hello, World!', 'base64')
2024-10-22T09:17:55.322 T t0 view_helpers.cc:1013 example result: SGVsbG8sIFdvcmxkIQ==
2024-10-22T09:17:55.322 I t0 command_executor.cc:312 Executing SQL: SELECT encode('Hello, World!', 'hex')
2024-10-22T09:17:55.322 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.322 T t0 view_helpers.cc:1012 example: SELECT encode('Hello, World!', 'hex')
2024-10-22T09:17:55.322 T t0 view_helpers.cc:1013 example result: 48656c6c6f2c20576f726c6421
2024-10-22T09:17:55.322 I t0 command_executor.cc:312 Executing SQL: SELECT encode('Hello, World!', 'uri')
2024-10-22T09:17:55.322 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.322 T t0 view_helpers.cc:1012 example: SELECT encode('Hello, World!', 'uri')
2024-10-22T09:17:55.322 T t0 view_helpers.cc:1013 example result: Hello%2C%20World%21
2024-10-22T09:17:55.322 I t0 command_executor.cc:312 Executing SQL: SELECT endswith('notbad.jpg', '.jpg')
2024-10-22T09:17:55.322 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.322 T t0 view_helpers.cc:1012 example: SELECT endswith('notbad.jpg', '.jpg')
2024-10-22T09:17:55.322 T t0 view_helpers.cc:1013 example result: 1
2024-10-22T09:17:55.322 I t0 command_executor.cc:312 Executing SQL: SELECT endswith('notbad.png', '.jpg')
2024-10-22T09:17:55.322 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.322 T t0 view_helpers.cc:1012 example: SELECT endswith('notbad.png', '.jpg')
2024-10-22T09:17:55.322 T t0 view_helpers.cc:1013 example result: 0
2024-10-22T09:17:55.322 I t0 command_executor.cc:312 Executing SQL: SELECT exp(2)
2024-10-22T09:17:55.322 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.322 T t0 view_helpers.cc:1012 example: SELECT exp(2)
2024-10-22T09:17:55.322 T t0 view_helpers.cc:1013 example result: 7.38905609893065
2024-10-22T09:17:55.322 I t0 command_executor.cc:312 Executing SQL: SELECT extract('foo=1 bar=2 name="Rolo Tomassi"')
2024-10-22T09:17:55.322 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.322 T t0 view_helpers.cc:1012 example: SELECT extract('foo=1 bar=2 name="Rolo Tomassi"')
2024-10-22T09:17:55.322 T t0 view_helpers.cc:1013 example result: {"foo":1,"bar":2,"name":"Rolo Tomassi"}
2024-10-22T09:17:55.322 I t0 command_executor.cc:312 Executing SQL: SELECT extract('1.0 abc 2.0')
2024-10-22T09:17:55.322 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.322 T t0 view_helpers.cc:1012 example: SELECT extract('1.0 abc 2.0')
2024-10-22T09:17:55.322 T t0 view_helpers.cc:1013 example result: {"col_0":1.0,"col_1":2.0}
2024-10-22T09:17:55.322 I t0 command_executor.cc:312 Executing SQL: SELECT floor(1.23)
2024-10-22T09:17:55.322 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.322 T t0 view_helpers.cc:1012 example: SELECT floor(1.23)
2024-10-22T09:17:55.322 T t0 view_helpers.cc:1013 example result: 1
2024-10-22T09:17:55.322 I t0 command_executor.cc:312 Executing SQL: SELECT ifnull(data, raise_error('cannot read: ' || st_name, error)) FROM fstat('/non-existent')
2024-10-22T09:17:55.322 E t0 sql_util.cc:552 (1) statement aborts at 13: [SELECT ifnull(data, raise_error('cannot read: ' || st_name, error)) FROM fstat('/non-existent')] lnav-error:{"level":"error","message":{"str":"cannot read: non-existent","attrs":[]},"r
2024-10-22T09:17:55.322 E t0 command_executor.cc:443 sqlite3_step error code: 1
2024-10-22T09:17:55.322 T t0 view_helpers.cc:1012 example: SELECT ifnull(data, raise_error('cannot read: ' || st_name, error)) FROM fstat('/non-existent')
2024-10-22T09:17:55.322 T t0 view_helpers.cc:1013 example result: ✘ error: cannot read: non-existent
 reason: No such file or directory
 --> command:1

2024-10-22T09:17:55.322 I t0 command_executor.cc:312 Executing SQL: SELECT value FROM generate_series(10, 14)
2024-10-22T09:17:55.322 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.322 T t0 view_helpers.cc:1012 example: SELECT value FROM generate_series(10, 14)
2024-10-22T09:17:55.322 T t0 view_helpers.cc:1013 example result:   value    
        10 
        11 
        12 
        13 
        14 
2024-10-22T09:17:55.322 I t0 command_executor.cc:312 Executing SQL: SELECT value FROM generate_series(10, 14, 2)
2024-10-22T09:17:55.322 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.322 T t0 view_helpers.cc:1012 example: SELECT value FROM generate_series(10, 14, 2)
2024-10-22T09:17:55.322 T t0 view_helpers.cc:1013 example result:   value    
        10 
        12 
        14 
2024-10-22T09:17:55.322 I t0 command_executor.cc:312 Executing SQL: SELECT value FROM generate_series(1, 5, -1)
2024-10-22T09:17:55.322 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.322 T t0 view_helpers.cc:1012 example: SELECT value FROM generate_series(1, 5, -1)
2024-10-22T09:17:55.322 T t0 view_helpers.cc:1013 example result:   value    
         5 
         4 
         3 
         2 
         1 
2024-10-22T09:17:55.322 I t0 command_executor.cc:312 Executing SQL: SELECT gethostbyaddr('127.0.0.1')
2024-10-22T09:17:55.323 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.323 T t0 view_helpers.cc:1012 example: SELECT gethostbyaddr('127.0.0.1')
2024-10-22T09:17:55.323 T t0 view_helpers.cc:1013 example result: localhost
2024-10-22T09:17:55.323 I t0 command_executor.cc:312 Executing SQL: SELECT gethostbyname('localhost')
2024-10-22T09:17:55.324 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.324 T t0 view_helpers.cc:1012 example: SELECT gethostbyname('localhost')
2024-10-22T09:17:55.324 T t0 view_helpers.cc:1013 example result: 127.0.0.1
2024-10-22T09:17:55.324 I t0 command_executor.cc:312 Executing SQL: SELECT glob('a*', 'abc')
2024-10-22T09:17:55.324 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.324 T t0 view_helpers.cc:1012 example: SELECT glob('a*', 'abc')
2024-10-22T09:17:55.324 T t0 view_helpers.cc:1013 example result: 1
2024-10-22T09:17:55.324 I t0 command_executor.cc:312 Executing SQL: SELECT group_concat(ex_procname) FROM lnav_example_log
2024-10-22T09:17:55.324 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.324 T t0 view_helpers.cc:1012 example: SELECT group_concat(ex_procname) FROM lnav_example_log
2024-10-22T09:17:55.324 T t0 view_helpers.cc:1013 example result: hw,gw,gw,gw
2024-10-22T09:17:55.324 I t0 command_executor.cc:312 Executing SQL: SELECT group_concat(ex_procname, ', ') FROM lnav_example_log
2024-10-22T09:17:55.324 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.324 T t0 view_helpers.cc:1012 example: SELECT group_concat(ex_procname, ', ') FROM lnav_example_log
2024-10-22T09:17:55.324 T t0 view_helpers.cc:1013 example result: hw, gw, gw, gw
2024-10-22T09:17:55.324 I t0 command_executor.cc:312 Executing SQL: SELECT group_concat(DISTINCT ex_procname) FROM lnav_example_log
2024-10-22T09:17:55.324 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.324 T t0 view_helpers.cc:1012 example: SELECT group_concat(DISTINCT ex_procname) FROM lnav_example_log
2024-10-22T09:17:55.324 T t0 view_helpers.cc:1013 example result: hw,gw
2024-10-22T09:17:55.324 I t0 command_executor.cc:312 Executing SQL: SELECT group_spooky_hash(column1) FROM (VALUES ('abc'), ('123'))
2024-10-22T09:17:55.324 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.324 T t0 view_helpers.cc:1012 example: SELECT group_spooky_hash(column1) FROM (VALUES ('abc'), ('123'))
2024-10-22T09:17:55.324 T t0 view_helpers.cc:1013 example result: 4e7a190aead058cb123c94290f29c34a
2024-10-22T09:17:55.324 I t0 command_executor.cc:312 Executing SQL: SELECT hex('abc')
2024-10-22T09:17:55.324 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.324 T t0 view_helpers.cc:1012 example: SELECT hex('abc')
2024-10-22T09:17:55.324 T t0 view_helpers.cc:1013 example result: 616263
2024-10-22T09:17:55.324 I t0 command_executor.cc:312 Executing SQL: SELECT humanize_duration(15 * 60)
2024-10-22T09:17:55.324 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.324 T t0 view_helpers.cc:1012 example: SELECT humanize_duration(15 * 60)
2024-10-22T09:17:55.324 T t0 view_helpers.cc:1013 example result: 15m00s
2024-10-22T09:17:55.324 I t0 command_executor.cc:312 Executing SQL: SELECT humanize_duration(1.5)
2024-10-22T09:17:55.324 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.324 T t0 view_helpers.cc:1012 example: SELECT humanize_duration(1.5)
2024-10-22T09:17:55.324 T t0 view_helpers.cc:1013 example result: 1s500
2024-10-22T09:17:55.324 I t0 command_executor.cc:312 Executing SQL: SELECT humanize_file_size(10 * 1024 * 1024)
2024-10-22T09:17:55.324 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.324 T t0 view_helpers.cc:1012 example: SELECT humanize_file_size(10 * 1024 * 1024)
2024-10-22T09:17:55.324 T t0 view_helpers.cc:1013 example result: 10.0MB
2024-10-22T09:17:55.324 I t0 command_executor.cc:312 Executing SQL: SELECT humanize_id('cluster1')
2024-10-22T09:17:55.324 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.324 T t0 view_helpers.cc:1012 example: SELECT humanize_id('cluster1')
2024-10-22T09:17:55.324 T t0 view_helpers.cc:1013 example result: [38;5;207mcluster1[0m
2024-10-22T09:17:55.324 I t0 command_executor.cc:312 Executing SQL: SELECT ifnull(null, 0)
2024-10-22T09:17:55.324 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.324 T t0 view_helpers.cc:1012 example: SELECT ifnull(null, 0)
2024-10-22T09:17:55.324 T t0 view_helpers.cc:1013 example result: 0
2024-10-22T09:17:55.324 I t0 command_executor.cc:312 Executing SQL: SELECT instr('abc', 'b')
2024-10-22T09:17:55.324 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.324 T t0 view_helpers.cc:1012 example: SELECT instr('abc', 'b')
2024-10-22T09:17:55.324 T t0 view_helpers.cc:1013 example result: 2
2024-10-22T09:17:55.324 I t0 command_executor.cc:312 Executing SQL: SELECT jget('1', '')
2024-10-22T09:17:55.324 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.324 T t0 view_helpers.cc:1012 example: SELECT jget('1', '')
2024-10-22T09:17:55.324 T t0 view_helpers.cc:1013 example result: 1
2024-10-22T09:17:55.324 I t0 command_executor.cc:312 Executing SQL: SELECT jget('{ "a": 1, "b": 2 }', '/b')
2024-10-22T09:17:55.324 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.324 T t0 view_helpers.cc:1012 example: SELECT jget('{ "a": 1, "b": 2 }', '/b')
2024-10-22T09:17:55.324 T t0 view_helpers.cc:1013 example result: 2
2024-10-22T09:17:55.324 I t0 command_executor.cc:312 Executing SQL: SELECT jget(null, '/msg', 'Hello')
2024-10-22T09:17:55.324 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.324 T t0 view_helpers.cc:1012 example: SELECT jget(null, '/msg', 'Hello')
2024-10-22T09:17:55.324 T t0 view_helpers.cc:1013 example result: Hello
2024-10-22T09:17:55.324 I t0 command_executor.cc:312 Executing SQL: SELECT joinpath('foo', 'bar')
2024-10-22T09:17:55.324 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.324 T t0 view_helpers.cc:1012 example: SELECT joinpath('foo', 'bar')
2024-10-22T09:17:55.324 T t0 view_helpers.cc:1013 example result: foo/bar
2024-10-22T09:17:55.324 I t0 command_executor.cc:312 Executing SQL: SELECT joinpath('', 'foo', 'bar')
2024-10-22T09:17:55.324 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.325 T t0 view_helpers.cc:1012 example: SELECT joinpath('', 'foo', 'bar')
2024-10-22T09:17:55.325 T t0 view_helpers.cc:1013 example result: foo/bar
2024-10-22T09:17:55.325 I t0 command_executor.cc:312 Executing SQL: SELECT joinpath('/', 'foo', 'bar')
2024-10-22T09:17:55.325 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.325 T t0 view_helpers.cc:1012 example: SELECT joinpath('/', 'foo', 'bar')
2024-10-22T09:17:55.325 T t0 view_helpers.cc:1013 example result: /foo/bar
2024-10-22T09:17:55.325 I t0 command_executor.cc:312 Executing SQL: SELECT joinpath('/', 'foo', '/bar')
2024-10-22T09:17:55.325 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.325 T t0 view_helpers.cc:1012 example: SELECT joinpath('/', 'foo', '/bar')
2024-10-22T09:17:55.325 T t0 view_helpers.cc:1013 example result: /bar
2024-10-22T09:17:55.325 I t0 command_executor.cc:312 Executing SQL: SELECT json_array(NULL, 1, 2.1, 'three', json_array(4), json_object('five', 'six'))
2024-10-22T09:17:55.325 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.325 T t0 view_helpers.cc:1012 example: SELECT json_array(NULL, 1, 2.1, 'three', json_array(4), json_object('five', 'six'))
2024-10-22T09:17:55.325 T t0 view_helpers.cc:1013 example result: [null,1,2.1,"three",[4],{"five":"six"}]
2024-10-22T09:17:55.325 I t0 command_executor.cc:312 Executing SQL: SELECT json_array()
2024-10-22T09:17:55.325 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.325 T t0 view_helpers.cc:1012 example: SELECT json_array()
2024-10-22T09:17:55.325 T t0 view_helpers.cc:1013 example result: []
2024-10-22T09:17:55.325 I t0 command_executor.cc:312 Executing SQL: SELECT json_array_length('[1, 2, 3]')
2024-10-22T09:17:55.325 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.325 T t0 view_helpers.cc:1012 example: SELECT json_array_length('[1, 2, 3]')
2024-10-22T09:17:55.325 T t0 view_helpers.cc:1013 example result: 3
2024-10-22T09:17:55.325 I t0 command_executor.cc:312 Executing SQL: SELECT json_array_length('{"arr": [1, 2, 3]}', '$.arr')
2024-10-22T09:17:55.325 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.325 T t0 view_helpers.cc:1012 example: SELECT json_array_length('{"arr": [1, 2, 3]}', '$.arr')
2024-10-22T09:17:55.325 T t0 view_helpers.cc:1013 example result: 3
2024-10-22T09:17:55.325 I t0 command_executor.cc:312 Executing SQL: SELECT json_concat(NULL, 4)
2024-10-22T09:17:55.325 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.325 T t0 view_helpers.cc:1012 example: SELECT json_concat(NULL, 4)
2024-10-22T09:17:55.325 T t0 view_helpers.cc:1013 example result: [4]
2024-10-22T09:17:55.325 I t0 command_executor.cc:312 Executing SQL: SELECT json_concat('[1, 2, 3]', 4, 5)
2024-10-22T09:17:55.325 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.325 T t0 view_helpers.cc:1012 example: SELECT json_concat('[1, 2, 3]', 4, 5)
2024-10-22T09:17:55.325 T t0 view_helpers.cc:1013 example result: [1,2,3,4,5]
2024-10-22T09:17:55.325 I t0 command_executor.cc:312 Executing SQL: SELECT json_concat('[1, 2, 3]', json('[4, 5]'))
2024-10-22T09:17:55.325 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.325 T t0 view_helpers.cc:1012 example: SELECT json_concat('[1, 2, 3]', json('[4, 5]'))
2024-10-22T09:17:55.325 T t0 view_helpers.cc:1013 example result: [1,2,3,4,5]
2024-10-22T09:17:55.325 I t0 command_executor.cc:312 Executing SQL: SELECT json_contains('[1, 2, 3]', 4)
2024-10-22T09:17:55.325 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.325 T t0 view_helpers.cc:1012 example: SELECT json_contains('[1, 2, 3]', 4)
2024-10-22T09:17:55.325 T t0 view_helpers.cc:1013 example result: 0
2024-10-22T09:17:55.325 I t0 command_executor.cc:312 Executing SQL: SELECT json_contains('["abc", "def"]', 'def')
2024-10-22T09:17:55.325 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.325 T t0 view_helpers.cc:1012 example: SELECT json_contains('["abc", "def"]', 'def')
2024-10-22T09:17:55.325 T t0 view_helpers.cc:1013 example result: 1
2024-10-22T09:17:55.325 I t0 command_executor.cc:312 Executing SQL: SELECT * FROM json_each('[null,1,"two",{"three":4.5}]')
2024-10-22T09:17:55.325 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.325 T t0 view_helpers.cc:1012 example: SELECT * FROM json_each('[null,1,"two",{"three":4.5}]')
2024-10-22T09:17:55.325 T t0 view_helpers.cc:1013 example result: key     value      type    atom  id parent fullkey path 
  0 <NULL>        null    <NULL>  2 <NULL> $[0]    $    
  1 1             integer 1       3 <NULL> $[1]    $    
  2 two           text    two     5 <NULL> $[2]    $    
  3 {"three":4.5} object  <NULL>  9 <NULL> $[3]    $    
2024-10-22T09:17:55.325 I t0 command_executor.cc:312 Executing SQL: SELECT json_extract('{"num": 1}', '$.num')
2024-10-22T09:17:55.325 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.325 T t0 view_helpers.cc:1012 example: SELECT json_extract('{"num": 1}', '$.num')
2024-10-22T09:17:55.325 T t0 view_helpers.cc:1013 example result: 1
2024-10-22T09:17:55.325 I t0 command_executor.cc:312 Executing SQL: SELECT json_extract('{"num": 1, "val": 2}', '$.num', '$.val')
2024-10-22T09:17:55.325 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.325 T t0 view_helpers.cc:1012 example: SELECT json_extract('{"num": 1, "val": 2}', '$.num', '$.val')
2024-10-22T09:17:55.325 T t0 view_helpers.cc:1013 example result: [1,2]
2024-10-22T09:17:55.325 I t0 command_executor.cc:312 Executing SQL: SELECT json_extract('{"obj": {"sub": 1}}', '$.obj')
2024-10-22T09:17:55.325 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.325 T t0 view_helpers.cc:1012 example: SELECT json_extract('{"obj": {"sub": 1}}', '$.obj')
2024-10-22T09:17:55.325 T t0 view_helpers.cc:1013 example result: {"sub":1}
2024-10-22T09:17:55.325 I t0 command_executor.cc:312 Executing SQL: SELECT json_group_array('one', 2, 3.4)
2024-10-22T09:17:55.325 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.325 T t0 view_helpers.cc:1012 example: SELECT json_group_array('one', 2, 3.4)
2024-10-22T09:17:55.325 T t0 view_helpers.cc:1013 example result: ["one",2,3.3999999999999999112]
2024-10-22T09:17:55.325 I t0 command_executor.cc:312 Executing SQL: SELECT json_group_array(column1) FROM (VALUES (1), (2), (3))
2024-10-22T09:17:55.325 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.325 T t0 view_helpers.cc:1012 example: SELECT json_group_array(column1) FROM (VALUES (1), (2), (3))
2024-10-22T09:17:55.325 T t0 view_helpers.cc:1013 example result: [1,2,3]
2024-10-22T09:17:55.325 I t0 command_executor.cc:312 Executing SQL: SELECT json_group_object('a', 1, 'b', 2)
2024-10-22T09:17:55.325 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.325 T t0 view_helpers.cc:1012 example: SELECT json_group_object('a', 1, 'b', 2)
2024-10-22T09:17:55.325 T t0 view_helpers.cc:1013 example result: {"a":1,"b":2}
2024-10-22T09:17:55.325 I t0 command_executor.cc:312 Executing SQL: SELECT json_group_object(column1, column2) FROM (VALUES ('a', 1), ('b', 2))
2024-10-22T09:17:55.325 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.325 T t0 view_helpers.cc:1012 example: SELECT json_group_object(column1, column2) FROM (VALUES ('a', 1), ('b', 2))
2024-10-22T09:17:55.325 T t0 view_helpers.cc:1013 example result: {"a":1,"b":2}
2024-10-22T09:17:55.325 I t0 command_executor.cc:312 Executing SQL: SELECT json_insert('[1, 2]', '$[#]', 3)
2024-10-22T09:17:55.325 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.325 T t0 view_helpers.cc:1012 example: SELECT json_insert('[1, 2]', '$[#]', 3)
2024-10-22T09:17:55.325 T t0 view_helpers.cc:1013 example result: [1,2,3]
2024-10-22T09:17:55.325 I t0 command_executor.cc:312 Executing SQL: SELECT json_insert('{"a": 1}', '$.b', 2)
2024-10-22T09:17:55.325 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.325 T t0 view_helpers.cc:1012 example: SELECT json_insert('{"a": 1}', '$.b', 2)
2024-10-22T09:17:55.325 T t0 view_helpers.cc:1013 example result: {"a":1,"b":2}
2024-10-22T09:17:55.325 I t0 command_executor.cc:312 Executing SQL: SELECT json_insert('{"a": 1}', '$.a', 2)
2024-10-22T09:17:55.325 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.325 T t0 view_helpers.cc:1012 example: SELECT json_insert('{"a": 1}', '$.a', 2)
2024-10-22T09:17:55.325 T t0 view_helpers.cc:1013 example result: {"a":1}
2024-10-22T09:17:55.325 I t0 command_executor.cc:312 Executing SQL: SELECT json_insert('{"a": 1}', '$.b', 2, '$.c', 3)
2024-10-22T09:17:55.325 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.325 T t0 view_helpers.cc:1012 example: SELECT json_insert('{"a": 1}', '$.b', 2, '$.c', 3)
2024-10-22T09:17:55.325 T t0 view_helpers.cc:1013 example result: {"a":1,"b":2,"c":3}
2024-10-22T09:17:55.325 I t0 command_executor.cc:312 Executing SQL: SELECT json_object('a', 1, 'b', 'c')
2024-10-22T09:17:55.325 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.325 T t0 view_helpers.cc:1012 example: SELECT json_object('a', 1, 'b', 'c')
2024-10-22T09:17:55.325 T t0 view_helpers.cc:1013 example result: {"a":1,"b":"c"}
2024-10-22T09:17:55.325 I t0 command_executor.cc:312 Executing SQL: SELECT json_object()
2024-10-22T09:17:55.325 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.325 T t0 view_helpers.cc:1012 example: SELECT json_object()
2024-10-22T09:17:55.325 T t0 view_helpers.cc:1013 example result: {}
2024-10-22T09:17:55.325 I t0 command_executor.cc:312 Executing SQL: SELECT json_quote('Hello, World!')
2024-10-22T09:17:55.325 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.325 T t0 view_helpers.cc:1012 example: SELECT json_quote('Hello, World!')
2024-10-22T09:17:55.325 T t0 view_helpers.cc:1013 example result: "Hello, World!"
2024-10-22T09:17:55.325 I t0 command_executor.cc:312 Executing SQL: SELECT json_quote(json('"Hello, World!"'))
2024-10-22T09:17:55.325 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.325 T t0 view_helpers.cc:1012 example: SELECT json_quote(json('"Hello, World!"'))
2024-10-22T09:17:55.325 T t0 view_helpers.cc:1013 example result: "Hello, World!"
2024-10-22T09:17:55.325 I t0 command_executor.cc:312 Executing SQL: SELECT json_remove('[1,2,3]', '$[1]', '$[1]')
2024-10-22T09:17:55.325 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.325 T t0 view_helpers.cc:1012 example: SELECT json_remove('[1,2,3]', '$[1]', '$[1]')
2024-10-22T09:17:55.325 T t0 view_helpers.cc:1013 example result: [1]
2024-10-22T09:17:55.325 I t0 command_executor.cc:312 Executing SQL: SELECT json_remove('{"a":1,"b":2}', '$.b')
2024-10-22T09:17:55.326 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.326 T t0 view_helpers.cc:1012 example: SELECT json_remove('{"a":1,"b":2}', '$.b')
2024-10-22T09:17:55.326 T t0 view_helpers.cc:1013 example result: {"a":1}
2024-10-22T09:17:55.326 I t0 command_executor.cc:312 Executing SQL: SELECT json_replace('{"a": 1}', '$.a', 2)
2024-10-22T09:17:55.326 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.326 T t0 view_helpers.cc:1012 example: SELECT json_replace('{"a": 1}', '$.a', 2)
2024-10-22T09:17:55.326 T t0 view_helpers.cc:1013 example result: {"a":2}
2024-10-22T09:17:55.326 I t0 command_executor.cc:312 Executing SQL: SELECT json_replace('{"a": 1}', '$.a', 2, '$.b', 3)
2024-10-22T09:17:55.326 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.326 T t0 view_helpers.cc:1012 example: SELECT json_replace('{"a": 1}', '$.a', 2, '$.b', 3)
2024-10-22T09:17:55.326 T t0 view_helpers.cc:1013 example result: {"a":2}
2024-10-22T09:17:55.326 I t0 command_executor.cc:312 Executing SQL: SELECT json_set('[1, 2]', '$[1]', 3)
2024-10-22T09:17:55.326 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.326 T t0 view_helpers.cc:1012 example: SELECT json_set('[1, 2]', '$[1]', 3)
2024-10-22T09:17:55.326 T t0 view_helpers.cc:1013 example result: [1,3]
2024-10-22T09:17:55.326 I t0 command_executor.cc:312 Executing SQL: SELECT json_set('{"a": 1}', '$.a', 2, '$.b', 3)
2024-10-22T09:17:55.326 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.326 T t0 view_helpers.cc:1012 example: SELECT json_set('{"a": 1}', '$.a', 2, '$.b', 3)
2024-10-22T09:17:55.326 T t0 view_helpers.cc:1013 example result: {"a":2,"b":3}
2024-10-22T09:17:55.326 I t0 command_executor.cc:312 Executing SQL: SELECT key,value,type,atom,fullkey,path FROM json_tree('[null,1,"two",{"three":4.5}]')
2024-10-22T09:17:55.326 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.326 T t0 view_helpers.cc:1012 example: SELECT key,value,type,atom,fullkey,path FROM json_tree('[null,1,"two",{"three":4.5}]')
2024-10-22T09:17:55.326 T t0 view_helpers.cc:1013 example result:  key        value       type    atom   fullkey   path 
<NULL> [null,1⋯":4.5}] array   <NULL> $          $    
0      <NULL>          null    <NULL> $[0]       $    
1      1               integer 1      $[1]       $    
2      two             text    two    $[2]       $    
3      {"three":4.5}   object  <NULL> $[3]       $    
three  4.5             real    4.5    $[3].three $[3] 
2024-10-22T09:17:55.326 I t0 command_executor.cc:312 Executing SQL: SELECT json_type('[null,1,2.1,"three",{"four":5}]')
2024-10-22T09:17:55.326 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.326 T t0 view_helpers.cc:1012 example: SELECT json_type('[null,1,2.1,"three",{"four":5}]')
2024-10-22T09:17:55.326 T t0 view_helpers.cc:1013 example result: array
2024-10-22T09:17:55.326 I t0 command_executor.cc:312 Executing SQL: SELECT json_type('[null,1,2.1,"three",{"four":5}]', '$[0]')
2024-10-22T09:17:55.326 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.326 T t0 view_helpers.cc:1012 example: SELECT json_type('[null,1,2.1,"three",{"four":5}]', '$[0]')
2024-10-22T09:17:55.326 T t0 view_helpers.cc:1013 example result: null
2024-10-22T09:17:55.326 I t0 command_executor.cc:312 Executing SQL: SELECT json_type('[null,1,2.1,"three",{"four":5}]', '$[3]')
2024-10-22T09:17:55.326 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.326 T t0 view_helpers.cc:1012 example: SELECT json_type('[null,1,2.1,"three",{"four":5}]', '$[3]')
2024-10-22T09:17:55.326 T t0 view_helpers.cc:1013 example result: text
2024-10-22T09:17:55.326 I t0 command_executor.cc:312 Executing SQL: SELECT json_valid('')
2024-10-22T09:17:55.326 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.326 T t0 view_helpers.cc:1012 example: SELECT json_valid('')
2024-10-22T09:17:55.326 T t0 view_helpers.cc:1013 example result: 0
2024-10-22T09:17:55.326 I t0 command_executor.cc:312 Executing SQL: SELECT json_valid('"a"')
2024-10-22T09:17:55.326 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.326 T t0 view_helpers.cc:1012 example: SELECT json_valid('"a"')
2024-10-22T09:17:55.326 T t0 view_helpers.cc:1013 example result: 1
2024-10-22T09:17:55.326 I t0 command_executor.cc:312 Executing SQL: SELECT julianday('2017-01-02T03:04:05')
2024-10-22T09:17:55.326 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.326 T t0 view_helpers.cc:1012 example: SELECT julianday('2017-01-02T03:04:05')
2024-10-22T09:17:55.326 T t0 view_helpers.cc:1013 example result: 2457755.627835648
2024-10-22T09:17:55.326 I t0 command_executor.cc:312 Executing SQL: SELECT julianday('2017-01-02T03:04:05', '+1 minute')
2024-10-22T09:17:55.326 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.326 T t0 view_helpers.cc:1012 example: SELECT julianday('2017-01-02T03:04:05', '+1 minute')
2024-10-22T09:17:55.326 T t0 view_helpers.cc:1013 example result: 2457755.6285300925
2024-10-22T09:17:55.326 I t0 command_executor.cc:312 Executing SQL: SELECT julianday(1491341842, 'unixepoch')
2024-10-22T09:17:55.326 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.326 T t0 view_helpers.cc:1012 example: SELECT julianday(1491341842, 'unixepoch')
2024-10-22T09:17:55.326 T t0 view_helpers.cc:1013 example result: 2457848.400949074
2024-10-22T09:17:55.326 I t0 command_executor.cc:312 Executing SQL: SELECT leftstr('abc', 1)
2024-10-22T09:17:55.326 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.326 T t0 view_helpers.cc:1012 example: SELECT leftstr('abc', 1)
2024-10-22T09:17:55.326 T t0 view_helpers.cc:1013 example result: a
2024-10-22T09:17:55.326 I t0 command_executor.cc:312 Executing SQL: SELECT leftstr('abc', 10)
2024-10-22T09:17:55.326 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.326 T t0 view_helpers.cc:1012 example: SELECT leftstr('abc', 10)
2024-10-22T09:17:55.326 T t0 view_helpers.cc:1013 example result: abc
2024-10-22T09:17:55.326 I t0 command_executor.cc:312 Executing SQL: SELECT length('abc')
2024-10-22T09:17:55.326 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.326 T t0 view_helpers.cc:1012 example: SELECT length('abc')
2024-10-22T09:17:55.326 T t0 view_helpers.cc:1013 example result: 3
2024-10-22T09:17:55.326 I t0 command_executor.cc:312 Executing SQL: SELECT like('%b%', 'aabcc')
2024-10-22T09:17:55.326 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.326 T t0 view_helpers.cc:1012 example: SELECT like('%b%', 'aabcc')
2024-10-22T09:17:55.326 T t0 view_helpers.cc:1013 example result: 1
2024-10-22T09:17:55.326 I t0 command_executor.cc:312 Executing SQL: SELECT like('%b:%', 'aab%', ':')
2024-10-22T09:17:55.326 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.326 T t0 view_helpers.cc:1012 example: SELECT like('%b:%', 'aab%', ':')
2024-10-22T09:17:55.326 T t0 view_helpers.cc:1013 example result: 1
2024-10-22T09:17:55.326 I t0 command_executor.cc:312 Executing SQL: SELECT log(8)
2024-10-22T09:17:55.326 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.326 T t0 view_helpers.cc:1012 example: SELECT log(8)
2024-10-22T09:17:55.326 T t0 view_helpers.cc:1013 example result: 2.0794415416798357
2024-10-22T09:17:55.326 I t0 command_executor.cc:312 Executing SQL: SELECT log10(100)
2024-10-22T09:17:55.326 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.326 T t0 view_helpers.cc:1012 example: SELECT log10(100)
2024-10-22T09:17:55.326 T t0 view_helpers.cc:1013 example result: 2
2024-10-22T09:17:55.326 I t0 command_executor.cc:312 Executing SQL: SELECT logfmt2json('foo=1 bar=2 name="Rolo Tomassi"')
2024-10-22T09:17:55.326 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.326 T t0 view_helpers.cc:1012 example: SELECT logfmt2json('foo=1 bar=2 name="Rolo Tomassi"')
2024-10-22T09:17:55.326 T t0 view_helpers.cc:1013 example result: {"foo":1,"bar":2,"name":"Rolo Tomassi"}
2024-10-22T09:17:55.326 I t0 command_executor.cc:312 Executing SQL: SELECT lower('AbC')
2024-10-22T09:17:55.326 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.326 T t0 view_helpers.cc:1012 example: SELECT lower('AbC')
2024-10-22T09:17:55.326 T t0 view_helpers.cc:1013 example result: abc
2024-10-22T09:17:55.326 I t0 command_executor.cc:312 Executing SQL: SELECT ltrim('   abc')
2024-10-22T09:17:55.326 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.326 T t0 view_helpers.cc:1012 example: SELECT ltrim('   abc')
2024-10-22T09:17:55.326 T t0 view_helpers.cc:1013 example result: abc
2024-10-22T09:17:55.326 I t0 command_executor.cc:312 Executing SQL: SELECT ltrim('aaaabbbc', 'ab')
2024-10-22T09:17:55.326 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.326 T t0 view_helpers.cc:1012 example: SELECT ltrim('aaaabbbc', 'ab')
2024-10-22T09:17:55.326 T t0 view_helpers.cc:1013 example result: c
2024-10-22T09:17:55.326 I t0 command_executor.cc:312 Executing SQL: SELECT max(2, 1, 3)
2024-10-22T09:17:55.326 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.326 T t0 view_helpers.cc:1012 example: SELECT max(2, 1, 3)
2024-10-22T09:17:55.326 T t0 view_helpers.cc:1013 example result: 3
2024-10-22T09:17:55.326 I t0 command_executor.cc:312 Executing SQL: SELECT max(status) FROM http_status_codes
2024-10-22T09:17:55.326 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.326 T t0 view_helpers.cc:1012 example: SELECT max(status) FROM http_status_codes
2024-10-22T09:17:55.326 T t0 view_helpers.cc:1013 example result: 511
2024-10-22T09:17:55.326 I t0 command_executor.cc:312 Executing SQL: SELECT min(2, 1, 3)
2024-10-22T09:17:55.326 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.326 T t0 view_helpers.cc:1012 example: SELECT min(2, 1, 3)
2024-10-22T09:17:55.326 T t0 view_helpers.cc:1013 example result: 1
2024-10-22T09:17:55.326 I t0 command_executor.cc:312 Executing SQL: SELECT min(status) FROM http_status_codes
2024-10-22T09:17:55.326 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.326 T t0 view_helpers.cc:1012 example: SELECT min(status) FROM http_status_codes
2024-10-22T09:17:55.326 T t0 view_helpers.cc:1013 example result: 100
2024-10-22T09:17:55.326 I t0 command_executor.cc:312 Executing SQL: SELECT nullif(1, 1)
2024-10-22T09:17:55.326 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.326 T t0 view_helpers.cc:1012 example: SELECT nullif(1, 1)
2024-10-22T09:17:55.326 T t0 view_helpers.cc:1013 example result: <NULL>
2024-10-22T09:17:55.326 I t0 command_executor.cc:312 Executing SQL: SELECT nullif(1, 2)
2024-10-22T09:17:55.326 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.326 T t0 view_helpers.cc:1012 example: SELECT nullif(1, 2)
2024-10-22T09:17:55.326 T t0 view_helpers.cc:1013 example result: 1
2024-10-22T09:17:55.326 I t0 command_executor.cc:312 Executing SQL: SELECT padc('abc', 6) || 'def'
2024-10-22T09:17:55.326 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.326 T t0 view_helpers.cc:1012 example: SELECT padc('abc', 6) || 'def'
2024-10-22T09:17:55.326 T t0 view_helpers.cc:1013 example result:  abc  def
2024-10-22T09:17:55.326 I t0 command_executor.cc:312 Executing SQL: SELECT padc('abcdef', 8) || 'ghi'
2024-10-22T09:17:55.326 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.326 T t0 view_helpers.cc:1012 example: SELECT padc('abcdef', 8) || 'ghi'
2024-10-22T09:17:55.326 T t0 view_helpers.cc:1013 example result:  abcdef ghi
2024-10-22T09:17:55.326 I t0 command_executor.cc:312 Executing SQL: SELECT padl('abc', 6)
2024-10-22T09:17:55.326 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.326 T t0 view_helpers.cc:1012 example: SELECT padl('abc', 6)
2024-10-22T09:17:55.326 T t0 view_helpers.cc:1013 example result:    abc
2024-10-22T09:17:55.326 I t0 command_executor.cc:312 Executing SQL: SELECT padl('abcdef', 4)
2024-10-22T09:17:55.326 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.326 T t0 view_helpers.cc:1012 example: SELECT padl('abcdef', 4)
2024-10-22T09:17:55.326 T t0 view_helpers.cc:1013 example result: abcdef
2024-10-22T09:17:55.326 I t0 command_executor.cc:312 Executing SQL: SELECT padr('abc', 6) || 'def'
2024-10-22T09:17:55.326 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.326 T t0 view_helpers.cc:1012 example: SELECT padr('abc', 6) || 'def'
2024-10-22T09:17:55.326 T t0 view_helpers.cc:1013 example result: abc   def
2024-10-22T09:17:55.327 I t0 command_executor.cc:312 Executing SQL: SELECT padr('abcdef', 4) || 'ghi'
2024-10-22T09:17:55.327 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.327 T t0 view_helpers.cc:1012 example: SELECT padr('abcdef', 4) || 'ghi'
2024-10-22T09:17:55.327 T t0 view_helpers.cc:1013 example result: abcdefghi
2024-10-22T09:17:55.327 I t0 command_executor.cc:312 Executing SQL: SELECT parse_url('https://example.com/search?q=hello%20world')
2024-10-22T09:17:55.327 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.327 T t0 view_helpers.cc:1012 example: SELECT parse_url('https://example.com/search?q=hello%20world')
2024-10-22T09:17:55.327 T t0 view_helpers.cc:1013 example result: {"scheme":"https","username":null,"password":null,"host":"example.com","port":null,"path":"/search","query":"q=hello%20world","parameters":{"q":"hello world"},"fragment":null}
2024-10-22T09:17:55.327 I t0 command_executor.cc:312 Executing SQL: SELECT parse_url('https://alice@[fe80::14ff:4ee5:1215:2fb2]')
2024-10-22T09:17:55.327 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.327 T t0 view_helpers.cc:1012 example: SELECT parse_url('https://alice@[fe80::14ff:4ee5:1215:2fb2]')
2024-10-22T09:17:55.327 T t0 view_helpers.cc:1013 example result: {"scheme":"https","username":"alice","password":null,"host":"[fe80::14ff:4ee5:1215:2fb2]","port":null,"path":"/","query":null,"parameters":null,"fragment":null}
2024-10-22T09:17:55.327 I t0 command_executor.cc:312 Executing SQL: SELECT pi()
2024-10-22T09:17:55.327 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.327 T t0 view_helpers.cc:1012 example: SELECT pi()
2024-10-22T09:17:55.327 T t0 view_helpers.cc:1013 example result: 3.141592653589793
2024-10-22T09:17:55.327 I t0 command_executor.cc:312 Executing SQL: SELECT power(2, 3)
2024-10-22T09:17:55.327 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.327 T t0 view_helpers.cc:1012 example: SELECT power(2, 3)
2024-10-22T09:17:55.327 T t0 view_helpers.cc:1013 example result: 8
2024-10-22T09:17:55.327 I t0 command_executor.cc:312 Executing SQL: SELECT printf('Hello, %s!', 'World')
2024-10-22T09:17:55.327 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.327 T t0 view_helpers.cc:1012 example: SELECT printf('Hello, %s!', 'World')
2024-10-22T09:17:55.327 T t0 view_helpers.cc:1013 example result: Hello, World!
2024-10-22T09:17:55.327 I t0 command_executor.cc:312 Executing SQL: SELECT printf('align: % 10s', 'small')
2024-10-22T09:17:55.327 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.327 T t0 view_helpers.cc:1012 example: SELECT printf('align: % 10s', 'small')
2024-10-22T09:17:55.327 T t0 view_helpers.cc:1013 example result: align:      small
2024-10-22T09:17:55.327 I t0 command_executor.cc:312 Executing SQL: SELECT printf('value: %05d', 11)
2024-10-22T09:17:55.327 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.327 T t0 view_helpers.cc:1012 example: SELECT printf('value: %05d', 11)
2024-10-22T09:17:55.327 T t0 view_helpers.cc:1013 example result: value: 00011
2024-10-22T09:17:55.327 I t0 command_executor.cc:312 Executing SQL: SELECT proper('hello, world!')
2024-10-22T09:17:55.327 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.327 T t0 view_helpers.cc:1012 example: SELECT proper('hello, world!')
2024-10-22T09:17:55.327 T t0 view_helpers.cc:1013 example result: Hello, World!
2024-10-22T09:17:55.327 I t0 command_executor.cc:312 Executing SQL: SELECT quote('abc')
2024-10-22T09:17:55.327 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.327 T t0 view_helpers.cc:1012 example: SELECT quote('abc')
2024-10-22T09:17:55.327 T t0 view_helpers.cc:1013 example result: 'abc'
2024-10-22T09:17:55.327 I t0 command_executor.cc:312 Executing SQL: SELECT quote('abc''123')
2024-10-22T09:17:55.327 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.327 T t0 view_helpers.cc:1012 example: SELECT quote('abc''123')
2024-10-22T09:17:55.327 T t0 view_helpers.cc:1013 example result: 'abc''123'
2024-10-22T09:17:55.327 I t0 command_executor.cc:312 Executing SQL: SELECT radians(180)
2024-10-22T09:17:55.327 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.327 T t0 view_helpers.cc:1012 example: SELECT radians(180)
2024-10-22T09:17:55.327 T t0 view_helpers.cc:1013 example result: 3.141592653589793
2024-10-22T09:17:55.327 I t0 command_executor.cc:312 Executing SQL: SELECT ifnull($val, raise_error('please set $val', 'because'))
2024-10-22T09:17:55.327 E t0 sql_util.cc:552 (1) statement aborts at 3: [SELECT ifnull($val, raise_error('please set $val', 'because'))] lnav-error:{"level":"error","message":{"str":"please set $val","attrs":[]},"reason":{"str":"because","attrs":[]},"snippet
2024-10-22T09:17:55.327 E t0 command_executor.cc:443 sqlite3_step error code: 1
2024-10-22T09:17:55.327 T t0 view_helpers.cc:1012 example: SELECT ifnull($val, raise_error('please set $val', 'because'))
2024-10-22T09:17:55.327 T t0 view_helpers.cc:1013 example result: ✘ error: please set $val
 reason: because
 --> command:1

2024-10-22T09:17:55.328 I t0 command_executor.cc:312 Executing SQL: SELECT * FROM regexp_capture('a=1; b=2', '(\w+)=(\d+)')
2024-10-22T09:17:55.328 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.328 T t0 view_helpers.cc:1012 example: SELECT * FROM regexp_capture('a=1; b=2', '(\w+)=(\d+)')
2024-10-22T09:17:55.328 T t0 view_helpers.cc:1013 example result: match_index capture_index capture_name capture_count range_start range_stop content 
          0             0       <NULL>             3           1          4 a=1     
          0             1       <NULL>             3           1          2 a       
          0             2       <NULL>             3           3          4 1       
          1             0       <NULL>             3           6          9 b=2     
          1             1       <NULL>             3           6          7 b       
          1             2       <NULL>             3           8          9 2       
2024-10-22T09:17:55.328 I t0 command_executor.cc:312 Executing SQL: SELECT * FROM regexp_capture_into_json('a=1; b=2', '(\w+)=(\d+)')
2024-10-22T09:17:55.328 D t0 column_namer.cc:109 column name already exists (col), trying (col_0)
2024-10-22T09:17:55.328 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.328 T t0 view_helpers.cc:1012 example: SELECT * FROM regexp_capture_into_json('a=1; b=2', '(\w+)=(\d+)')
2024-10-22T09:17:55.328 T t0 view_helpers.cc:1013 example result: match_index     content     
          0 {"col_0⋯l_1":1} 
          1 {"col_0⋯l_1":2} 
2024-10-22T09:17:55.328 I t0 command_executor.cc:312 Executing SQL: SELECT regexp_match('(\d+)', '123')
2024-10-22T09:17:55.328 D t0 column_namer.cc:109 column name already exists (col), trying (col_0)
2024-10-22T09:17:55.328 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.328 T t0 view_helpers.cc:1012 example: SELECT regexp_match('(\d+)', '123')
2024-10-22T09:17:55.328 T t0 view_helpers.cc:1013 example result: 123
2024-10-22T09:17:55.328 I t0 command_executor.cc:312 Executing SQL: SELECT regexp_match('(\d+) (\w+)', '123 four')
2024-10-22T09:17:55.328 D t0 column_namer.cc:109 column name already exists (col), trying (col_0)
2024-10-22T09:17:55.328 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.328 T t0 view_helpers.cc:1012 example: SELECT regexp_match('(\d+) (\w+)', '123 four')
2024-10-22T09:17:55.328 T t0 view_helpers.cc:1013 example result: {"col_0":123,"col_1":"four"}
2024-10-22T09:17:55.328 I t0 command_executor.cc:312 Executing SQL: SELECT regexp_match('(?<num>\d+) (?<str>\w+)', '123 four')
2024-10-22T09:17:55.328 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.328 T t0 view_helpers.cc:1012 example: SELECT regexp_match('(?<num>\d+) (?<str>\w+)', '123 four')
2024-10-22T09:17:55.328 T t0 view_helpers.cc:1013 example result: {"num":123,"str":"four"}
2024-10-22T09:17:55.328 I t0 command_executor.cc:312 Executing SQL: SELECT regexp_replace('Hello, World!', '^(\w+)', 'Goodbye')
2024-10-22T09:17:55.328 D t0 column_namer.cc:109 column name already exists (col), trying (col_0)
2024-10-22T09:17:55.328 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.328 T t0 view_helpers.cc:1012 example: SELECT regexp_replace('Hello, World!', '^(\w+)', 'Goodbye')
2024-10-22T09:17:55.329 T t0 view_helpers.cc:1013 example result: Goodbye, World!
2024-10-22T09:17:55.329 I t0 command_executor.cc:312 Executing SQL: SELECT regexp_replace('123 abc', '(\w+)', '<\1>')
2024-10-22T09:17:55.329 D t0 column_namer.cc:109 column name already exists (col), trying (col_0)
2024-10-22T09:17:55.329 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.329 T t0 view_helpers.cc:1012 example: SELECT regexp_replace('123 abc', '(\w+)', '<\1>')
2024-10-22T09:17:55.329 T t0 view_helpers.cc:1013 example result: <123> <abc>
2024-10-22T09:17:55.329 I t0 command_executor.cc:312 Executing SQL: SELECT replace('abc', 'x', 'z')
2024-10-22T09:17:55.329 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.329 T t0 view_helpers.cc:1012 example: SELECT replace('abc', 'x', 'z')
2024-10-22T09:17:55.329 T t0 view_helpers.cc:1013 example result: abc
2024-10-22T09:17:55.329 I t0 command_executor.cc:312 Executing SQL: SELECT replace('abc', 'a', 'z')
2024-10-22T09:17:55.329 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.329 T t0 view_helpers.cc:1012 example: SELECT replace('abc', 'a', 'z')
2024-10-22T09:17:55.329 T t0 view_helpers.cc:1013 example result: zbc
2024-10-22T09:17:55.329 I t0 command_executor.cc:312 Executing SQL: SELECT replicate('abc', 3)
2024-10-22T09:17:55.329 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.329 T t0 view_helpers.cc:1012 example: SELECT replicate('abc', 3)
2024-10-22T09:17:55.329 T t0 view_helpers.cc:1013 example result: abcabcabc
2024-10-22T09:17:55.329 I t0 command_executor.cc:312 Executing SQL: SELECT reverse('abc')
2024-10-22T09:17:55.329 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.329 T t0 view_helpers.cc:1012 example: SELECT reverse('abc')
2024-10-22T09:17:55.329 T t0 view_helpers.cc:1013 example result: cba
2024-10-22T09:17:55.329 I t0 command_executor.cc:312 Executing SQL: SELECT rightstr('abc', 1)
2024-10-22T09:17:55.329 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.329 T t0 view_helpers.cc:1012 example: SELECT rightstr('abc', 1)
2024-10-22T09:17:55.329 T t0 view_helpers.cc:1013 example result: c
2024-10-22T09:17:55.329 I t0 command_executor.cc:312 Executing SQL: SELECT rightstr('abc', 10)
2024-10-22T09:17:55.329 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.329 T t0 view_helpers.cc:1012 example: SELECT rightstr('abc', 10)
2024-10-22T09:17:55.329 T t0 view_helpers.cc:1013 example result: abc
2024-10-22T09:17:55.329 I t0 command_executor.cc:312 Executing SQL: SELECT round(123.456)
2024-10-22T09:17:55.329 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.329 T t0 view_helpers.cc:1012 example: SELECT round(123.456)
2024-10-22T09:17:55.329 T t0 view_helpers.cc:1013 example result: 123
2024-10-22T09:17:55.329 I t0 command_executor.cc:312 Executing SQL: SELECT round(123.456, 1)
2024-10-22T09:17:55.329 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.329 T t0 view_helpers.cc:1012 example: SELECT round(123.456, 1)
2024-10-22T09:17:55.329 T t0 view_helpers.cc:1013 example result: 123.5
2024-10-22T09:17:55.329 I t0 command_executor.cc:312 Executing SQL: SELECT round(123.456, 5)
2024-10-22T09:17:55.329 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.329 T t0 view_helpers.cc:1012 example: SELECT round(123.456, 5)
2024-10-22T09:17:55.329 T t0 view_helpers.cc:1013 example result: 123.456
2024-10-22T09:17:55.329 I t0 command_executor.cc:312 Executing SQL: SELECT row_number() OVER (PARTITION BY ex_procname ORDER BY log_line) AS msg_num, ex_procname, log_body FROM lnav_example_log
2024-10-22T09:17:55.329 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.329 T t0 view_helpers.cc:1012 example: SELECT row_number() OVER (PARTITION BY ex_procname ORDER BY log_line) AS msg_num, ex_procname, log_body FROM lnav_example_log
2024-10-22T09:17:55.329 T t0 view_helpers.cc:1013 example result:  msg_num   ex_procname    log_body     
         1 gw          Goodbye, World! 
         2 gw          Goodbye, World! 
         3 gw          Goodbye, World! 
         1 hw          Hello, World!   
2024-10-22T09:17:55.329 I t0 command_executor.cc:312 Executing SQL: SELECT rtrim('abc   ')
2024-10-22T09:17:55.329 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.329 T t0 view_helpers.cc:1012 example: SELECT rtrim('abc   ')
2024-10-22T09:17:55.329 T t0 view_helpers.cc:1013 example result: abc
2024-10-22T09:17:55.329 I t0 command_executor.cc:312 Executing SQL: SELECT rtrim('abbbbcccc', 'bc')
2024-10-22T09:17:55.329 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.329 T t0 view_helpers.cc:1012 example: SELECT rtrim('abbbbcccc', 'bc')
2024-10-22T09:17:55.329 T t0 view_helpers.cc:1013 example result: a
2024-10-22T09:17:55.329 I t0 command_executor.cc:312 Executing SQL: SELECT sign(10)
2024-10-22T09:17:55.329 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.329 T t0 view_helpers.cc:1012 example: SELECT sign(10)
2024-10-22T09:17:55.329 T t0 view_helpers.cc:1013 example result: 1
2024-10-22T09:17:55.329 I t0 command_executor.cc:312 Executing SQL: SELECT sign(0)
2024-10-22T09:17:55.329 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.329 T t0 view_helpers.cc:1012 example: SELECT sign(0)
2024-10-22T09:17:55.329 T t0 view_helpers.cc:1013 example result: 0
2024-10-22T09:17:55.329 I t0 command_executor.cc:312 Executing SQL: SELECT sign(-10)
2024-10-22T09:17:55.329 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.329 T t0 view_helpers.cc:1012 example: SELECT sign(-10)
2024-10-22T09:17:55.329 T t0 view_helpers.cc:1013 example result: -1
2024-10-22T09:17:55.329 I t0 command_executor.cc:312 Executing SQL: SELECT sparkline(32, 128)
2024-10-22T09:17:55.329 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.329 T t0 view_helpers.cc:1012 example: SELECT sparkline(32, 128)
2024-10-22T09:17:55.329 T t0 view_helpers.cc:1013 example result: ▂
2024-10-22T09:17:55.329 I t0 command_executor.cc:312 Executing SQL: SELECT sparkline(value) FROM json_each('[0, 1, 2, 3, 4, 5, 6, 7, 8]')
2024-10-22T09:17:55.329 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.329 T t0 view_helpers.cc:1012 example: SELECT sparkline(value) FROM json_each('[0, 1, 2, 3, 4, 5, 6, 7, 8]')
2024-10-22T09:17:55.329 T t0 view_helpers.cc:1013 example result:  ▁▂▃▄▅▆▇█
2024-10-22T09:17:55.329 I t0 command_executor.cc:312 Executing SQL: SELECT spooky_hash('Hello, World!')
2024-10-22T09:17:55.329 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.329 T t0 view_helpers.cc:1012 example: SELECT spooky_hash('Hello, World!')
2024-10-22T09:17:55.329 T t0 view_helpers.cc:1013 example result: 0b1d52cc5427db4c6a9eed9d3e5700f4
2024-10-22T09:17:55.329 I t0 command_executor.cc:312 Executing SQL: SELECT spooky_hash('Hello, World!', NULL)
2024-10-22T09:17:55.329 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.329 T t0 view_helpers.cc:1012 example: SELECT spooky_hash('Hello, World!', NULL)
2024-10-22T09:17:55.329 T t0 view_helpers.cc:1013 example result: c96ee75d48e6ea444fee8af948f6da25
2024-10-22T09:17:55.329 I t0 command_executor.cc:312 Executing SQL: SELECT spooky_hash('Hello, World!', '')
2024-10-22T09:17:55.329 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.329 T t0 view_helpers.cc:1012 example: SELECT spooky_hash('Hello, World!', '')
2024-10-22T09:17:55.329 T t0 view_helpers.cc:1013 example result: c96ee75d48e6ea444fee8af948f6da25
2024-10-22T09:17:55.329 I t0 command_executor.cc:312 Executing SQL: SELECT spooky_hash('Hello, World!', 123)
2024-10-22T09:17:55.329 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.329 T t0 view_helpers.cc:1012 example: SELECT spooky_hash('Hello, World!', 123)
2024-10-22T09:17:55.329 T t0 view_helpers.cc:1013 example result: f96b3d9c1a19f4394c97a1b79b1880df
2024-10-22T09:17:55.329 I t0 command_executor.cc:312 Executing SQL: SELECT sqlite_compileoption_used('ENABLE_FTS3')
2024-10-22T09:17:55.329 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.329 T t0 view_helpers.cc:1012 example: SELECT sqlite_compileoption_used('ENABLE_FTS3')
2024-10-22T09:17:55.329 T t0 view_helpers.cc:1013 example result: 1
2024-10-22T09:17:55.329 I t0 command_executor.cc:312 Executing SQL: SELECT square(2)
2024-10-22T09:17:55.329 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.329 T t0 view_helpers.cc:1012 example: SELECT square(2)
2024-10-22T09:17:55.329 T t0 view_helpers.cc:1013 example result: 4
2024-10-22T09:17:55.329 I t0 command_executor.cc:312 Executing SQL: SELECT startswith('foobar', 'foo')
2024-10-22T09:17:55.329 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.330 T t0 view_helpers.cc:1012 example: SELECT startswith('foobar', 'foo')
2024-10-22T09:17:55.330 T t0 view_helpers.cc:1013 example result: 1
2024-10-22T09:17:55.330 I t0 command_executor.cc:312 Executing SQL: SELECT startswith('foobar', 'bar')
2024-10-22T09:17:55.330 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.330 T t0 view_helpers.cc:1012 example: SELECT startswith('foobar', 'bar')
2024-10-22T09:17:55.330 T t0 view_helpers.cc:1013 example result: 0
2024-10-22T09:17:55.330 I t0 command_executor.cc:312 Executing SQL: SELECT strfilter('abcabc', 'bcd')
2024-10-22T09:17:55.330 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.330 T t0 view_helpers.cc:1012 example: SELECT strfilter('abcabc', 'bcd')
2024-10-22T09:17:55.330 T t0 view_helpers.cc:1013 example result: bcbc
2024-10-22T09:17:55.330 I t0 command_executor.cc:312 Executing SQL: SELECT strftime('%Y', '2017-01-02T03:04:05')
2024-10-22T09:17:55.330 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.330 T t0 view_helpers.cc:1012 example: SELECT strftime('%Y', '2017-01-02T03:04:05')
2024-10-22T09:17:55.330 T t0 view_helpers.cc:1013 example result: 2017
2024-10-22T09:17:55.330 I t0 command_executor.cc:312 Executing SQL: SELECT strftime('The time is: %H:%M:%S', '2017-01-02T03:04:05', '+1 minute')
2024-10-22T09:17:55.330 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.330 T t0 view_helpers.cc:1012 example: SELECT strftime('The time is: %H:%M:%S', '2017-01-02T03:04:05', '+1 minute')
2024-10-22T09:17:55.330 T t0 view_helpers.cc:1013 example result: The time is: 03:05:05
2024-10-22T09:17:55.330 I t0 command_executor.cc:312 Executing SQL: SELECT strftime('Julian day: %J', 1491341842, 'unixepoch')
2024-10-22T09:17:55.330 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.330 T t0 view_helpers.cc:1012 example: SELECT strftime('Julian day: %J', 1491341842, 'unixepoch')
2024-10-22T09:17:55.330 T t0 view_helpers.cc:1013 example result: Julian day: 2457848.400949074
2024-10-22T09:17:55.330 I t0 command_executor.cc:312 Executing SQL: SELECT substr('abc', 2)
2024-10-22T09:17:55.330 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.330 T t0 view_helpers.cc:1012 example: SELECT substr('abc', 2)
2024-10-22T09:17:55.330 T t0 view_helpers.cc:1013 example result: bc
2024-10-22T09:17:55.330 I t0 command_executor.cc:312 Executing SQL: SELECT substr('abc', 2, 1)
2024-10-22T09:17:55.330 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.330 T t0 view_helpers.cc:1012 example: SELECT substr('abc', 2, 1)
2024-10-22T09:17:55.330 T t0 view_helpers.cc:1013 example result: b
2024-10-22T09:17:55.330 I t0 command_executor.cc:312 Executing SQL: SELECT substr('abc', -1)
2024-10-22T09:17:55.330 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.330 T t0 view_helpers.cc:1012 example: SELECT substr('abc', -1)
2024-10-22T09:17:55.330 T t0 view_helpers.cc:1013 example result: c
2024-10-22T09:17:55.330 I t0 command_executor.cc:312 Executing SQL: SELECT substr('abc', -1, -1)
2024-10-22T09:17:55.330 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.330 T t0 view_helpers.cc:1012 example: SELECT substr('abc', -1, -1)
2024-10-22T09:17:55.330 T t0 view_helpers.cc:1013 example result: b
2024-10-22T09:17:55.330 I t0 command_executor.cc:312 Executing SQL: SELECT sum(ex_duration) FROM lnav_example_log
2024-10-22T09:17:55.330 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.330 T t0 view_helpers.cc:1012 example: SELECT sum(ex_duration) FROM lnav_example_log
2024-10-22T09:17:55.330 T t0 view_helpers.cc:1013 example result: 17
2024-10-22T09:17:55.330 I t0 command_executor.cc:312 Executing SQL: SELECT time('2017-01-02T03:04:05')
2024-10-22T09:17:55.330 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.330 T t0 view_helpers.cc:1012 example: SELECT time('2017-01-02T03:04:05')
2024-10-22T09:17:55.330 T t0 view_helpers.cc:1013 example result: 03:04:05
2024-10-22T09:17:55.330 I t0 command_executor.cc:312 Executing SQL: SELECT time('2017-01-02T03:04:05', '+1 minute')
2024-10-22T09:17:55.330 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.330 T t0 view_helpers.cc:1012 example: SELECT time('2017-01-02T03:04:05', '+1 minute')
2024-10-22T09:17:55.330 T t0 view_helpers.cc:1013 example result: 03:05:05
2024-10-22T09:17:55.330 I t0 command_executor.cc:312 Executing SQL: SELECT time(1491341842, 'unixepoch')
2024-10-22T09:17:55.330 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.330 T t0 view_helpers.cc:1012 example: SELECT time(1491341842, 'unixepoch')
2024-10-22T09:17:55.330 T t0 view_helpers.cc:1013 example result: 21:37:22
2024-10-22T09:17:55.330 I t0 command_executor.cc:312 Executing SQL: SELECT timediff('2017-02-03T04:05:06', '2017-02-03T04:05:00')
2024-10-22T09:17:55.330 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.330 T t0 view_helpers.cc:1012 example: SELECT timediff('2017-02-03T04:05:06', '2017-02-03T04:05:00')
2024-10-22T09:17:55.330 T t0 view_helpers.cc:1013 example result: 6
2024-10-22T09:17:55.330 I t0 command_executor.cc:312 Executing SQL: SELECT timediff('today', 'yesterday')
2024-10-22T09:17:55.330 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.331 T t0 view_helpers.cc:1012 example: SELECT timediff('today', 'yesterday')
2024-10-22T09:17:55.331 T t0 view_helpers.cc:1013 example result: 86400
2024-10-22T09:17:55.331 I t0 command_executor.cc:312 Executing SQL: SELECT timeslice('2017-01-01T05:05:00', '10m')
2024-10-22T09:17:55.331 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.331 T t0 view_helpers.cc:1012 example: SELECT timeslice('2017-01-01T05:05:00', '10m')
2024-10-22T09:17:55.331 T t0 view_helpers.cc:1013 example result: 2017-01-01 05:00:00.000
2024-10-22T09:17:55.331 I t0 command_executor.cc:312 Executing SQL: SELECT timeslice(log_time_msecs, '5m') AS slice, count(1)
    FROM lnav_example_log GROUP BY slice
2024-10-22T09:17:55.331 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.331 T t0 view_helpers.cc:1012 example: SELECT timeslice(log_time_msecs, '5m') AS slice, count(1)
    FROM lnav_example_log GROUP BY slice
2024-10-22T09:17:55.331 T t0 view_helpers.cc:1013 example result:      slice       count(1)  
2017-02⋯:00.000          2 
2017-02⋯:00.000          1 
2017-02⋯:00.000          1 
2024-10-22T09:17:55.331 I t0 command_executor.cc:312 Executing SQL: SELECT timeslice(log_time_msecs, 'before 4:30am') AS slice, count(1) FROM lnav_example_log GROUP BY slice
2024-10-22T09:17:55.331 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.331 T t0 view_helpers.cc:1012 example: SELECT timeslice(log_time_msecs, 'before 4:30am') AS slice, count(1) FROM lnav_example_log GROUP BY slice
2024-10-22T09:17:55.331 T t0 view_helpers.cc:1013 example result:      slice       count(1)  
<NULL>                   1 
2017-02⋯:00.000          3 
2024-10-22T09:17:55.331 I t0 command_executor.cc:312 Executing SQL: SELECT timezone('America/Los_Angeles', '2022-03-02T10:00')
2024-10-22T09:17:55.331 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.331 T t0 view_helpers.cc:1012 example: SELECT timezone('America/Los_Angeles', '2022-03-02T10:00')
2024-10-22T09:17:55.331 T t0 view_helpers.cc:1013 example result: 2022-03-02T02:00:00.000000-0800
2024-10-22T09:17:55.331 I t0 command_executor.cc:312 Executing SQL: SELECT total(ex_duration) FROM lnav_example_log
2024-10-22T09:17:55.331 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.331 T t0 view_helpers.cc:1012 example: SELECT total(ex_duration) FROM lnav_example_log
2024-10-22T09:17:55.331 T t0 view_helpers.cc:1013 example result: 17
2024-10-22T09:17:55.331 I t0 command_executor.cc:312 Executing SQL: SELECT trim('    abc   ')
2024-10-22T09:17:55.331 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.331 T t0 view_helpers.cc:1012 example: SELECT trim('    abc   ')
2024-10-22T09:17:55.331 T t0 view_helpers.cc:1013 example result: abc
2024-10-22T09:17:55.331 I t0 command_executor.cc:312 Executing SQL: SELECT trim('-+abc+-', '-+')
2024-10-22T09:17:55.331 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.331 T t0 view_helpers.cc:1012 example: SELECT trim('-+abc+-', '-+')
2024-10-22T09:17:55.331 T t0 view_helpers.cc:1013 example result: abc
2024-10-22T09:17:55.331 I t0 command_executor.cc:312 Executing SQL: SELECT typeof(1)
2024-10-22T09:17:55.331 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.331 T t0 view_helpers.cc:1012 example: SELECT typeof(1)
2024-10-22T09:17:55.331 T t0 view_helpers.cc:1013 example result: integer
2024-10-22T09:17:55.331 I t0 command_executor.cc:312 Executing SQL: SELECT typeof('abc')
2024-10-22T09:17:55.331 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.331 T t0 view_helpers.cc:1012 example: SELECT typeof('abc')
2024-10-22T09:17:55.331 T t0 view_helpers.cc:1013 example result: text
2024-10-22T09:17:55.331 I t0 command_executor.cc:312 Executing SQL: SELECT unicode('abc')
2024-10-22T09:17:55.331 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.331 T t0 view_helpers.cc:1012 example: SELECT unicode('abc')
2024-10-22T09:17:55.331 T t0 view_helpers.cc:1013 example result: 97
2024-10-22T09:17:55.331 I t0 command_executor.cc:312 Executing SQL: SELECT unparse_url('{"scheme": "https", "host": "example.com"}')
2024-10-22T09:17:55.331 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.331 T t0 view_helpers.cc:1012 example: SELECT unparse_url('{"scheme": "https", "host": "example.com"}')
2024-10-22T09:17:55.331 T t0 view_helpers.cc:1013 example result: https://example.com/
2024-10-22T09:17:55.331 I t0 command_executor.cc:312 Executing SQL: SELECT upper('aBc')
2024-10-22T09:17:55.331 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.331 T t0 view_helpers.cc:1012 example: SELECT upper('aBc')
2024-10-22T09:17:55.331 T t0 view_helpers.cc:1013 example result: ABC
2024-10-22T09:17:55.331 I t0 command_executor.cc:312 Executing SQL: SELECT * FROM xpath('/abc/def', '<abc><def a="b">Hello</def><def>Bye</def></abc>')
2024-10-22T09:17:55.331 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.331 T t0 view_helpers.cc:1012 example: SELECT * FROM xpath('/abc/def', '<abc><def a="b">Hello</def><def>Bye</def></abc>')
2024-10-22T09:17:55.331 T t0 view_helpers.cc:1013 example result:     result       node_path  node_attr node_text 
<def a=⋯</def>␊ /abc/def[1] {"a":"b"} Hello     
<def>Bye</def>␊ /abc/def[2] {}        Bye       
2024-10-22T09:17:55.331 I t0 command_executor.cc:312 Executing SQL: SELECT * FROM xpath('/abc/def/@a', '<abc><def a="b">Hello</def><def>Bye</def></abc>')
2024-10-22T09:17:55.331 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.331 T t0 view_helpers.cc:1012 example: SELECT * FROM xpath('/abc/def/@a', '<abc><def a="b">Hello</def><def>Bye</def></abc>')
2024-10-22T09:17:55.331 T t0 view_helpers.cc:1013 example result: result   node_path    node_attr node_text 
b      /abc/def[1]/@a {"a":"b"} Hello     
2024-10-22T09:17:55.331 I t0 command_executor.cc:312 Executing SQL: SELECT * FROM xpath('/abc/def/text()', '<abc><def a="b">Hello &#x2605;</def></abc>')
2024-10-22T09:17:55.331 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.331 T t0 view_helpers.cc:1012 example: SELECT * FROM xpath('/abc/def/text()', '<abc><def a="b">Hello &#x2605;</def></abc>')
2024-10-22T09:17:55.331 T t0 view_helpers.cc:1013 example result: result     node_path    node_attr node_text 
Hello ★ /abc/def/text() {}        Hello ★   
2024-10-22T09:17:55.331 I t0 command_executor.cc:312 Executing SQL: SELECT yaml_to_json('abc: def')
2024-10-22T09:17:55.332 I t0 command_executor.cc:406 sqlite3_changes() -> 0
2024-10-22T09:17:55.332 T t0 view_helpers.cc:1012 example: SELECT yaml_to_json('abc: def')
2024-10-22T09:17:55.332 T t0 view_helpers.cc:1013 example result: {"abc": "def"}
2024-10-22T09:17:55.332 I t0 command_executor.cc:267 compiling PRQL: from [{s='Hello'}] | select { s=text.contains 'lo' s }
2024-10-22T09:17:55.332 T t0 view_helpers.cc:1012 example: from [{s='Hello'}] | select { s=text.contains 'lo' s }
2024-10-22T09:17:55.332 T t0 view_helpers.cc:1013 example result: ✘ error: PRQL is not supported in this build

2024-10-22T09:17:55.332 I t0 command_executor.cc:267 compiling PRQL: from [{s='Goodbye'}] | select { s=text.contains 'lo' s }
2024-10-22T09:17:55.332 T t0 view_helpers.cc:1012 example: from [{s='Goodbye'}] | select { s=text.contains 'lo' s }
2024-10-22T09:17:55.332 T t0 view_helpers.cc:1013 example result: ✘ error: PRQL is not supported in this build

2024-10-22T09:17:55.332 I t0 command_executor.cc:267 compiling PRQL: from [{s='Hello'}] | select { s=text.ends_with 'lo' s }
2024-10-22T09:17:55.332 T t0 view_helpers.cc:1012 example: from [{s='Hello'}] | select { s=text.ends_with 'lo' s }
2024-10-22T09:17:55.332 T t0 view_helpers.cc:1013 example result: ✘ error: PRQL is not supported in this build

2024-10-22T09:17:55.332 I t0 command_executor.cc:267 compiling PRQL: from [{s='Goodbye'}] | select { s=text.ends_with 'lo' s }
2024-10-22T09:17:55.332 T t0 view_helpers.cc:1012 example: from [{s='Goodbye'}] | select { s=text.ends_with 'lo' s }
2024-10-22T09:17:55.332 T t0 view_helpers.cc:1013 example result: ✘ error: PRQL is not supported in this build

2024-10-22T09:17:55.332 I t0 command_executor.cc:267 compiling PRQL: from [{s='Hello, World!'}] | select { s=text.extract 1 5 s }
2024-10-22T09:17:55.332 T t0 view_helpers.cc:1012 example: from [{s='Hello, World!'}] | select { s=text.extract 1 5 s }
2024-10-22T09:17:55.332 T t0 view_helpers.cc:1013 example result: ✘ error: PRQL is not supported in this build

2024-10-22T09:17:55.332 I t0 command_executor.cc:267 compiling PRQL: from [{s='Hello, World!'}] | select { s=text.length s }
2024-10-22T09:17:55.332 T t0 view_helpers.cc:1012 example: from [{s='Hello, World!'}] | select { s=text.length s }
2024-10-22T09:17:55.332 T t0 view_helpers.cc:1013 example result: ✘ error: PRQL is not supported in this build

2024-10-22T09:17:55.332 I t0 command_executor.cc:267 compiling PRQL: from [{s='HELLO'}] | select { s=text.lower s }
2024-10-22T09:17:55.332 T t0 view_helpers.cc:1012 example: from [{s='HELLO'}] | select { s=text.lower s }
2024-10-22T09:17:55.332 T t0 view_helpers.cc:1013 example result: ✘ error: PRQL is not supported in this build

2024-10-22T09:17:55.332 I t0 command_executor.cc:267 compiling PRQL: from [{s='  HELLO  '}] | select { s=text.ltrim s }
2024-10-22T09:17:55.332 T t0 view_helpers.cc:1012 example: from [{s='  HELLO  '}] | select { s=text.ltrim s }
2024-10-22T09:17:55.332 T t0 view_helpers.cc:1013 example result: ✘ error: PRQL is not supported in this build

2024-10-22T09:17:55.332 I t0 command_executor.cc:267 compiling PRQL: from [{s='foobar'}] | select { s=text.replace 'foo' '' s }
2024-10-22T09:17:55.332 T t0 view_helpers.cc:1012 example: from [{s='foobar'}] | select { s=text.replace 'foo' '' s }
2024-10-22T09:17:55.332 T t0 view_helpers.cc:1013 example result: ✘ error: PRQL is not supported in this build

2024-10-22T09:17:55.332 I t0 command_executor.cc:267 compiling PRQL: from [{s='  HELLO  '}] | select { s=text.rtrim s }
2024-10-22T09:17:55.332 T t0 view_helpers.cc:1012 example: from [{s='  HELLO  '}] | select { s=text.rtrim s }
2024-10-22T09:17:55.332 T t0 view_helpers.cc:1013 example result: ✘ error: PRQL is not supported in this build

2024-10-22T09:17:55.332 I t0 command_executor.cc:267 compiling PRQL: from [{s='Hello'}] | select { s=text.starts_with 'He' s }
2024-10-22T09:17:55.332 T t0 view_helpers.cc:1012 example: from [{s='Hello'}] | select { s=text.starts_with 'He' s }
2024-10-22T09:17:55.332 T t0 view_helpers.cc:1013 example result: ✘ error: PRQL is not supported in this build

2024-10-22T09:17:55.332 I t0 command_executor.cc:267 compiling PRQL: from [{s='Goodbye'}] | select { s=text.starts_with 'He' s }
2024-10-22T09:17:55.332 T t0 view_helpers.cc:1012 example: from [{s='Goodbye'}] | select { s=text.starts_with 'He' s }
2024-10-22T09:17:55.332 T t0 view_helpers.cc:1013 example result: ✘ error: PRQL is not supported in this build

2024-10-22T09:17:55.332 I t0 command_executor.cc:267 compiling PRQL: from [{s='  HELLO  '}] | select { s=text.trim s }
2024-10-22T09:17:55.332 T t0 view_helpers.cc:1012 example: from [{s='  HELLO  '}] | select { s=text.trim s }
2024-10-22T09:17:55.332 T t0 view_helpers.cc:1013 example result: ✘ error: PRQL is not supported in this build

2024-10-22T09:17:55.332 I t0 command_executor.cc:267 compiling PRQL: from [{s='hello'}] | select { s=text.upper s }
2024-10-22T09:17:55.332 T t0 view_helpers.cc:1012 example: from [{s='hello'}] | select { s=text.upper s }
2024-10-22T09:17:55.332 T t0 view_helpers.cc:1013 example result: ✘ error: PRQL is not supported in this build

2024-10-22T09:17:55.332 I t0 command_executor.cc:267 compiling PRQL: from [{a=1}, {a=2}] | aggregate { arr = json.group_array a }
2024-10-22T09:17:55.332 T t0 view_helpers.cc:1012 example: from [{a=1}, {a=2}] | aggregate { arr = json.group_array a }
2024-10-22T09:17:55.332 T t0 view_helpers.cc:1013 example result: ✘ error: PRQL is not supported in this build

2024-10-22T09:17:55.332 I t0 command_executor.cc:267 compiling PRQL: from [{a=1}, {a=2}] | derive b = a * 2
2024-10-22T09:17:55.332 T t0 view_helpers.cc:1012 example: from [{a=1}, {a=2}] | derive b = a * 2
2024-10-22T09:17:55.332 T t0 view_helpers.cc:1013 example result: ✘ error: PRQL is not supported in this build

2024-10-22T09:17:55.332 I t0 command_executor.cc:267 compiling PRQL: from [{a=1}, {a=2}] | filter a > 1
2024-10-22T09:17:55.332 T t0 view_helpers.cc:1012 example: from [{a=1}, {a=2}] | filter a > 1
2024-10-22T09:17:55.332 T t0 view_helpers.cc:1013 example result: ✘ error: PRQL is not supported in this build

2024-10-22T09:17:55.332 I t0 command_executor.cc:267 compiling PRQL: from http_status_codes | take 3
2024-10-22T09:17:55.332 T t0 view_helpers.cc:1012 example: from http_status_codes | take 3
2024-10-22T09:17:55.332 T t0 view_helpers.cc:1013 example result: ✘ error: PRQL is not supported in this build

2024-10-22T09:17:55.332 I t0 command_executor.cc:267 compiling PRQL: from [{ col1=1, col2='abc' }, { col1=2, col2='def' }]
2024-10-22T09:17:55.332 T t0 view_helpers.cc:1012 example: from [{ col1=1, col2='abc' }, { col1=2, col2='def' }]
2024-10-22T09:17:55.332 T t0 view_helpers.cc:1013 example result: ✘ error: PRQL is not supported in this build

2024-10-22T09:17:55.332 I t0 command_executor.cc:267 compiling PRQL: from lnav_example_log | group { log_level } (aggregate { count this })
2024-10-22T09:17:55.332 T t0 view_helpers.cc:1012 example: from lnav_example_log | group { log_level } (aggregate { count this })
2024-10-22T09:17:55.332 T t0 view_helpers.cc:1013 example result: ✘ error: PRQL is not supported in this build

2024-10-22T09:17:55.332 I t0 command_executor.cc:267 compiling PRQL: from [{a=1, b='abc'}, {a=2, b='def'}] | select b
2024-10-22T09:17:55.332 T t0 view_helpers.cc:1012 example: from [{a=1, b='abc'}, {a=2, b='def'}] | select b
2024-10-22T09:17:55.332 T t0 view_helpers.cc:1013 example result: ✘ error: PRQL is not supported in this build

2024-10-22T09:17:55.332 I t0 command_executor.cc:267 compiling PRQL: from [{a=1}, {a=2}] | select b = a * 2
2024-10-22T09:17:55.332 T t0 view_helpers.cc:1012 example: from [{a=1}, {a=2}] | select b = a * 2
2024-10-22T09:17:55.332 T t0 view_helpers.cc:1013 example result: ✘ error: PRQL is not supported in this build

2024-10-22T09:17:55.332 I t0 command_executor.cc:267 compiling PRQL: from [{a=1}, {a=2}] | sort {-a}
2024-10-22T09:17:55.332 T t0 view_helpers.cc:1012 example: from [{a=1}, {a=2}] | sort {-a}
2024-10-22T09:17:55.332 T t0 view_helpers.cc:1013 example result: ✘ error: PRQL is not supported in this build

2024-10-22T09:17:55.332 I t0 command_executor.cc:267 compiling PRQL: from [{a=1}, {a=1}, {a=2}] | stats.average_of a
2024-10-22T09:17:55.332 T t0 view_helpers.cc:1012 example: from [{a=1}, {a=1}, {a=2}] | stats.average_of a
2024-10-22T09:17:55.332 T t0 view_helpers.cc:1013 example result: ✘ error: PRQL is not supported in this build

2024-10-22T09:17:55.332 I t0 command_executor.cc:267 compiling PRQL: from [{a=1, b=1}, {a=1, b=1}, {a=2, b=1}] | stats.by a {sum b}
2024-10-22T09:17:55.332 T t0 view_helpers.cc:1012 example: from [{a=1, b=1}, {a=1, b=1}, {a=2, b=1}] | stats.by a {sum b}
2024-10-22T09:17:55.332 T t0 view_helpers.cc:1013 example result: ✘ error: PRQL is not supported in this build

2024-10-22T09:17:55.332 I t0 command_executor.cc:267 compiling PRQL: from [{a=1}, {a=1}, {a=2}] | stats.count_by a
2024-10-22T09:17:55.332 T t0 view_helpers.cc:1012 example: from [{a=1}, {a=1}, {a=2}] | stats.count_by a
2024-10-22T09:17:55.332 T t0 view_helpers.cc:1013 example result: ✘ error: PRQL is not supported in this build

2024-10-22T09:17:55.332 I t0 command_executor.cc:267 compiling PRQL: from lnav_example_log | stats.hist ex_procname
2024-10-22T09:17:55.332 T t0 view_helpers.cc:1012 example: from lnav_example_log | stats.hist ex_procname
2024-10-22T09:17:55.332 T t0 view_helpers.cc:1013 example result: ✘ error: PRQL is not supported in this build

2024-10-22T09:17:55.332 I t0 command_executor.cc:267 compiling PRQL: from [{a=1}, {a=1}, {a=2}] | stats.sum_of a
2024-10-22T09:17:55.332 T t0 view_helpers.cc:1012 example: from [{a=1}, {a=1}, {a=2}] | stats.sum_of a
2024-10-22T09:17:55.332 T t0 view_helpers.cc:1013 example result: ✘ error: PRQL is not supported in this build

2024-10-22T09:17:55.332 I t0 command_executor.cc:267 compiling PRQL: from [{a=1}, {a=2}, {a=3}] | take 1
2024-10-22T09:17:55.332 T t0 view_helpers.cc:1012 example: from [{a=1}, {a=2}, {a=3}] | take 1
2024-10-22T09:17:55.332 T t0 view_helpers.cc:1013 example result: ✘ error: PRQL is not supported in this build

2024-10-22T09:17:55.332 I t0 command_executor.cc:267 compiling PRQL: from [{a=1}, {a=2}, {a=3}] | take 2..3
2024-10-22T09:17:55.332 T t0 view_helpers.cc:1012 example: from [{a=1}, {a=2}, {a=3}] | take 2..3
2024-10-22T09:17:55.332 T t0 view_helpers.cc:1013 example result: ✘ error: PRQL is not supported in this build

2024-10-22T09:17:55.332 I t0 command_executor.cc:267 compiling PRQL: from [{a=1}, {a=1}, {a=2}] | utils.distinct a
2024-10-22T09:17:55.332 T t0 view_helpers.cc:1012 example: from [{a=1}, {a=1}, {a=2}] | utils.distinct a
2024-10-22T09:17:55.332 T t0 view_helpers.cc:1013 example result: ✘ error: PRQL is not supported in this build

2024-10-22T09:17:55.332 I t0 command_executor.cc:657 Executing file: /Users/brianboy/.config/lnav/session
2024-10-22T09:17:55.332 D t0 log_format_loader.cc:1596 Searching for script in path: /etc/lnav/formats/*/*.lnav
2024-10-22T09:17:55.332 D t0 log_format_loader.cc:1596 Searching for script in path: /etc/lnav/configs/*/*.lnav
2024-10-22T09:17:55.332 D t0 log_format_loader.cc:1596 Searching for script in path: /usr/local/Cellar/lnav/0.12.2/etc/lnav/formats/*/*.lnav
2024-10-22T09:17:55.333 D t0 log_format_loader.cc:1596 Searching for script in path: /usr/local/Cellar/lnav/0.12.2/etc/lnav/configs/*/*.lnav
2024-10-22T09:17:55.333 D t0 log_format_loader.cc:1596 Searching for script in path: /Users/brianboy/.config/lnav/formats/*/*.lnav
2024-10-22T09:17:55.333 D t0 log_format_loader.cc:1608   found script: /Users/brianboy/.config/lnav/formats/default/dhclient-summary.lnav
2024-10-22T09:17:55.333 D t0 log_format_loader.cc:1608   found script: /Users/brianboy/.config/lnav/formats/default/docker-url-handler.lnav
2024-10-22T09:17:55.333 D t0 log_format_loader.cc:1608   found script: /Users/brianboy/.config/lnav/formats/default/journald-url-handler.lnav
2024-10-22T09:17:55.333 D t0 log_format_loader.cc:1608   found script: /Users/brianboy/.config/lnav/formats/default/lnav-copy-text.lnav
2024-10-22T09:17:55.333 D t0 log_format_loader.cc:1608   found script: /Users/brianboy/.config/lnav/formats/default/lnav-pop-view.lnav
2024-10-22T09:17:55.333 D t0 log_format_loader.cc:1608   found script: /Users/brianboy/.config/lnav/formats/default/partition-by-boot.lnav
2024-10-22T09:17:55.333 D t0 log_format_loader.cc:1608   found script: /Users/brianboy/.config/lnav/formats/default/piper-url-handler.lnav
2024-10-22T09:17:55.333 D t0 log_format_loader.cc:1608   found script: /Users/brianboy/.config/lnav/formats/default/rename-stdin.lnav
2024-10-22T09:17:55.333 D t0 log_format_loader.cc:1608   found script: /Users/brianboy/.config/lnav/formats/default/search-for.lnav
2024-10-22T09:17:55.333 D t0 log_format_loader.cc:1596 Searching for script in path: /Users/brianboy/.config/lnav/configs/*/*.lnav
2024-10-22T09:17:55.333 D t0 lnav.cc:1508 rescan started
2024-10-22T09:17:55.334 I t4 file_collection.cc:104 fd limit: 256; open file limit: 224
2024-10-22T09:17:55.334 D t5 archive_manager.cc:91 read open /private/var/log/system.log
2024-10-22T09:17:55.334 D t5 archive_manager.cc:98 read next header (null) /private/var/log/system.log
2024-10-22T09:17:55.334 D t5 archive_manager.cc:100 read next done /private/var/log/system.log
2024-10-22T09:17:55.334 I t5 file_collection.cc:531 loading new file: filename=/private/var/log/system.log
2024-10-22T09:17:55.334 I t5 logfile.cc:127 Creating logfile: fd=13; size=1355; mtime=1729581372; filename=/private/var/log/system.log
2024-10-22T09:17:55.334 I t5 logfile.cc:129   actual_path=/private/var/log/system.log
2024-10-22T09:17:55.334 T t5 piper.file.cc:59 first 4 bytes are not a piper header: 4f637420
2024-10-22T09:17:55.334 I t5 logfile.cc:209 /private/var/log/system.log: file options have changed
2024-10-22T09:17:55.334 I t5 logfile.cc:214   tz=Europe/Zurich
2024-10-22T09:17:55.352 E t0 view_curses.cc:1231 failed precondition `bg >= -100'
2024-10-22T09:17:55.352 E t0 lnav_log.cc:429 Received signal: 6
2024-10-22T09:17:55.353 I t0 lnav_log.cc:221 uname:
2024-10-22T09:17:55.353 I t0 lnav_log.cc:222   sysname=Darwin
2024-10-22T09:17:55.353 I t0 lnav_log.cc:223   nodename=Brians-MacBook-Pro.local
2024-10-22T09:17:55.353 I t0 lnav_log.cc:224   machine=x86_64
2024-10-22T09:17:55.353 I t0 lnav_log.cc:225   release=22.1.0
2024-10-22T09:17:55.353 I t0 lnav_log.cc:226   version=Darwin Kernel Version 22.1.0: Sun Oct  9 20:14:54 PDT 2022; root:xnu-8792.41.9~2/RELEASE_X86_64
2024-10-22T09:17:55.353 I t0 lnav_log.cc:227 PCRE:
2024-10-22T09:17:55.353 I t0 lnav_log.cc:228   jit=1
2024-10-22T09:17:55.353 I t0 lnav_log.cc:229   jittarget=x86 64bit (little endian + unaligned)
2024-10-22T09:17:55.353 I t0 lnav_log.cc:230 Environment:
2024-10-22T09:17:55.353 I t0 lnav_log.cc:231   HOME=/Users/brianboy
2024-10-22T09:17:55.353 I t0 lnav_log.cc:232   XDG_CONFIG_HOME=(null)
2024-10-22T09:17:55.353 I t0 lnav_log.cc:233   LANG=en_US.UTF-8
2024-10-22T09:17:55.353 I t0 lnav_log.cc:234   PATH=/usr/local/bin:/usr/local/sbin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:/Library/Apple/usr/bin:/usr/local/sbin:/Users/brianboy/.local/bin:/usr/local/mysql/bin:/Users/brianboy/.local/bin:/usr/local/mysql/bin:/Users/brianboy/.local/bin
2024-10-22T09:17:55.353 I t0 lnav_log.cc:235   TERM=tmux-256color
2024-10-22T09:17:55.353 I t0 lnav_log.cc:236   TZ=(null)
2024-10-22T09:17:55.353 I t0 lnav_log.cc:237 Process:
2024-10-22T09:17:55.353 I t0 lnav_log.cc:238   pid=26547
2024-10-22T09:17:55.353 I t0 lnav_log.cc:239   ppid=25379
2024-10-22T09:17:55.353 I t0 lnav_log.cc:240   pgrp=26547
2024-10-22T09:17:55.353 I t0 lnav_log.cc:241   uid=501
2024-10-22T09:17:55.353 I t0 lnav_log.cc:242   gid=20
2024-10-22T09:17:55.353 I t0 lnav_log.cc:243   euid=501
2024-10-22T09:17:55.353 I t0 lnav_log.cc:244   egid=20
2024-10-22T09:17:55.353 I t0 lnav_log.cc:248   cwd=/Users/brianboy/Repositories/02-local/baspo-prototypes/app/public/wp-content
2024-10-22T09:17:55.353 I t0 lnav_log.cc:250 Executable:
2024-10-22T09:17:55.353 I t0 lnav_log.cc:251   version=lnav 0.12.2
2024-10-22T09:17:55.353 I t0 lnav_log.cc:254 rusage:
2024-10-22T09:17:55.353 I t0 lnav_log.cc:254   utime=0.121591
2024-10-22T09:17:55.353 I t0 lnav_log.cc:254   stime=0.044378
2024-10-22T09:17:55.353 I t0 lnav_log.cc:254   maxrss=19435520
2024-10-22T09:17:55.353 I t0 lnav_log.cc:254   ixrss=0
2024-10-22T09:17:55.353 I t0 lnav_log.cc:254   idrss=0
2024-10-22T09:17:55.353 I t0 lnav_log.cc:254   isrss=0
2024-10-22T09:17:55.353 I t0 lnav_log.cc:254   minflt=5566
2024-10-22T09:17:55.353 I t0 lnav_log.cc:254   majflt=39
2024-10-22T09:17:55.353 I t0 lnav_log.cc:254   nswap=0
2024-10-22T09:17:55.353 I t0 lnav_log.cc:254   inblock=0
2024-10-22T09:17:55.353 I t0 lnav_log.cc:254   oublock=0
2024-10-22T09:17:55.353 I t0 lnav_log.cc:254   msgsnd=76
2024-10-22T09:17:55.353 I t0 lnav_log.cc:254   msgrcv=8
2024-10-22T09:17:55.353 I t0 lnav_log.cc:254   nsignals=1
2024-10-22T09:17:55.353 I t0 lnav_log.cc:254   nvcsw=5
2024-10-22T09:17:55.353 I t0 lnav_log.cc:254   nivcsw=238
2024-10-22T09:17:55.353 D t0 listview_curses.hh:501 listview_curses=0x7f79170096d0
2024-10-22T09:17:55.353 D t0 listview_curses.hh:511   lv_title=; vc_y=0; lv_top=0; lv_left=0; lv_height=0; lv_selection=0; inner_height=0
2024-10-22T09:17:55.353 D t0 listview_curses.hh:501 listview_curses=0x7f791700a070
2024-10-22T09:17:55.353 D t0 listview_curses.hh:511   lv_title=breadcrumb popup; vc_y=0; lv_top=0; lv_left=0; lv_height=0; lv_selection=-1; inner_height=0
2024-10-22T09:17:55.353 D t0 listview_curses.hh:501 listview_curses=0x10ef060e0
2024-10-22T09:17:55.353 D t0 listview_curses.hh:511   lv_title=; vc_y=71; lv_top=0; lv_left=0; lv_height=0; lv_selection=0; inner_height=0
2024-10-22T09:17:55.353 D t0 listview_curses.hh:501 listview_curses=0x10ef064b0
2024-10-22T09:17:55.353 D t0 listview_curses.hh:511   lv_title=Text Filters; vc_y=65; lv_top=0; lv_left=0; lv_height=5; lv_selection=0; inner_height=0
2024-10-22T09:17:55.353 D t0 listview_curses.hh:501 listview_curses=0x10ef06910
2024-10-22T09:17:55.353 D t0 listview_curses.hh:511   lv_title=Files; vc_y=65; lv_top=0; lv_left=0; lv_height=5; lv_selection=0; inner_height=1
2024-10-22T09:17:55.353 D t0 listview_curses.hh:501 listview_curses=0x10ef06fb0
2024-10-22T09:17:55.353 D t0 listview_curses.hh:511   lv_title=; vc_y=0; lv_top=0; lv_left=0; lv_height=0; lv_selection=0; inner_height=0
2024-10-22T09:17:55.353 D t0 listview_curses.hh:501 listview_curses=0x10ef07650
2024-10-22T09:17:55.353 D t0 listview_curses.hh:511   lv_title=; vc_y=71; lv_top=0; lv_left=0; lv_height=0; lv_selection=0; inner_height=0
2024-10-22T09:17:55.353 D t0 listview_curses.hh:501 listview_curses=0x10ef07fb0
2024-10-22T09:17:55.353 D t0 listview_curses.hh:511   lv_title=; vc_y=71; lv_top=0; lv_left=0; lv_height=0; lv_selection=0; inner_height=0
2024-10-22T09:17:55.353 D t0 listview_curses.hh:501 listview_curses=0x10ef08380
2024-10-22T09:17:55.353 D t0 listview_curses.hh:511   lv_title=; vc_y=71; lv_top=0; lv_left=0; lv_height=0; lv_selection=0; inner_height=0
2024-10-22T09:17:55.353 D t0 listview_curses.hh:501 listview_curses=0x10ef08a20
2024-10-22T09:17:55.353 D t0 listview_curses.hh:511   lv_title=; vc_y=71; lv_top=0; lv_left=0; lv_height=0; lv_selection=0; inner_height=0
2024-10-22T09:17:55.353 D t0 listview_curses.hh:501 listview_curses=0x10ef08e00
2024-10-22T09:17:55.353 D t0 listview_curses.hh:511   lv_title=spectro-details; vc_y=64; lv_top=0; lv_left=0; lv_height=5; lv_selection=0; inner_height=1
2024-10-22T09:17:55.353 D t0 listview_curses.hh:501 listview_curses=0x10ef094a0
2024-10-22T09:17:55.353 D t0 listview_curses.hh:511   lv_title=gantt-details; vc_y=71; lv_top=0; lv_left=0; lv_height=5; lv_selection=0; inner_height=0
2024-10-22T09:17:55.353 D t0 listview_curses.hh:501 listview_curses=0x10ef09bf0
2024-10-22T09:17:55.353 D t0 listview_curses.hh:511   lv_title=LOG; vc_y=2; lv_top=0; lv_left=0; lv_height=-9; lv_selection=0; inner_height=0
2024-10-22T09:17:55.353 D t0 listview_curses.hh:501 listview_curses=0x10ef09fc0
2024-10-22T09:17:55.353 D t0 listview_curses.hh:511   lv_title=TEXT; vc_y=2; lv_top=0; lv_left=0; lv_height=-9; lv_selection=0; inner_height=0
2024-10-22T09:17:55.353 D t0 listview_curses.hh:501 listview_curses=0x10ef0a390
2024-10-22T09:17:55.353 D t0 listview_curses.hh:511   lv_title=HELP; vc_y=2; lv_top=0; lv_left=0; lv_height=-9; lv_selection=0; inner_height=0
2024-10-22T09:17:55.353 D t0 listview_curses.hh:501 listview_curses=0x10ef0a760
2024-10-22T09:17:55.353 D t0 listview_curses.hh:511   lv_title=HIST; vc_y=2; lv_top=0; lv_left=0; lv_height=-9; lv_selection=-1; inner_height=0
2024-10-22T09:17:55.353 D t0 listview_curses.hh:501 listview_curses=0x10ef0ab30
2024-10-22T09:17:55.353 D t0 listview_curses.hh:511   lv_title=DB; vc_y=2; lv_top=0; lv_left=0; lv_height=-9; lv_selection=0; inner_height=0
2024-10-22T09:17:55.353 D t0 listview_curses.hh:501 listview_curses=0x10ef0af00
2024-10-22T09:17:55.353 D t0 listview_curses.hh:511   lv_title=SCHEMA; vc_y=2; lv_top=0; lv_left=0; lv_height=-9; lv_selection=0; inner_height=0
2024-10-22T09:17:55.353 D t0 listview_curses.hh:501 listview_curses=0x10ef0b2d0
2024-10-22T09:17:55.353 D t0 listview_curses.hh:511   lv_title=PRETTY; vc_y=2; lv_top=0; lv_left=0; lv_height=-9; lv_selection=0; inner_height=0
2024-10-22T09:17:55.353 D t0 listview_curses.hh:501 listview_curses=0x10ef0b6a0
2024-10-22T09:17:55.353 D t0 listview_curses.hh:511   lv_title=SPECTRO; vc_y=2; lv_top=0; lv_left=0; lv_height=-9; lv_selection=-1; inner_height=0
2024-10-22T09:17:55.353 D t0 listview_curses.hh:501 listview_curses=0x10ef0ba70
2024-10-22T09:17:55.353 D t0 listview_curses.hh:511   lv_title=GANTT; vc_y=2; lv_top=0; lv_left=0; lv_height=-9; lv_selection=0; inner_height=0
2024-10-22T09:17:55.353 I t0 lnav.hh:98 recent_key_presses: index=0
 0x0 ( ) 0x0 ( ) 0x0 ( ) 0x0 ( ) 0x0 ( ) 0x0 ( ) 0x0 ( ) 0x0 ( ) 0x0 ( ) 0x0 ( )
